"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ApiClient = _interopRequireDefault(require("../ApiClient"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * The UpdateTokenizer model module.
 * @module model/UpdateTokenizer
 * @version 2.16.12
 */
var UpdateTokenizer = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>UpdateTokenizer</code>.
   * updateTokenizer is a command that updates a tokenizer item
   * @alias module:model/UpdateTokenizer
   * @param name {String} Current item name
   * @param templateType {String} Which template type this tokenizer is used for [SSN,CreditCard,USPhoneNumber,Email,Regexp]
   * @param tokenizerType {String} Tokenizer type
   */
  function UpdateTokenizer(name, templateType, tokenizerType) {
    _classCallCheck(this, UpdateTokenizer);

    UpdateTokenizer.initialize(this, name, templateType, tokenizerType);
  }
  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */


  _createClass(UpdateTokenizer, null, [{
    key: "initialize",
    value: function initialize(obj, name, templateType, tokenizerType) {
      obj['name'] = name;
      obj['template-type'] = templateType;
      obj['tokenizer-type'] = tokenizerType;
    }
    /**
     * Constructs a <code>UpdateTokenizer</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateTokenizer} obj Optional instance to populate.
     * @return {module:model/UpdateTokenizer} The populated <code>UpdateTokenizer</code> instance.
     */

  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new UpdateTokenizer();

        if (data.hasOwnProperty('add-tag')) {
          obj['add-tag'] = _ApiClient["default"].convertToType(data['add-tag'], ['String']);
        }

        if (data.hasOwnProperty('alphabet')) {
          obj['alphabet'] = _ApiClient["default"].convertToType(data['alphabet'], 'String');
        }

        if (data.hasOwnProperty('decoding-template')) {
          obj['decoding-template'] = _ApiClient["default"].convertToType(data['decoding-template'], 'String');
        }

        if (data.hasOwnProperty('delete_protection')) {
          obj['delete_protection'] = _ApiClient["default"].convertToType(data['delete_protection'], 'String');
        }

        if (data.hasOwnProperty('encoding-template')) {
          obj['encoding-template'] = _ApiClient["default"].convertToType(data['encoding-template'], 'String');
        }

        if (data.hasOwnProperty('encryption-key-name')) {
          obj['encryption-key-name'] = _ApiClient["default"].convertToType(data['encryption-key-name'], 'String');
        }

        if (data.hasOwnProperty('name')) {
          obj['name'] = _ApiClient["default"].convertToType(data['name'], 'String');
        }

        if (data.hasOwnProperty('new-metadata')) {
          obj['new-metadata'] = _ApiClient["default"].convertToType(data['new-metadata'], 'String');
        }

        if (data.hasOwnProperty('new-name')) {
          obj['new-name'] = _ApiClient["default"].convertToType(data['new-name'], 'String');
        }

        if (data.hasOwnProperty('pattern')) {
          obj['pattern'] = _ApiClient["default"].convertToType(data['pattern'], 'String');
        }

        if (data.hasOwnProperty('rm-tag')) {
          obj['rm-tag'] = _ApiClient["default"].convertToType(data['rm-tag'], ['String']);
        }

        if (data.hasOwnProperty('template-type')) {
          obj['template-type'] = _ApiClient["default"].convertToType(data['template-type'], 'String');
        }

        if (data.hasOwnProperty('token')) {
          obj['token'] = _ApiClient["default"].convertToType(data['token'], 'String');
        }

        if (data.hasOwnProperty('tokenizer-type')) {
          obj['tokenizer-type'] = _ApiClient["default"].convertToType(data['tokenizer-type'], 'String');
        }

        if (data.hasOwnProperty('tweak-type')) {
          obj['tweak-type'] = _ApiClient["default"].convertToType(data['tweak-type'], 'String');
        }

        if (data.hasOwnProperty('uid-token')) {
          obj['uid-token'] = _ApiClient["default"].convertToType(data['uid-token'], 'String');
        }
      }

      return obj;
    }
  }]);

  return UpdateTokenizer;
}();
/**
 * List of the new tags that will be attached to this item
 * @member {Array.<String>} add-tag
 */


UpdateTokenizer.prototype['add-tag'] = undefined;
/**
 * Alphabet to use in regexp vaultless tokenization
 * @member {String} alphabet
 */

UpdateTokenizer.prototype['alphabet'] = undefined;
/**
 * The Decoding output template to use in regexp vaultless tokenization
 * @member {String} decoding-template
 */

UpdateTokenizer.prototype['decoding-template'] = undefined;
/**
 * @member {String} delete_protection
 */

UpdateTokenizer.prototype['delete_protection'] = undefined;
/**
 * The Encoding output template to use in regexp vaultless tokenization
 * @member {String} encoding-template
 */

UpdateTokenizer.prototype['encoding-template'] = undefined;
/**
 * AES key name to use in vaultless tokenization
 * @member {String} encryption-key-name
 */

UpdateTokenizer.prototype['encryption-key-name'] = undefined;
/**
 * Current item name
 * @member {String} name
 */

UpdateTokenizer.prototype['name'] = undefined;
/**
 * New item metadata
 * @member {String} new-metadata
 * @default 'default_metadata'
 */

UpdateTokenizer.prototype['new-metadata'] = 'default_metadata';
/**
 * New item name
 * @member {String} new-name
 */

UpdateTokenizer.prototype['new-name'] = undefined;
/**
 * Pattern to use in regexp vaultless tokenization
 * @member {String} pattern
 */

UpdateTokenizer.prototype['pattern'] = undefined;
/**
 * List of the existent tags that will be removed from this item
 * @member {Array.<String>} rm-tag
 */

UpdateTokenizer.prototype['rm-tag'] = undefined;
/**
 * Which template type this tokenizer is used for [SSN,CreditCard,USPhoneNumber,Email,Regexp]
 * @member {String} template-type
 */

UpdateTokenizer.prototype['template-type'] = undefined;
/**
 * Authentication token (see `/auth` and `/configure`)
 * @member {String} token
 */

UpdateTokenizer.prototype['token'] = undefined;
/**
 * Tokenizer type
 * @member {String} tokenizer-type
 */

UpdateTokenizer.prototype['tokenizer-type'] = undefined;
/**
 * The tweak type to use in vaultless tokenization [Supplied, Generated, Internal, Masking]
 * @member {String} tweak-type
 */

UpdateTokenizer.prototype['tweak-type'] = undefined;
/**
 * The universal identity token, Required only for universal_identity authentication
 * @member {String} uid-token
 */

UpdateTokenizer.prototype['uid-token'] = undefined;
var _default = UpdateTokenizer;
exports["default"] = _default;