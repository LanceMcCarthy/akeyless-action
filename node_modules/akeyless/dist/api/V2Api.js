"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ApiClient = _interopRequireDefault(require("../ApiClient"));

var _AkeylessGatewayConfig = _interopRequireDefault(require("../model/AkeylessGatewayConfig"));

var _AllowedAccess = _interopRequireDefault(require("../model/AllowedAccess"));

var _AssocRoleAuthMethod = _interopRequireDefault(require("../model/AssocRoleAuthMethod"));

var _AssocTargetItem = _interopRequireDefault(require("../model/AssocTargetItem"));

var _Auth = _interopRequireDefault(require("../model/Auth"));

var _AuthMethod = _interopRequireDefault(require("../model/AuthMethod"));

var _AuthOutput = _interopRequireDefault(require("../model/AuthOutput"));

var _BastionsList = _interopRequireDefault(require("../model/BastionsList"));

var _Configure = _interopRequireDefault(require("../model/Configure"));

var _ConfigureOutput = _interopRequireDefault(require("../model/ConfigureOutput"));

var _Connect = _interopRequireDefault(require("../model/Connect"));

var _CreateAWSTarget = _interopRequireDefault(require("../model/CreateAWSTarget"));

var _CreateAWSTargetOutput = _interopRequireDefault(require("../model/CreateAWSTargetOutput"));

var _CreateArtifactoryTarget = _interopRequireDefault(require("../model/CreateArtifactoryTarget"));

var _CreateArtifactoryTargetOutput = _interopRequireDefault(require("../model/CreateArtifactoryTargetOutput"));

var _CreateAuthMethod = _interopRequireDefault(require("../model/CreateAuthMethod"));

var _CreateAuthMethodAWSIAM = _interopRequireDefault(require("../model/CreateAuthMethodAWSIAM"));

var _CreateAuthMethodAWSIAMOutput = _interopRequireDefault(require("../model/CreateAuthMethodAWSIAMOutput"));

var _CreateAuthMethodAzureAD = _interopRequireDefault(require("../model/CreateAuthMethodAzureAD"));

var _CreateAuthMethodAzureADOutput = _interopRequireDefault(require("../model/CreateAuthMethodAzureADOutput"));

var _CreateAuthMethodCert = _interopRequireDefault(require("../model/CreateAuthMethodCert"));

var _CreateAuthMethodCertOutput = _interopRequireDefault(require("../model/CreateAuthMethodCertOutput"));

var _CreateAuthMethodEmail = _interopRequireDefault(require("../model/CreateAuthMethodEmail"));

var _CreateAuthMethodEmailOutput = _interopRequireDefault(require("../model/CreateAuthMethodEmailOutput"));

var _CreateAuthMethodGCP = _interopRequireDefault(require("../model/CreateAuthMethodGCP"));

var _CreateAuthMethodGCPOutput = _interopRequireDefault(require("../model/CreateAuthMethodGCPOutput"));

var _CreateAuthMethodHuawei = _interopRequireDefault(require("../model/CreateAuthMethodHuawei"));

var _CreateAuthMethodHuaweiOutput = _interopRequireDefault(require("../model/CreateAuthMethodHuaweiOutput"));

var _CreateAuthMethodK8S = _interopRequireDefault(require("../model/CreateAuthMethodK8S"));

var _CreateAuthMethodK8SOutput = _interopRequireDefault(require("../model/CreateAuthMethodK8SOutput"));

var _CreateAuthMethodLDAP = _interopRequireDefault(require("../model/CreateAuthMethodLDAP"));

var _CreateAuthMethodLDAPOutput = _interopRequireDefault(require("../model/CreateAuthMethodLDAPOutput"));

var _CreateAuthMethodOAuth = _interopRequireDefault(require("../model/CreateAuthMethodOAuth2"));

var _CreateAuthMethodOAuth2Output = _interopRequireDefault(require("../model/CreateAuthMethodOAuth2Output"));

var _CreateAuthMethodOIDC = _interopRequireDefault(require("../model/CreateAuthMethodOIDC"));

var _CreateAuthMethodOIDCOutput = _interopRequireDefault(require("../model/CreateAuthMethodOIDCOutput"));

var _CreateAuthMethodOutput = _interopRequireDefault(require("../model/CreateAuthMethodOutput"));

var _CreateAuthMethodSAML = _interopRequireDefault(require("../model/CreateAuthMethodSAML"));

var _CreateAuthMethodSAMLOutput = _interopRequireDefault(require("../model/CreateAuthMethodSAMLOutput"));

var _CreateAuthMethodUniversalIdentity = _interopRequireDefault(require("../model/CreateAuthMethodUniversalIdentity"));

var _CreateAuthMethodUniversalIdentityOutput = _interopRequireDefault(require("../model/CreateAuthMethodUniversalIdentityOutput"));

var _CreateAzureTarget = _interopRequireDefault(require("../model/CreateAzureTarget"));

var _CreateAzureTargetOutput = _interopRequireDefault(require("../model/CreateAzureTargetOutput"));

var _CreateCertificate = _interopRequireDefault(require("../model/CreateCertificate"));

var _CreateCertificateOutput = _interopRequireDefault(require("../model/CreateCertificateOutput"));

var _CreateClassicKey = _interopRequireDefault(require("../model/CreateClassicKey"));

var _CreateClassicKeyOutput = _interopRequireDefault(require("../model/CreateClassicKeyOutput"));

var _CreateDBTarget = _interopRequireDefault(require("../model/CreateDBTarget"));

var _CreateDBTargetOutput = _interopRequireDefault(require("../model/CreateDBTargetOutput"));

var _CreateDFCKey = _interopRequireDefault(require("../model/CreateDFCKey"));

var _CreateDFCKeyOutput = _interopRequireDefault(require("../model/CreateDFCKeyOutput"));

var _CreateDockerhubTarget = _interopRequireDefault(require("../model/CreateDockerhubTarget"));

var _CreateDockerhubTargetOutput = _interopRequireDefault(require("../model/CreateDockerhubTargetOutput"));

var _CreateDynamicSecret = _interopRequireDefault(require("../model/CreateDynamicSecret"));

var _CreateEKSTarget = _interopRequireDefault(require("../model/CreateEKSTarget"));

var _CreateEKSTargetOutput = _interopRequireDefault(require("../model/CreateEKSTargetOutput"));

var _CreateESM = _interopRequireDefault(require("../model/CreateESM"));

var _CreateESMOutput = _interopRequireDefault(require("../model/CreateESMOutput"));

var _CreateEventForwarder = _interopRequireDefault(require("../model/CreateEventForwarder"));

var _CreateEventForwarderOutput = _interopRequireDefault(require("../model/CreateEventForwarderOutput"));

var _CreateGKETarget = _interopRequireDefault(require("../model/CreateGKETarget"));

var _CreateGKETargetOutput = _interopRequireDefault(require("../model/CreateGKETargetOutput"));

var _CreateGcpTarget = _interopRequireDefault(require("../model/CreateGcpTarget"));

var _CreateGcpTargetOutput = _interopRequireDefault(require("../model/CreateGcpTargetOutput"));

var _CreateGithubTarget = _interopRequireDefault(require("../model/CreateGithubTarget"));

var _CreateGithubTargetOutput = _interopRequireDefault(require("../model/CreateGithubTargetOutput"));

var _CreateGlobalSignAtlasTarget = _interopRequireDefault(require("../model/CreateGlobalSignAtlasTarget"));

var _CreateGlobalSignAtlasTargetOutput = _interopRequireDefault(require("../model/CreateGlobalSignAtlasTargetOutput"));

var _CreateGlobalSignTarget = _interopRequireDefault(require("../model/CreateGlobalSignTarget"));

var _CreateGlobalSignTargetOutput = _interopRequireDefault(require("../model/CreateGlobalSignTargetOutput"));

var _CreateGroup = _interopRequireDefault(require("../model/CreateGroup"));

var _CreateGroupOutput = _interopRequireDefault(require("../model/CreateGroupOutput"));

var _CreateKey = _interopRequireDefault(require("../model/CreateKey"));

var _CreateKeyOutput = _interopRequireDefault(require("../model/CreateKeyOutput"));

var _CreateLdapTarget = _interopRequireDefault(require("../model/CreateLdapTarget"));

var _CreateLdapTargetOutput = _interopRequireDefault(require("../model/CreateLdapTargetOutput"));

var _CreateLinkedTarget = _interopRequireDefault(require("../model/CreateLinkedTarget"));

var _CreateLinkedTargetOutput = _interopRequireDefault(require("../model/CreateLinkedTargetOutput"));

var _CreateNativeK8STarget = _interopRequireDefault(require("../model/CreateNativeK8STarget"));

var _CreateNativeK8STargetOutput = _interopRequireDefault(require("../model/CreateNativeK8STargetOutput"));

var _CreateOidcApp = _interopRequireDefault(require("../model/CreateOidcApp"));

var _CreateOidcAppOutput = _interopRequireDefault(require("../model/CreateOidcAppOutput"));

var _CreatePKICertIssuer = _interopRequireDefault(require("../model/CreatePKICertIssuer"));

var _CreatePKICertIssuerOutput = _interopRequireDefault(require("../model/CreatePKICertIssuerOutput"));

var _CreatePingTarget = _interopRequireDefault(require("../model/CreatePingTarget"));

var _CreatePingTargetOutput = _interopRequireDefault(require("../model/CreatePingTargetOutput"));

var _CreateRabbitMQTarget = _interopRequireDefault(require("../model/CreateRabbitMQTarget"));

var _CreateRabbitMQTargetOutput = _interopRequireDefault(require("../model/CreateRabbitMQTargetOutput"));

var _CreateRole = _interopRequireDefault(require("../model/CreateRole"));

var _CreateRoleAuthMethodAssocOutput = _interopRequireDefault(require("../model/CreateRoleAuthMethodAssocOutput"));

var _CreateRotatedSecret = _interopRequireDefault(require("../model/CreateRotatedSecret"));

var _CreateRotatedSecretOutput = _interopRequireDefault(require("../model/CreateRotatedSecretOutput"));

var _CreateSSHCertIssuer = _interopRequireDefault(require("../model/CreateSSHCertIssuer"));

var _CreateSSHCertIssuerOutput = _interopRequireDefault(require("../model/CreateSSHCertIssuerOutput"));

var _CreateSSHTarget = _interopRequireDefault(require("../model/CreateSSHTarget"));

var _CreateSSHTargetOutput = _interopRequireDefault(require("../model/CreateSSHTargetOutput"));

var _CreateSalesforceTarget = _interopRequireDefault(require("../model/CreateSalesforceTarget"));

var _CreateSalesforceTargetOutput = _interopRequireDefault(require("../model/CreateSalesforceTargetOutput"));

var _CreateSecret = _interopRequireDefault(require("../model/CreateSecret"));

var _CreateSecretOutput = _interopRequireDefault(require("../model/CreateSecretOutput"));

var _CreateTargetItemAssocOutput = _interopRequireDefault(require("../model/CreateTargetItemAssocOutput"));

var _CreateTokenizer = _interopRequireDefault(require("../model/CreateTokenizer"));

var _CreateTokenizerOutput = _interopRequireDefault(require("../model/CreateTokenizerOutput"));

var _CreateUserEvent = _interopRequireDefault(require("../model/CreateUserEvent"));

var _CreateUserEventOutput = _interopRequireDefault(require("../model/CreateUserEventOutput"));

var _CreateWebTarget = _interopRequireDefault(require("../model/CreateWebTarget"));

var _CreateWebTargetOutput = _interopRequireDefault(require("../model/CreateWebTargetOutput"));

var _CreateWindowsTarget = _interopRequireDefault(require("../model/CreateWindowsTarget"));

var _CreateWindowsTargetOutput = _interopRequireDefault(require("../model/CreateWindowsTargetOutput"));

var _CreateZeroSSLTarget = _interopRequireDefault(require("../model/CreateZeroSSLTarget"));

var _CreateZeroSSLTargetOutput = _interopRequireDefault(require("../model/CreateZeroSSLTargetOutput"));

var _DSProducerDetails = _interopRequireDefault(require("../model/DSProducerDetails"));

var _Decrypt = _interopRequireDefault(require("../model/Decrypt"));

var _DecryptGPG = _interopRequireDefault(require("../model/DecryptGPG"));

var _DecryptGPGOutput = _interopRequireDefault(require("../model/DecryptGPGOutput"));

var _DecryptOutput = _interopRequireDefault(require("../model/DecryptOutput"));

var _DecryptPKCS = _interopRequireDefault(require("../model/DecryptPKCS1"));

var _DecryptPKCS1Output = _interopRequireDefault(require("../model/DecryptPKCS1Output"));

var _DecryptWithClassicKey = _interopRequireDefault(require("../model/DecryptWithClassicKey"));

var _DecryptWithClassicKeyOutput = _interopRequireDefault(require("../model/DecryptWithClassicKeyOutput"));

var _DeleteAuthMethod = _interopRequireDefault(require("../model/DeleteAuthMethod"));

var _DeleteAuthMethodOutput = _interopRequireDefault(require("../model/DeleteAuthMethodOutput"));

var _DeleteAuthMethods = _interopRequireDefault(require("../model/DeleteAuthMethods"));

var _DeleteAuthMethodsOutput = _interopRequireDefault(require("../model/DeleteAuthMethodsOutput"));

var _DeleteEventForwarder = _interopRequireDefault(require("../model/DeleteEventForwarder"));

var _DeleteGatewayAllowedAccessId = _interopRequireDefault(require("../model/DeleteGatewayAllowedAccessId"));

var _DeleteGroup = _interopRequireDefault(require("../model/DeleteGroup"));

var _DeleteGroupOutput = _interopRequireDefault(require("../model/DeleteGroupOutput"));

var _DeleteGwCluster = _interopRequireDefault(require("../model/DeleteGwCluster"));

var _DeleteItem = _interopRequireDefault(require("../model/DeleteItem"));

var _DeleteItemOutput = _interopRequireDefault(require("../model/DeleteItemOutput"));

var _DeleteItems = _interopRequireDefault(require("../model/DeleteItems"));

var _DeleteItemsOutput = _interopRequireDefault(require("../model/DeleteItemsOutput"));

var _DeleteRole = _interopRequireDefault(require("../model/DeleteRole"));

var _DeleteRoleAssociation = _interopRequireDefault(require("../model/DeleteRoleAssociation"));

var _DeleteRoleRule = _interopRequireDefault(require("../model/DeleteRoleRule"));

var _DeleteRoleRuleOutput = _interopRequireDefault(require("../model/DeleteRoleRuleOutput"));

var _DeleteRoles = _interopRequireDefault(require("../model/DeleteRoles"));

var _DeleteTarget = _interopRequireDefault(require("../model/DeleteTarget"));

var _DeleteTargetAssociation = _interopRequireDefault(require("../model/DeleteTargetAssociation"));

var _DeleteTargets = _interopRequireDefault(require("../model/DeleteTargets"));

var _DeriveKey = _interopRequireDefault(require("../model/DeriveKey"));

var _DeriveKeyOutput = _interopRequireDefault(require("../model/DeriveKeyOutput"));

var _DescribeAssoc = _interopRequireDefault(require("../model/DescribeAssoc"));

var _DescribeItem = _interopRequireDefault(require("../model/DescribeItem"));

var _DescribePermissions = _interopRequireDefault(require("../model/DescribePermissions"));

var _DescribePermissionsOutput = _interopRequireDefault(require("../model/DescribePermissionsOutput"));

var _DescribeSubClaims = _interopRequireDefault(require("../model/DescribeSubClaims"));

var _DescribeSubClaimsOutput = _interopRequireDefault(require("../model/DescribeSubClaimsOutput"));

var _Detokenize = _interopRequireDefault(require("../model/Detokenize"));

var _DetokenizeOutput = _interopRequireDefault(require("../model/DetokenizeOutput"));

var _Encrypt = _interopRequireDefault(require("../model/Encrypt"));

var _EncryptGPG = _interopRequireDefault(require("../model/EncryptGPG"));

var _EncryptGPGOutput = _interopRequireDefault(require("../model/EncryptGPGOutput"));

var _EncryptOutput = _interopRequireDefault(require("../model/EncryptOutput"));

var _EncryptWithClassicKey = _interopRequireDefault(require("../model/EncryptWithClassicKey"));

var _EsmCreateSecretOutput = _interopRequireDefault(require("../model/EsmCreateSecretOutput"));

var _EsmDelete = _interopRequireDefault(require("../model/EsmDelete"));

var _EsmDeleteSecretOutput = _interopRequireDefault(require("../model/EsmDeleteSecretOutput"));

var _EsmGet = _interopRequireDefault(require("../model/EsmGet"));

var _EsmGetSecretOutput = _interopRequireDefault(require("../model/EsmGetSecretOutput"));

var _EsmList = _interopRequireDefault(require("../model/EsmList"));

var _EsmListSecretsOutput = _interopRequireDefault(require("../model/EsmListSecretsOutput"));

var _EsmUpdate = _interopRequireDefault(require("../model/EsmUpdate"));

var _EsmUpdateSecretOutput = _interopRequireDefault(require("../model/EsmUpdateSecretOutput"));

var _EventAction = _interopRequireDefault(require("../model/EventAction"));

var _ExportClassicKey = _interopRequireDefault(require("../model/ExportClassicKey"));

var _ExportClassicKeyOutput = _interopRequireDefault(require("../model/ExportClassicKeyOutput"));

var _GatewayCreateAllowedAccess = _interopRequireDefault(require("../model/GatewayCreateAllowedAccess"));

var _GatewayCreateK8SAuthConfig = _interopRequireDefault(require("../model/GatewayCreateK8SAuthConfig"));

var _GatewayCreateK8SAuthConfigOutput = _interopRequireDefault(require("../model/GatewayCreateK8SAuthConfigOutput"));

var _GatewayCreateMigration = _interopRequireDefault(require("../model/GatewayCreateMigration"));

var _GatewayCreateProducerArtifactory = _interopRequireDefault(require("../model/GatewayCreateProducerArtifactory"));

var _GatewayCreateProducerArtifactoryOutput = _interopRequireDefault(require("../model/GatewayCreateProducerArtifactoryOutput"));

var _GatewayCreateProducerAws = _interopRequireDefault(require("../model/GatewayCreateProducerAws"));

var _GatewayCreateProducerAwsOutput = _interopRequireDefault(require("../model/GatewayCreateProducerAwsOutput"));

var _GatewayCreateProducerAzure = _interopRequireDefault(require("../model/GatewayCreateProducerAzure"));

var _GatewayCreateProducerAzureOutput = _interopRequireDefault(require("../model/GatewayCreateProducerAzureOutput"));

var _GatewayCreateProducerCassandra = _interopRequireDefault(require("../model/GatewayCreateProducerCassandra"));

var _GatewayCreateProducerCassandraOutput = _interopRequireDefault(require("../model/GatewayCreateProducerCassandraOutput"));

var _GatewayCreateProducerCertificateAutomation = _interopRequireDefault(require("../model/GatewayCreateProducerCertificateAutomation"));

var _GatewayCreateProducerCertificateAutomationOutput = _interopRequireDefault(require("../model/GatewayCreateProducerCertificateAutomationOutput"));

var _GatewayCreateProducerCustom = _interopRequireDefault(require("../model/GatewayCreateProducerCustom"));

var _GatewayCreateProducerCustomOutput = _interopRequireDefault(require("../model/GatewayCreateProducerCustomOutput"));

var _GatewayCreateProducerDockerhub = _interopRequireDefault(require("../model/GatewayCreateProducerDockerhub"));

var _GatewayCreateProducerDockerhubOutput = _interopRequireDefault(require("../model/GatewayCreateProducerDockerhubOutput"));

var _GatewayCreateProducerEks = _interopRequireDefault(require("../model/GatewayCreateProducerEks"));

var _GatewayCreateProducerEksOutput = _interopRequireDefault(require("../model/GatewayCreateProducerEksOutput"));

var _GatewayCreateProducerGcp = _interopRequireDefault(require("../model/GatewayCreateProducerGcp"));

var _GatewayCreateProducerGcpOutput = _interopRequireDefault(require("../model/GatewayCreateProducerGcpOutput"));

var _GatewayCreateProducerGithub = _interopRequireDefault(require("../model/GatewayCreateProducerGithub"));

var _GatewayCreateProducerGithubOutput = _interopRequireDefault(require("../model/GatewayCreateProducerGithubOutput"));

var _GatewayCreateProducerGke = _interopRequireDefault(require("../model/GatewayCreateProducerGke"));

var _GatewayCreateProducerGkeOutput = _interopRequireDefault(require("../model/GatewayCreateProducerGkeOutput"));

var _GatewayCreateProducerHanaDb = _interopRequireDefault(require("../model/GatewayCreateProducerHanaDb"));

var _GatewayCreateProducerHanaDbOutput = _interopRequireDefault(require("../model/GatewayCreateProducerHanaDbOutput"));

var _GatewayCreateProducerLdap = _interopRequireDefault(require("../model/GatewayCreateProducerLdap"));

var _GatewayCreateProducerLdapOutput = _interopRequireDefault(require("../model/GatewayCreateProducerLdapOutput"));

var _GatewayCreateProducerMSSQL = _interopRequireDefault(require("../model/GatewayCreateProducerMSSQL"));

var _GatewayCreateProducerMSSQLOutput = _interopRequireDefault(require("../model/GatewayCreateProducerMSSQLOutput"));

var _GatewayCreateProducerMongo = _interopRequireDefault(require("../model/GatewayCreateProducerMongo"));

var _GatewayCreateProducerMongoOutput = _interopRequireDefault(require("../model/GatewayCreateProducerMongoOutput"));

var _GatewayCreateProducerMySQL = _interopRequireDefault(require("../model/GatewayCreateProducerMySQL"));

var _GatewayCreateProducerMySQLOutput = _interopRequireDefault(require("../model/GatewayCreateProducerMySQLOutput"));

var _GatewayCreateProducerNativeK8S = _interopRequireDefault(require("../model/GatewayCreateProducerNativeK8S"));

var _GatewayCreateProducerNativeK8SOutput = _interopRequireDefault(require("../model/GatewayCreateProducerNativeK8SOutput"));

var _GatewayCreateProducerOracleDb = _interopRequireDefault(require("../model/GatewayCreateProducerOracleDb"));

var _GatewayCreateProducerOracleDbOutput = _interopRequireDefault(require("../model/GatewayCreateProducerOracleDbOutput"));

var _GatewayCreateProducerPing = _interopRequireDefault(require("../model/GatewayCreateProducerPing"));

var _GatewayCreateProducerPingOutput = _interopRequireDefault(require("../model/GatewayCreateProducerPingOutput"));

var _GatewayCreateProducerPostgreSQL = _interopRequireDefault(require("../model/GatewayCreateProducerPostgreSQL"));

var _GatewayCreateProducerPostgreSQLOutput = _interopRequireDefault(require("../model/GatewayCreateProducerPostgreSQLOutput"));

var _GatewayCreateProducerRabbitMQ = _interopRequireDefault(require("../model/GatewayCreateProducerRabbitMQ"));

var _GatewayCreateProducerRabbitMQOutput = _interopRequireDefault(require("../model/GatewayCreateProducerRabbitMQOutput"));

var _GatewayCreateProducerRdp = _interopRequireDefault(require("../model/GatewayCreateProducerRdp"));

var _GatewayCreateProducerRdpOutput = _interopRequireDefault(require("../model/GatewayCreateProducerRdpOutput"));

var _GatewayCreateProducerRedis = _interopRequireDefault(require("../model/GatewayCreateProducerRedis"));

var _GatewayCreateProducerRedisOutput = _interopRequireDefault(require("../model/GatewayCreateProducerRedisOutput"));

var _GatewayCreateProducerRedshift = _interopRequireDefault(require("../model/GatewayCreateProducerRedshift"));

var _GatewayCreateProducerRedshiftOutput = _interopRequireDefault(require("../model/GatewayCreateProducerRedshiftOutput"));

var _GatewayCreateProducerSnowflake = _interopRequireDefault(require("../model/GatewayCreateProducerSnowflake"));

var _GatewayCreateProducerSnowflakeOutput = _interopRequireDefault(require("../model/GatewayCreateProducerSnowflakeOutput"));

var _GatewayDeleteAllowedAccess = _interopRequireDefault(require("../model/GatewayDeleteAllowedAccess"));

var _GatewayDeleteAllowedAccessOutput = _interopRequireDefault(require("../model/GatewayDeleteAllowedAccessOutput"));

var _GatewayDeleteK8SAuthConfig = _interopRequireDefault(require("../model/GatewayDeleteK8SAuthConfig"));

var _GatewayDeleteK8SAuthConfigOutput = _interopRequireDefault(require("../model/GatewayDeleteK8SAuthConfigOutput"));

var _GatewayDeleteMigration = _interopRequireDefault(require("../model/GatewayDeleteMigration"));

var _GatewayDeleteProducer = _interopRequireDefault(require("../model/GatewayDeleteProducer"));

var _GatewayDeleteProducerOutput = _interopRequireDefault(require("../model/GatewayDeleteProducerOutput"));

var _GatewayDownloadCustomerFragments = _interopRequireDefault(require("../model/GatewayDownloadCustomerFragments"));

var _GatewayDownloadCustomerFragmentsOutput = _interopRequireDefault(require("../model/GatewayDownloadCustomerFragmentsOutput"));

var _GatewayGetAllowedAccess = _interopRequireDefault(require("../model/GatewayGetAllowedAccess"));

var _GatewayGetConfig = _interopRequireDefault(require("../model/GatewayGetConfig"));

var _GatewayGetK8SAuthConfig = _interopRequireDefault(require("../model/GatewayGetK8SAuthConfig"));

var _GatewayGetK8SAuthConfigOutput = _interopRequireDefault(require("../model/GatewayGetK8SAuthConfigOutput"));

var _GatewayGetLdapAuthConfig = _interopRequireDefault(require("../model/GatewayGetLdapAuthConfig"));

var _GatewayGetLdapAuthConfigOutput = _interopRequireDefault(require("../model/GatewayGetLdapAuthConfigOutput"));

var _GatewayGetMigration = _interopRequireDefault(require("../model/GatewayGetMigration"));

var _GatewayGetProducer = _interopRequireDefault(require("../model/GatewayGetProducer"));

var _GatewayGetTmpUsers = _interopRequireDefault(require("../model/GatewayGetTmpUsers"));

var _GatewayListMigration = _interopRequireDefault(require("../model/GatewayListMigration"));

var _GatewayListProducers = _interopRequireDefault(require("../model/GatewayListProducers"));

var _GatewayListRotatedSecrets = _interopRequireDefault(require("../model/GatewayListRotatedSecrets"));

var _GatewayMigratePersonalItems = _interopRequireDefault(require("../model/GatewayMigratePersonalItems"));

var _GatewayMigratePersonalItemsOutput = _interopRequireDefault(require("../model/GatewayMigratePersonalItemsOutput"));

var _GatewayMigrationCreateOutput = _interopRequireDefault(require("../model/GatewayMigrationCreateOutput"));

var _GatewayMigrationDeleteOutput = _interopRequireDefault(require("../model/GatewayMigrationDeleteOutput"));

var _GatewayMigrationGetOutput = _interopRequireDefault(require("../model/GatewayMigrationGetOutput"));

var _GatewayMigrationListOutput = _interopRequireDefault(require("../model/GatewayMigrationListOutput"));

var _GatewayMigrationSyncOutput = _interopRequireDefault(require("../model/GatewayMigrationSyncOutput"));

var _GatewayMigrationUpdateOutput = _interopRequireDefault(require("../model/GatewayMigrationUpdateOutput"));

var _GatewayRevokeTmpUsers = _interopRequireDefault(require("../model/GatewayRevokeTmpUsers"));

var _GatewayStartProducer = _interopRequireDefault(require("../model/GatewayStartProducer"));

var _GatewayStartProducerOutput = _interopRequireDefault(require("../model/GatewayStartProducerOutput"));

var _GatewayStatusMigration = _interopRequireDefault(require("../model/GatewayStatusMigration"));

var _GatewayStopProducer = _interopRequireDefault(require("../model/GatewayStopProducer"));

var _GatewayStopProducerOutput = _interopRequireDefault(require("../model/GatewayStopProducerOutput"));

var _GatewaySyncMigration = _interopRequireDefault(require("../model/GatewaySyncMigration"));

var _GatewayUpdateAllowedAccess = _interopRequireDefault(require("../model/GatewayUpdateAllowedAccess"));

var _GatewayUpdateItem = _interopRequireDefault(require("../model/GatewayUpdateItem"));

var _GatewayUpdateItemOutput = _interopRequireDefault(require("../model/GatewayUpdateItemOutput"));

var _GatewayUpdateK8SAuthConfig = _interopRequireDefault(require("../model/GatewayUpdateK8SAuthConfig"));

var _GatewayUpdateK8SAuthConfigOutput = _interopRequireDefault(require("../model/GatewayUpdateK8SAuthConfigOutput"));

var _GatewayUpdateLdapAuthConfig = _interopRequireDefault(require("../model/GatewayUpdateLdapAuthConfig"));

var _GatewayUpdateLdapAuthConfigOutput = _interopRequireDefault(require("../model/GatewayUpdateLdapAuthConfigOutput"));

var _GatewayUpdateMigration = _interopRequireDefault(require("../model/GatewayUpdateMigration"));

var _GatewayUpdateProducerArtifactory = _interopRequireDefault(require("../model/GatewayUpdateProducerArtifactory"));

var _GatewayUpdateProducerArtifactoryOutput = _interopRequireDefault(require("../model/GatewayUpdateProducerArtifactoryOutput"));

var _GatewayUpdateProducerAws = _interopRequireDefault(require("../model/GatewayUpdateProducerAws"));

var _GatewayUpdateProducerAwsOutput = _interopRequireDefault(require("../model/GatewayUpdateProducerAwsOutput"));

var _GatewayUpdateProducerAzure = _interopRequireDefault(require("../model/GatewayUpdateProducerAzure"));

var _GatewayUpdateProducerAzureOutput = _interopRequireDefault(require("../model/GatewayUpdateProducerAzureOutput"));

var _GatewayUpdateProducerCassandra = _interopRequireDefault(require("../model/GatewayUpdateProducerCassandra"));

var _GatewayUpdateProducerCassandraOutput = _interopRequireDefault(require("../model/GatewayUpdateProducerCassandraOutput"));

var _GatewayUpdateProducerCertificateAutomation = _interopRequireDefault(require("../model/GatewayUpdateProducerCertificateAutomation"));

var _GatewayUpdateProducerCertificateAutomationOutput = _interopRequireDefault(require("../model/GatewayUpdateProducerCertificateAutomationOutput"));

var _GatewayUpdateProducerCustom = _interopRequireDefault(require("../model/GatewayUpdateProducerCustom"));

var _GatewayUpdateProducerCustomOutput = _interopRequireDefault(require("../model/GatewayUpdateProducerCustomOutput"));

var _GatewayUpdateProducerDockerhub = _interopRequireDefault(require("../model/GatewayUpdateProducerDockerhub"));

var _GatewayUpdateProducerDockerhubOutput = _interopRequireDefault(require("../model/GatewayUpdateProducerDockerhubOutput"));

var _GatewayUpdateProducerEks = _interopRequireDefault(require("../model/GatewayUpdateProducerEks"));

var _GatewayUpdateProducerEksOutput = _interopRequireDefault(require("../model/GatewayUpdateProducerEksOutput"));

var _GatewayUpdateProducerGcp = _interopRequireDefault(require("../model/GatewayUpdateProducerGcp"));

var _GatewayUpdateProducerGcpOutput = _interopRequireDefault(require("../model/GatewayUpdateProducerGcpOutput"));

var _GatewayUpdateProducerGithub = _interopRequireDefault(require("../model/GatewayUpdateProducerGithub"));

var _GatewayUpdateProducerGithubOutput = _interopRequireDefault(require("../model/GatewayUpdateProducerGithubOutput"));

var _GatewayUpdateProducerGke = _interopRequireDefault(require("../model/GatewayUpdateProducerGke"));

var _GatewayUpdateProducerGkeOutput = _interopRequireDefault(require("../model/GatewayUpdateProducerGkeOutput"));

var _GatewayUpdateProducerHanaDb = _interopRequireDefault(require("../model/GatewayUpdateProducerHanaDb"));

var _GatewayUpdateProducerHanaDbOutput = _interopRequireDefault(require("../model/GatewayUpdateProducerHanaDbOutput"));

var _GatewayUpdateProducerLdap = _interopRequireDefault(require("../model/GatewayUpdateProducerLdap"));

var _GatewayUpdateProducerLdapOutput = _interopRequireDefault(require("../model/GatewayUpdateProducerLdapOutput"));

var _GatewayUpdateProducerMSSQL = _interopRequireDefault(require("../model/GatewayUpdateProducerMSSQL"));

var _GatewayUpdateProducerMSSQLOutput = _interopRequireDefault(require("../model/GatewayUpdateProducerMSSQLOutput"));

var _GatewayUpdateProducerMongo = _interopRequireDefault(require("../model/GatewayUpdateProducerMongo"));

var _GatewayUpdateProducerMongoOutput = _interopRequireDefault(require("../model/GatewayUpdateProducerMongoOutput"));

var _GatewayUpdateProducerMySQL = _interopRequireDefault(require("../model/GatewayUpdateProducerMySQL"));

var _GatewayUpdateProducerMySQLOutput = _interopRequireDefault(require("../model/GatewayUpdateProducerMySQLOutput"));

var _GatewayUpdateProducerNativeK8S = _interopRequireDefault(require("../model/GatewayUpdateProducerNativeK8S"));

var _GatewayUpdateProducerNativeK8SOutput = _interopRequireDefault(require("../model/GatewayUpdateProducerNativeK8SOutput"));

var _GatewayUpdateProducerOracleDb = _interopRequireDefault(require("../model/GatewayUpdateProducerOracleDb"));

var _GatewayUpdateProducerOracleDbOutput = _interopRequireDefault(require("../model/GatewayUpdateProducerOracleDbOutput"));

var _GatewayUpdateProducerPing = _interopRequireDefault(require("../model/GatewayUpdateProducerPing"));

var _GatewayUpdateProducerPingOutput = _interopRequireDefault(require("../model/GatewayUpdateProducerPingOutput"));

var _GatewayUpdateProducerPostgreSQL = _interopRequireDefault(require("../model/GatewayUpdateProducerPostgreSQL"));

var _GatewayUpdateProducerPostgreSQLOutput = _interopRequireDefault(require("../model/GatewayUpdateProducerPostgreSQLOutput"));

var _GatewayUpdateProducerRabbitMQ = _interopRequireDefault(require("../model/GatewayUpdateProducerRabbitMQ"));

var _GatewayUpdateProducerRabbitMQOutput = _interopRequireDefault(require("../model/GatewayUpdateProducerRabbitMQOutput"));

var _GatewayUpdateProducerRdp = _interopRequireDefault(require("../model/GatewayUpdateProducerRdp"));

var _GatewayUpdateProducerRdpOutput = _interopRequireDefault(require("../model/GatewayUpdateProducerRdpOutput"));

var _GatewayUpdateProducerRedis = _interopRequireDefault(require("../model/GatewayUpdateProducerRedis"));

var _GatewayUpdateProducerRedisOutput = _interopRequireDefault(require("../model/GatewayUpdateProducerRedisOutput"));

var _GatewayUpdateProducerRedshift = _interopRequireDefault(require("../model/GatewayUpdateProducerRedshift"));

var _GatewayUpdateProducerRedshiftOutput = _interopRequireDefault(require("../model/GatewayUpdateProducerRedshiftOutput"));

var _GatewayUpdateProducerSnowflake = _interopRequireDefault(require("../model/GatewayUpdateProducerSnowflake"));

var _GatewayUpdateProducerSnowflakeOutput = _interopRequireDefault(require("../model/GatewayUpdateProducerSnowflakeOutput"));

var _GatewayUpdateTlsCert = _interopRequireDefault(require("../model/GatewayUpdateTlsCert"));

var _GatewayUpdateTlsCertOutput = _interopRequireDefault(require("../model/GatewayUpdateTlsCertOutput"));

var _GatewayUpdateTmpUsers = _interopRequireDefault(require("../model/GatewayUpdateTmpUsers"));

var _GatewaysListResponse = _interopRequireDefault(require("../model/GatewaysListResponse"));

var _GenerateCsr = _interopRequireDefault(require("../model/GenerateCsr"));

var _GenerateCsrOutput = _interopRequireDefault(require("../model/GenerateCsrOutput"));

var _GetAccountSettings = _interopRequireDefault(require("../model/GetAccountSettings"));

var _GetAccountSettingsCommandOutput = _interopRequireDefault(require("../model/GetAccountSettingsCommandOutput"));

var _GetAuthMethod = _interopRequireDefault(require("../model/GetAuthMethod"));

var _GetCertificateValue = _interopRequireDefault(require("../model/GetCertificateValue"));

var _GetCertificateValueOutput = _interopRequireDefault(require("../model/GetCertificateValueOutput"));

var _GetDynamicSecretValue = _interopRequireDefault(require("../model/GetDynamicSecretValue"));

var _GetEventForwarder = _interopRequireDefault(require("../model/GetEventForwarder"));

var _GetEventForwarderOutput = _interopRequireDefault(require("../model/GetEventForwarderOutput"));

var _GetGroup = _interopRequireDefault(require("../model/GetGroup"));

var _GetGroupOutput = _interopRequireDefault(require("../model/GetGroupOutput"));

var _GetKubeExecCreds = _interopRequireDefault(require("../model/GetKubeExecCreds"));

var _GetKubeExecCredsOutput = _interopRequireDefault(require("../model/GetKubeExecCredsOutput"));

var _GetLastUserEventStatus = _interopRequireDefault(require("../model/GetLastUserEventStatus"));

var _GetPKICertificate = _interopRequireDefault(require("../model/GetPKICertificate"));

var _GetPKICertificateOutput = _interopRequireDefault(require("../model/GetPKICertificateOutput"));

var _GetProducersListReplyObj = _interopRequireDefault(require("../model/GetProducersListReplyObj"));

var _GetRSAPublic = _interopRequireDefault(require("../model/GetRSAPublic"));

var _GetRSAPublicOutput = _interopRequireDefault(require("../model/GetRSAPublicOutput"));

var _GetRole = _interopRequireDefault(require("../model/GetRole"));

var _GetRotatedSecretValue = _interopRequireDefault(require("../model/GetRotatedSecretValue"));

var _GetSSHCertificate = _interopRequireDefault(require("../model/GetSSHCertificate"));

var _GetSSHCertificateOutput = _interopRequireDefault(require("../model/GetSSHCertificateOutput"));

var _GetSecretValue = _interopRequireDefault(require("../model/GetSecretValue"));

var _GetTags = _interopRequireDefault(require("../model/GetTags"));

var _GetTarget = _interopRequireDefault(require("../model/GetTarget"));

var _GetTargetDetails = _interopRequireDefault(require("../model/GetTargetDetails"));

var _GetTargetDetailsOutput = _interopRequireDefault(require("../model/GetTargetDetailsOutput"));

var _GetUserEventStatusOutput = _interopRequireDefault(require("../model/GetUserEventStatusOutput"));

var _Hmac = _interopRequireDefault(require("../model/Hmac"));

var _HmacOutput = _interopRequireDefault(require("../model/HmacOutput"));

var _ImportPasswords = _interopRequireDefault(require("../model/ImportPasswords"));

var _ImportPasswordsOutput = _interopRequireDefault(require("../model/ImportPasswordsOutput"));

var _Item = _interopRequireDefault(require("../model/Item"));

var _JSONError = _interopRequireDefault(require("../model/JSONError"));

var _KMIPClientGetResponse = _interopRequireDefault(require("../model/KMIPClientGetResponse"));

var _KMIPClientListResponse = _interopRequireDefault(require("../model/KMIPClientListResponse"));

var _KMIPClientUpdateResponse = _interopRequireDefault(require("../model/KMIPClientUpdateResponse"));

var _KMIPEnvironmentCreateResponse = _interopRequireDefault(require("../model/KMIPEnvironmentCreateResponse"));

var _KmipClientDeleteRule = _interopRequireDefault(require("../model/KmipClientDeleteRule"));

var _KmipClientSetRule = _interopRequireDefault(require("../model/KmipClientSetRule"));

var _KmipCreateClient = _interopRequireDefault(require("../model/KmipCreateClient"));

var _KmipCreateClientOutput = _interopRequireDefault(require("../model/KmipCreateClientOutput"));

var _KmipDeleteClient = _interopRequireDefault(require("../model/KmipDeleteClient"));

var _KmipDeleteServer = _interopRequireDefault(require("../model/KmipDeleteServer"));

var _KmipDescribeClient = _interopRequireDefault(require("../model/KmipDescribeClient"));

var _KmipDescribeServer = _interopRequireDefault(require("../model/KmipDescribeServer"));

var _KmipDescribeServerOutput = _interopRequireDefault(require("../model/KmipDescribeServerOutput"));

var _KmipListClients = _interopRequireDefault(require("../model/KmipListClients"));

var _KmipMoveServer = _interopRequireDefault(require("../model/KmipMoveServer"));

var _KmipMoveServerOutput = _interopRequireDefault(require("../model/KmipMoveServerOutput"));

var _KmipRenewClientCertificate = _interopRequireDefault(require("../model/KmipRenewClientCertificate"));

var _KmipRenewClientCertificateOutput = _interopRequireDefault(require("../model/KmipRenewClientCertificateOutput"));

var _KmipRenewServerCertificate = _interopRequireDefault(require("../model/KmipRenewServerCertificate"));

var _KmipRenewServerCertificateOutput = _interopRequireDefault(require("../model/KmipRenewServerCertificateOutput"));

var _KmipServerSetup = _interopRequireDefault(require("../model/KmipServerSetup"));

var _KmipSetServerState = _interopRequireDefault(require("../model/KmipSetServerState"));

var _KmipSetServerStateOutput = _interopRequireDefault(require("../model/KmipSetServerStateOutput"));

var _ListAuthMethods = _interopRequireDefault(require("../model/ListAuthMethods"));

var _ListAuthMethodsOutput = _interopRequireDefault(require("../model/ListAuthMethodsOutput"));

var _ListGateways = _interopRequireDefault(require("../model/ListGateways"));

var _ListGroups = _interopRequireDefault(require("../model/ListGroups"));

var _ListGroupsOutput = _interopRequireDefault(require("../model/ListGroupsOutput"));

var _ListItems = _interopRequireDefault(require("../model/ListItems"));

var _ListItemsInPathOutput = _interopRequireDefault(require("../model/ListItemsInPathOutput"));

var _ListItemsOutput = _interopRequireDefault(require("../model/ListItemsOutput"));

var _ListRoles = _interopRequireDefault(require("../model/ListRoles"));

var _ListRolesOutput = _interopRequireDefault(require("../model/ListRolesOutput"));

var _ListSRABastions = _interopRequireDefault(require("../model/ListSRABastions"));

var _ListSharedItems = _interopRequireDefault(require("../model/ListSharedItems"));

var _ListTargets = _interopRequireDefault(require("../model/ListTargets"));

var _ListTargetsOutput = _interopRequireDefault(require("../model/ListTargetsOutput"));

var _MigrationStatusReplyObj = _interopRequireDefault(require("../model/MigrationStatusReplyObj"));

var _MoveObjects = _interopRequireDefault(require("../model/MoveObjects"));

var _RawCreds = _interopRequireDefault(require("../model/RawCreds"));

var _RefreshKey = _interopRequireDefault(require("../model/RefreshKey"));

var _RefreshKeyOutput = _interopRequireDefault(require("../model/RefreshKeyOutput"));

var _RequestAccess = _interopRequireDefault(require("../model/RequestAccess"));

var _RequestAccessOutput = _interopRequireDefault(require("../model/RequestAccessOutput"));

var _ReverseRBAC = _interopRequireDefault(require("../model/ReverseRBAC"));

var _ReverseRBACOutput = _interopRequireDefault(require("../model/ReverseRBACOutput"));

var _Role = _interopRequireDefault(require("../model/Role"));

var _RoleAssociationDetails = _interopRequireDefault(require("../model/RoleAssociationDetails"));

var _RollbackSecret = _interopRequireDefault(require("../model/RollbackSecret"));

var _RollbackSecretOutput = _interopRequireDefault(require("../model/RollbackSecretOutput"));

var _RotateKeyOutput = _interopRequireDefault(require("../model/RotateKeyOutput"));

var _RotateOidcClientOutput = _interopRequireDefault(require("../model/RotateOidcClientOutput"));

var _RotateOidcClientSecret = _interopRequireDefault(require("../model/RotateOidcClientSecret"));

var _RotateSecret = _interopRequireDefault(require("../model/RotateSecret"));

var _RotatedSecretOutput = _interopRequireDefault(require("../model/RotatedSecretOutput"));

var _SetItemState = _interopRequireDefault(require("../model/SetItemState"));

var _SetRoleRule = _interopRequireDefault(require("../model/SetRoleRule"));

var _ShareItem = _interopRequireDefault(require("../model/ShareItem"));

var _SignDataWithClassicKey = _interopRequireDefault(require("../model/SignDataWithClassicKey"));

var _SignEcDsa = _interopRequireDefault(require("../model/SignEcDsa"));

var _SignEcDsaOutput = _interopRequireDefault(require("../model/SignEcDsaOutput"));

var _SignGPG = _interopRequireDefault(require("../model/SignGPG"));

var _SignGPGOutput = _interopRequireDefault(require("../model/SignGPGOutput"));

var _SignJWTOutput = _interopRequireDefault(require("../model/SignJWTOutput"));

var _SignJWTWithClassicKey = _interopRequireDefault(require("../model/SignJWTWithClassicKey"));

var _SignOutput = _interopRequireDefault(require("../model/SignOutput"));

var _SignPKCS = _interopRequireDefault(require("../model/SignPKCS1"));

var _SignPKCS1Output = _interopRequireDefault(require("../model/SignPKCS1Output"));

var _SignPKICertOutput = _interopRequireDefault(require("../model/SignPKICertOutput"));

var _SignPKICertWithClassicKey = _interopRequireDefault(require("../model/SignPKICertWithClassicKey"));

var _SignRsaSsaPss = _interopRequireDefault(require("../model/SignRsaSsaPss"));

var _SignRsaSsaPssOutput = _interopRequireDefault(require("../model/SignRsaSsaPssOutput"));

var _StaticCredsAuth = _interopRequireDefault(require("../model/StaticCredsAuth"));

var _StaticCredsAuthOutput = _interopRequireDefault(require("../model/StaticCredsAuthOutput"));

var _SystemAccessCredentialsReplyObj = _interopRequireDefault(require("../model/SystemAccessCredentialsReplyObj"));

var _Target = _interopRequireDefault(require("../model/Target"));

var _TmpUserData = _interopRequireDefault(require("../model/TmpUserData"));

var _Tokenize = _interopRequireDefault(require("../model/Tokenize"));

var _TokenizeOutput = _interopRequireDefault(require("../model/TokenizeOutput"));

var _UidCreateChildToken = _interopRequireDefault(require("../model/UidCreateChildToken"));

var _UidCreateChildTokenOutput = _interopRequireDefault(require("../model/UidCreateChildTokenOutput"));

var _UidGenerateToken = _interopRequireDefault(require("../model/UidGenerateToken"));

var _UidGenerateTokenOutput = _interopRequireDefault(require("../model/UidGenerateTokenOutput"));

var _UidListChildren = _interopRequireDefault(require("../model/UidListChildren"));

var _UidRevokeToken = _interopRequireDefault(require("../model/UidRevokeToken"));

var _UidRotateToken = _interopRequireDefault(require("../model/UidRotateToken"));

var _UidRotateTokenOutput = _interopRequireDefault(require("../model/UidRotateTokenOutput"));

var _UniversalIdentityDetails = _interopRequireDefault(require("../model/UniversalIdentityDetails"));

var _UpdateAWSTarget = _interopRequireDefault(require("../model/UpdateAWSTarget"));

var _UpdateAWSTargetDetails = _interopRequireDefault(require("../model/UpdateAWSTargetDetails"));

var _UpdateAccountSettings = _interopRequireDefault(require("../model/UpdateAccountSettings"));

var _UpdateAccountSettingsOutput = _interopRequireDefault(require("../model/UpdateAccountSettingsOutput"));

var _UpdateArtifactoryTarget = _interopRequireDefault(require("../model/UpdateArtifactoryTarget"));

var _UpdateArtifactoryTargetOutput = _interopRequireDefault(require("../model/UpdateArtifactoryTargetOutput"));

var _UpdateAssoc = _interopRequireDefault(require("../model/UpdateAssoc"));

var _UpdateAuthMethod = _interopRequireDefault(require("../model/UpdateAuthMethod"));

var _UpdateAuthMethodAWSIAM = _interopRequireDefault(require("../model/UpdateAuthMethodAWSIAM"));

var _UpdateAuthMethodAzureAD = _interopRequireDefault(require("../model/UpdateAuthMethodAzureAD"));

var _UpdateAuthMethodCert = _interopRequireDefault(require("../model/UpdateAuthMethodCert"));

var _UpdateAuthMethodCertOutput = _interopRequireDefault(require("../model/UpdateAuthMethodCertOutput"));

var _UpdateAuthMethodGCP = _interopRequireDefault(require("../model/UpdateAuthMethodGCP"));

var _UpdateAuthMethodK8S = _interopRequireDefault(require("../model/UpdateAuthMethodK8S"));

var _UpdateAuthMethodK8SOutput = _interopRequireDefault(require("../model/UpdateAuthMethodK8SOutput"));

var _UpdateAuthMethodLDAP = _interopRequireDefault(require("../model/UpdateAuthMethodLDAP"));

var _UpdateAuthMethodLDAPOutput = _interopRequireDefault(require("../model/UpdateAuthMethodLDAPOutput"));

var _UpdateAuthMethodOAuth = _interopRequireDefault(require("../model/UpdateAuthMethodOAuth2"));

var _UpdateAuthMethodOIDC = _interopRequireDefault(require("../model/UpdateAuthMethodOIDC"));

var _UpdateAuthMethodOutput = _interopRequireDefault(require("../model/UpdateAuthMethodOutput"));

var _UpdateAuthMethodSAML = _interopRequireDefault(require("../model/UpdateAuthMethodSAML"));

var _UpdateAuthMethodUniversalIdentity = _interopRequireDefault(require("../model/UpdateAuthMethodUniversalIdentity"));

var _UpdateAzureTarget = _interopRequireDefault(require("../model/UpdateAzureTarget"));

var _UpdateAzureTargetOutput = _interopRequireDefault(require("../model/UpdateAzureTargetOutput"));

var _UpdateCertificateOutput = _interopRequireDefault(require("../model/UpdateCertificateOutput"));

var _UpdateCertificateValue = _interopRequireDefault(require("../model/UpdateCertificateValue"));

var _UpdateDBTarget = _interopRequireDefault(require("../model/UpdateDBTarget"));

var _UpdateDBTargetDetails = _interopRequireDefault(require("../model/UpdateDBTargetDetails"));

var _UpdateDBTargetOutput = _interopRequireDefault(require("../model/UpdateDBTargetOutput"));

var _UpdateDockerhubTarget = _interopRequireDefault(require("../model/UpdateDockerhubTarget"));

var _UpdateDockerhubTargetOutput = _interopRequireDefault(require("../model/UpdateDockerhubTargetOutput"));

var _UpdateEKSTarget = _interopRequireDefault(require("../model/UpdateEKSTarget"));

var _UpdateEKSTargetOutput = _interopRequireDefault(require("../model/UpdateEKSTargetOutput"));

var _UpdateEventForwarder = _interopRequireDefault(require("../model/UpdateEventForwarder"));

var _UpdateGKETarget = _interopRequireDefault(require("../model/UpdateGKETarget"));

var _UpdateGKETargetOutput = _interopRequireDefault(require("../model/UpdateGKETargetOutput"));

var _UpdateGcpTarget = _interopRequireDefault(require("../model/UpdateGcpTarget"));

var _UpdateGcpTargetOutput = _interopRequireDefault(require("../model/UpdateGcpTargetOutput"));

var _UpdateGithubTarget = _interopRequireDefault(require("../model/UpdateGithubTarget"));

var _UpdateGithubTargetOutput = _interopRequireDefault(require("../model/UpdateGithubTargetOutput"));

var _UpdateGlobalSignAtlasTarget = _interopRequireDefault(require("../model/UpdateGlobalSignAtlasTarget"));

var _UpdateGlobalSignAtlasTargetOutput = _interopRequireDefault(require("../model/UpdateGlobalSignAtlasTargetOutput"));

var _UpdateGlobalSignTarget = _interopRequireDefault(require("../model/UpdateGlobalSignTarget"));

var _UpdateGlobalSignTargetOutput = _interopRequireDefault(require("../model/UpdateGlobalSignTargetOutput"));

var _UpdateGroup = _interopRequireDefault(require("../model/UpdateGroup"));

var _UpdateGroupOutput = _interopRequireDefault(require("../model/UpdateGroupOutput"));

var _UpdateItem = _interopRequireDefault(require("../model/UpdateItem"));

var _UpdateItemOutput = _interopRequireDefault(require("../model/UpdateItemOutput"));

var _UpdateLdapTarget = _interopRequireDefault(require("../model/UpdateLdapTarget"));

var _UpdateLdapTargetDetails = _interopRequireDefault(require("../model/UpdateLdapTargetDetails"));

var _UpdateLdapTargetOutput = _interopRequireDefault(require("../model/UpdateLdapTargetOutput"));

var _UpdateLinkedTarget = _interopRequireDefault(require("../model/UpdateLinkedTarget"));

var _UpdateNativeK8STarget = _interopRequireDefault(require("../model/UpdateNativeK8STarget"));

var _UpdateNativeK8STargetOutput = _interopRequireDefault(require("../model/UpdateNativeK8STargetOutput"));

var _UpdateOidcApp = _interopRequireDefault(require("../model/UpdateOidcApp"));

var _UpdatePKICertIssuer = _interopRequireDefault(require("../model/UpdatePKICertIssuer"));

var _UpdatePKICertIssuerOutput = _interopRequireDefault(require("../model/UpdatePKICertIssuerOutput"));

var _UpdatePingTarget = _interopRequireDefault(require("../model/UpdatePingTarget"));

var _UpdateRDPTargetDetails = _interopRequireDefault(require("../model/UpdateRDPTargetDetails"));

var _UpdateRabbitMQTarget = _interopRequireDefault(require("../model/UpdateRabbitMQTarget"));

var _UpdateRabbitMQTargetDetails = _interopRequireDefault(require("../model/UpdateRabbitMQTargetDetails"));

var _UpdateRabbitMQTargetOutput = _interopRequireDefault(require("../model/UpdateRabbitMQTargetOutput"));

var _UpdateRole = _interopRequireDefault(require("../model/UpdateRole"));

var _UpdateRoleOutput = _interopRequireDefault(require("../model/UpdateRoleOutput"));

var _UpdateRotatedSecret = _interopRequireDefault(require("../model/UpdateRotatedSecret"));

var _UpdateRotatedSecretOutput = _interopRequireDefault(require("../model/UpdateRotatedSecretOutput"));

var _UpdateRotationSettings = _interopRequireDefault(require("../model/UpdateRotationSettings"));

var _UpdateSSHCertIssuer = _interopRequireDefault(require("../model/UpdateSSHCertIssuer"));

var _UpdateSSHCertIssuerOutput = _interopRequireDefault(require("../model/UpdateSSHCertIssuerOutput"));

var _UpdateSSHTarget = _interopRequireDefault(require("../model/UpdateSSHTarget"));

var _UpdateSSHTargetDetails = _interopRequireDefault(require("../model/UpdateSSHTargetDetails"));

var _UpdateSSHTargetOutput = _interopRequireDefault(require("../model/UpdateSSHTargetOutput"));

var _UpdateSalesforceTarget = _interopRequireDefault(require("../model/UpdateSalesforceTarget"));

var _UpdateSalesforceTargetOutput = _interopRequireDefault(require("../model/UpdateSalesforceTargetOutput"));

var _UpdateSecretVal = _interopRequireDefault(require("../model/UpdateSecretVal"));

var _UpdateSecretValOutput = _interopRequireDefault(require("../model/UpdateSecretValOutput"));

var _UpdateTarget = _interopRequireDefault(require("../model/UpdateTarget"));

var _UpdateTargetDetails = _interopRequireDefault(require("../model/UpdateTargetDetails"));

var _UpdateTargetOutput = _interopRequireDefault(require("../model/UpdateTargetOutput"));

var _UpdateWebTarget = _interopRequireDefault(require("../model/UpdateWebTarget"));

var _UpdateWebTargetDetails = _interopRequireDefault(require("../model/UpdateWebTargetDetails"));

var _UpdateWebTargetOutput = _interopRequireDefault(require("../model/UpdateWebTargetOutput"));

var _UpdateWindowsTarget = _interopRequireDefault(require("../model/UpdateWindowsTarget"));

var _UpdateZeroSSLTarget = _interopRequireDefault(require("../model/UpdateZeroSSLTarget"));

var _UpdateZeroSSLTargetOutput = _interopRequireDefault(require("../model/UpdateZeroSSLTargetOutput"));

var _UploadRSA = _interopRequireDefault(require("../model/UploadRSA"));

var _ValidateToken = _interopRequireDefault(require("../model/ValidateToken"));

var _ValidateTokenOutput = _interopRequireDefault(require("../model/ValidateTokenOutput"));

var _VerifyDataWithClassicKey = _interopRequireDefault(require("../model/VerifyDataWithClassicKey"));

var _VerifyEcDsa = _interopRequireDefault(require("../model/VerifyEcDsa"));

var _VerifyGPG = _interopRequireDefault(require("../model/VerifyGPG"));

var _VerifyJWTOutput = _interopRequireDefault(require("../model/VerifyJWTOutput"));

var _VerifyJWTWithClassicKey = _interopRequireDefault(require("../model/VerifyJWTWithClassicKey"));

var _VerifyPKCS = _interopRequireDefault(require("../model/VerifyPKCS1"));

var _VerifyPKICertOutput = _interopRequireDefault(require("../model/VerifyPKICertOutput"));

var _VerifyPKICertWithClassicKey = _interopRequireDefault(require("../model/VerifyPKICertWithClassicKey"));

var _VerifyRsaSsaPss = _interopRequireDefault(require("../model/VerifyRsaSsaPss"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
* V2 service.
* @module api/V2Api
* @version 3.4.0
*/
var V2Api = /*#__PURE__*/function () {
  /**
  * Constructs a new V2Api. 
  * @alias module:api/V2Api
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function V2Api(apiClient) {
    _classCallCheck(this, V2Api);

    this.apiClient = apiClient || _ApiClient["default"].instance;
  }
  /**
   * @param {module:model/AssocRoleAuthMethod} body 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateRoleAuthMethodAssocOutput} and HTTP response
   */


  _createClass(V2Api, [{
    key: "assocRoleAuthMethodWithHttpInfo",
    value: function assocRoleAuthMethodWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling assocRoleAuthMethod");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _CreateRoleAuthMethodAssocOutput["default"];
      return this.apiClient.callApi('/assoc-role-am', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/AssocRoleAuthMethod} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateRoleAuthMethodAssocOutput}
     */

  }, {
    key: "assocRoleAuthMethod",
    value: function assocRoleAuthMethod(body) {
      return this.assocRoleAuthMethodWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/AssocTargetItem} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateTargetItemAssocOutput} and HTTP response
     */

  }, {
    key: "assocTargetItemWithHttpInfo",
    value: function assocTargetItemWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling assocTargetItem");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _CreateTargetItemAssocOutput["default"];
      return this.apiClient.callApi('/assoc-target-item', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/AssocTargetItem} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateTargetItemAssocOutput}
     */

  }, {
    key: "assocTargetItem",
    value: function assocTargetItem(body) {
      return this.assocTargetItemWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/Auth} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AuthOutput} and HTTP response
     */

  }, {
    key: "authWithHttpInfo",
    value: function authWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling auth");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _AuthOutput["default"];
      return this.apiClient.callApi('/auth', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/Auth} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AuthOutput}
     */

  }, {
    key: "auth",
    value: function auth(body) {
      return this.authWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/Configure} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ConfigureOutput} and HTTP response
     */

  }, {
    key: "configureWithHttpInfo",
    value: function configureWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling configure");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _ConfigureOutput["default"];
      return this.apiClient.callApi('/configure', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/Configure} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ConfigureOutput}
     */

  }, {
    key: "configure",
    value: function configure(body) {
      return this.configureWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/Connect} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */

  }, {
    key: "connectWithHttpInfo",
    value: function connectWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling connect");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/connect', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/Connect} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */

  }, {
    key: "connect",
    value: function connect(body) {
      return this.connectWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/CreateAWSTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateAWSTargetOutput} and HTTP response
     */

  }, {
    key: "createAWSTargetWithHttpInfo",
    value: function createAWSTargetWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createAWSTarget");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _CreateAWSTargetOutput["default"];
      return this.apiClient.callApi('/create-aws-target', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/CreateAWSTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateAWSTargetOutput}
     */

  }, {
    key: "createAWSTarget",
    value: function createAWSTarget(body) {
      return this.createAWSTargetWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/CreateArtifactoryTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateArtifactoryTargetOutput} and HTTP response
     */

  }, {
    key: "createArtifactoryTargetWithHttpInfo",
    value: function createArtifactoryTargetWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createArtifactoryTarget");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _CreateArtifactoryTargetOutput["default"];
      return this.apiClient.callApi('/create-artifactory-target', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/CreateArtifactoryTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateArtifactoryTargetOutput}
     */

  }, {
    key: "createArtifactoryTarget",
    value: function createArtifactoryTarget(body) {
      return this.createArtifactoryTargetWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/CreateAuthMethod} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateAuthMethodOutput} and HTTP response
     */

  }, {
    key: "createAuthMethodWithHttpInfo",
    value: function createAuthMethodWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createAuthMethod");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _CreateAuthMethodOutput["default"];
      return this.apiClient.callApi('/create-auth-method', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/CreateAuthMethod} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateAuthMethodOutput}
     */

  }, {
    key: "createAuthMethod",
    value: function createAuthMethod(body) {
      return this.createAuthMethodWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/CreateAuthMethodAWSIAM} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateAuthMethodAWSIAMOutput} and HTTP response
     */

  }, {
    key: "createAuthMethodAWSIAMWithHttpInfo",
    value: function createAuthMethodAWSIAMWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createAuthMethodAWSIAM");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _CreateAuthMethodAWSIAMOutput["default"];
      return this.apiClient.callApi('/create-auth-method-aws-iam', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/CreateAuthMethodAWSIAM} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateAuthMethodAWSIAMOutput}
     */

  }, {
    key: "createAuthMethodAWSIAM",
    value: function createAuthMethodAWSIAM(body) {
      return this.createAuthMethodAWSIAMWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/CreateAuthMethodAzureAD} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateAuthMethodAzureADOutput} and HTTP response
     */

  }, {
    key: "createAuthMethodAzureADWithHttpInfo",
    value: function createAuthMethodAzureADWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createAuthMethodAzureAD");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _CreateAuthMethodAzureADOutput["default"];
      return this.apiClient.callApi('/create-auth-method-azure-ad', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/CreateAuthMethodAzureAD} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateAuthMethodAzureADOutput}
     */

  }, {
    key: "createAuthMethodAzureAD",
    value: function createAuthMethodAzureAD(body) {
      return this.createAuthMethodAzureADWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/CreateAuthMethodCert} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateAuthMethodCertOutput} and HTTP response
     */

  }, {
    key: "createAuthMethodCertWithHttpInfo",
    value: function createAuthMethodCertWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createAuthMethodCert");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _CreateAuthMethodCertOutput["default"];
      return this.apiClient.callApi('/create-auth-method-cert', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/CreateAuthMethodCert} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateAuthMethodCertOutput}
     */

  }, {
    key: "createAuthMethodCert",
    value: function createAuthMethodCert(body) {
      return this.createAuthMethodCertWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/CreateAuthMethodEmail} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateAuthMethodEmailOutput} and HTTP response
     */

  }, {
    key: "createAuthMethodEmailWithHttpInfo",
    value: function createAuthMethodEmailWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createAuthMethodEmail");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _CreateAuthMethodEmailOutput["default"];
      return this.apiClient.callApi('/create-auth-method-email', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/CreateAuthMethodEmail} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateAuthMethodEmailOutput}
     */

  }, {
    key: "createAuthMethodEmail",
    value: function createAuthMethodEmail(body) {
      return this.createAuthMethodEmailWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/CreateAuthMethodGCP} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateAuthMethodGCPOutput} and HTTP response
     */

  }, {
    key: "createAuthMethodGCPWithHttpInfo",
    value: function createAuthMethodGCPWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createAuthMethodGCP");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _CreateAuthMethodGCPOutput["default"];
      return this.apiClient.callApi('/create-auth-method-gcp', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/CreateAuthMethodGCP} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateAuthMethodGCPOutput}
     */

  }, {
    key: "createAuthMethodGCP",
    value: function createAuthMethodGCP(body) {
      return this.createAuthMethodGCPWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/CreateAuthMethodHuawei} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateAuthMethodHuaweiOutput} and HTTP response
     */

  }, {
    key: "createAuthMethodHuaweiWithHttpInfo",
    value: function createAuthMethodHuaweiWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createAuthMethodHuawei");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _CreateAuthMethodHuaweiOutput["default"];
      return this.apiClient.callApi('/create-auth-method-huawei', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/CreateAuthMethodHuawei} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateAuthMethodHuaweiOutput}
     */

  }, {
    key: "createAuthMethodHuawei",
    value: function createAuthMethodHuawei(body) {
      return this.createAuthMethodHuaweiWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/CreateAuthMethodK8S} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateAuthMethodK8SOutput} and HTTP response
     */

  }, {
    key: "createAuthMethodK8SWithHttpInfo",
    value: function createAuthMethodK8SWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createAuthMethodK8S");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _CreateAuthMethodK8SOutput["default"];
      return this.apiClient.callApi('/create-auth-method-k8s', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/CreateAuthMethodK8S} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateAuthMethodK8SOutput}
     */

  }, {
    key: "createAuthMethodK8S",
    value: function createAuthMethodK8S(body) {
      return this.createAuthMethodK8SWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/CreateAuthMethodLDAP} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateAuthMethodLDAPOutput} and HTTP response
     */

  }, {
    key: "createAuthMethodLDAPWithHttpInfo",
    value: function createAuthMethodLDAPWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createAuthMethodLDAP");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _CreateAuthMethodLDAPOutput["default"];
      return this.apiClient.callApi('/create-auth-method-ldap', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/CreateAuthMethodLDAP} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateAuthMethodLDAPOutput}
     */

  }, {
    key: "createAuthMethodLDAP",
    value: function createAuthMethodLDAP(body) {
      return this.createAuthMethodLDAPWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/CreateAuthMethodOAuth2} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateAuthMethodOAuth2Output} and HTTP response
     */

  }, {
    key: "createAuthMethodOAuth2WithHttpInfo",
    value: function createAuthMethodOAuth2WithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createAuthMethodOAuth2");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _CreateAuthMethodOAuth2Output["default"];
      return this.apiClient.callApi('/create-auth-method-oauth2', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/CreateAuthMethodOAuth2} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateAuthMethodOAuth2Output}
     */

  }, {
    key: "createAuthMethodOAuth2",
    value: function createAuthMethodOAuth2(body) {
      return this.createAuthMethodOAuth2WithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/CreateAuthMethodOIDC} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateAuthMethodOIDCOutput} and HTTP response
     */

  }, {
    key: "createAuthMethodOIDCWithHttpInfo",
    value: function createAuthMethodOIDCWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createAuthMethodOIDC");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _CreateAuthMethodOIDCOutput["default"];
      return this.apiClient.callApi('/create-auth-method-oidc', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/CreateAuthMethodOIDC} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateAuthMethodOIDCOutput}
     */

  }, {
    key: "createAuthMethodOIDC",
    value: function createAuthMethodOIDC(body) {
      return this.createAuthMethodOIDCWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/CreateAuthMethodSAML} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateAuthMethodSAMLOutput} and HTTP response
     */

  }, {
    key: "createAuthMethodSAMLWithHttpInfo",
    value: function createAuthMethodSAMLWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createAuthMethodSAML");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _CreateAuthMethodSAMLOutput["default"];
      return this.apiClient.callApi('/create-auth-method-saml', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/CreateAuthMethodSAML} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateAuthMethodSAMLOutput}
     */

  }, {
    key: "createAuthMethodSAML",
    value: function createAuthMethodSAML(body) {
      return this.createAuthMethodSAMLWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/CreateAuthMethodUniversalIdentity} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateAuthMethodUniversalIdentityOutput} and HTTP response
     */

  }, {
    key: "createAuthMethodUniversalIdentityWithHttpInfo",
    value: function createAuthMethodUniversalIdentityWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createAuthMethodUniversalIdentity");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _CreateAuthMethodUniversalIdentityOutput["default"];
      return this.apiClient.callApi('/create-auth-method-universal-identity', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/CreateAuthMethodUniversalIdentity} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateAuthMethodUniversalIdentityOutput}
     */

  }, {
    key: "createAuthMethodUniversalIdentity",
    value: function createAuthMethodUniversalIdentity(body) {
      return this.createAuthMethodUniversalIdentityWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/CreateAzureTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateAzureTargetOutput} and HTTP response
     */

  }, {
    key: "createAzureTargetWithHttpInfo",
    value: function createAzureTargetWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createAzureTarget");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _CreateAzureTargetOutput["default"];
      return this.apiClient.callApi('/create-azure-target', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/CreateAzureTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateAzureTargetOutput}
     */

  }, {
    key: "createAzureTarget",
    value: function createAzureTarget(body) {
      return this.createAzureTargetWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/CreateCertificate} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateCertificateOutput} and HTTP response
     */

  }, {
    key: "createCertificateWithHttpInfo",
    value: function createCertificateWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createCertificate");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _CreateCertificateOutput["default"];
      return this.apiClient.callApi('/create-certificate', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/CreateCertificate} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateCertificateOutput}
     */

  }, {
    key: "createCertificate",
    value: function createCertificate(body) {
      return this.createCertificateWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/CreateClassicKey} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateClassicKeyOutput} and HTTP response
     */

  }, {
    key: "createClassicKeyWithHttpInfo",
    value: function createClassicKeyWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createClassicKey");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _CreateClassicKeyOutput["default"];
      return this.apiClient.callApi('/create-classic-key', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/CreateClassicKey} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateClassicKeyOutput}
     */

  }, {
    key: "createClassicKey",
    value: function createClassicKey(body) {
      return this.createClassicKeyWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/CreateDBTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateDBTargetOutput} and HTTP response
     */

  }, {
    key: "createDBTargetWithHttpInfo",
    value: function createDBTargetWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createDBTarget");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _CreateDBTargetOutput["default"];
      return this.apiClient.callApi('/create-db-target', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/CreateDBTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateDBTargetOutput}
     */

  }, {
    key: "createDBTarget",
    value: function createDBTarget(body) {
      return this.createDBTargetWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/CreateDFCKey} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateDFCKeyOutput} and HTTP response
     */

  }, {
    key: "createDFCKeyWithHttpInfo",
    value: function createDFCKeyWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createDFCKey");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _CreateDFCKeyOutput["default"];
      return this.apiClient.callApi('/create-dfc-key', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/CreateDFCKey} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateDFCKeyOutput}
     */

  }, {
    key: "createDFCKey",
    value: function createDFCKey(body) {
      return this.createDFCKeyWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/CreateDockerhubTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateDockerhubTargetOutput} and HTTP response
     */

  }, {
    key: "createDockerhubTargetWithHttpInfo",
    value: function createDockerhubTargetWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createDockerhubTarget");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _CreateDockerhubTargetOutput["default"];
      return this.apiClient.callApi('/create-dockerhub-target', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/CreateDockerhubTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateDockerhubTargetOutput}
     */

  }, {
    key: "createDockerhubTarget",
    value: function createDockerhubTarget(body) {
      return this.createDockerhubTargetWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/CreateDynamicSecret} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */

  }, {
    key: "createDynamicSecretWithHttpInfo",
    value: function createDynamicSecretWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createDynamicSecret");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/create-dynamic-secret', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/CreateDynamicSecret} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */

  }, {
    key: "createDynamicSecret",
    value: function createDynamicSecret(body) {
      return this.createDynamicSecretWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/CreateEKSTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateEKSTargetOutput} and HTTP response
     */

  }, {
    key: "createEKSTargetWithHttpInfo",
    value: function createEKSTargetWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createEKSTarget");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _CreateEKSTargetOutput["default"];
      return this.apiClient.callApi('/create-eks-target', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/CreateEKSTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateEKSTargetOutput}
     */

  }, {
    key: "createEKSTarget",
    value: function createEKSTarget(body) {
      return this.createEKSTargetWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/CreateESM} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateESMOutput} and HTTP response
     */

  }, {
    key: "createESMWithHttpInfo",
    value: function createESMWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createESM");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _CreateESMOutput["default"];
      return this.apiClient.callApi('/create-esm', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/CreateESM} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateESMOutput}
     */

  }, {
    key: "createESM",
    value: function createESM(body) {
      return this.createESMWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/CreateEventForwarder} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateEventForwarderOutput} and HTTP response
     */

  }, {
    key: "createEventForwarderWithHttpInfo",
    value: function createEventForwarderWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createEventForwarder");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _CreateEventForwarderOutput["default"];
      return this.apiClient.callApi('/create-event-forwarder', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/CreateEventForwarder} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateEventForwarderOutput}
     */

  }, {
    key: "createEventForwarder",
    value: function createEventForwarder(body) {
      return this.createEventForwarderWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/CreateGKETarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateGKETargetOutput} and HTTP response
     */

  }, {
    key: "createGKETargetWithHttpInfo",
    value: function createGKETargetWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createGKETarget");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _CreateGKETargetOutput["default"];
      return this.apiClient.callApi('/create-gke-target', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/CreateGKETarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateGKETargetOutput}
     */

  }, {
    key: "createGKETarget",
    value: function createGKETarget(body) {
      return this.createGKETargetWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/CreateGcpTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateGcpTargetOutput} and HTTP response
     */

  }, {
    key: "createGcpTargetWithHttpInfo",
    value: function createGcpTargetWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createGcpTarget");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _CreateGcpTargetOutput["default"];
      return this.apiClient.callApi('/create-gcp-target', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/CreateGcpTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateGcpTargetOutput}
     */

  }, {
    key: "createGcpTarget",
    value: function createGcpTarget(body) {
      return this.createGcpTargetWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/CreateGithubTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateGithubTargetOutput} and HTTP response
     */

  }, {
    key: "createGithubTargetWithHttpInfo",
    value: function createGithubTargetWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createGithubTarget");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _CreateGithubTargetOutput["default"];
      return this.apiClient.callApi('/create-github-target', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/CreateGithubTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateGithubTargetOutput}
     */

  }, {
    key: "createGithubTarget",
    value: function createGithubTarget(body) {
      return this.createGithubTargetWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/CreateGlobalSignAtlasTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateGlobalSignAtlasTargetOutput} and HTTP response
     */

  }, {
    key: "createGlobalSignAtlasTargetWithHttpInfo",
    value: function createGlobalSignAtlasTargetWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createGlobalSignAtlasTarget");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _CreateGlobalSignAtlasTargetOutput["default"];
      return this.apiClient.callApi('/create-globalsign-atlas-target', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/CreateGlobalSignAtlasTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateGlobalSignAtlasTargetOutput}
     */

  }, {
    key: "createGlobalSignAtlasTarget",
    value: function createGlobalSignAtlasTarget(body) {
      return this.createGlobalSignAtlasTargetWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/CreateGlobalSignTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateGlobalSignTargetOutput} and HTTP response
     */

  }, {
    key: "createGlobalSignTargetWithHttpInfo",
    value: function createGlobalSignTargetWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createGlobalSignTarget");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _CreateGlobalSignTargetOutput["default"];
      return this.apiClient.callApi('/create-globalsign-target', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/CreateGlobalSignTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateGlobalSignTargetOutput}
     */

  }, {
    key: "createGlobalSignTarget",
    value: function createGlobalSignTarget(body) {
      return this.createGlobalSignTargetWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/CreateGroup} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateGroupOutput} and HTTP response
     */

  }, {
    key: "createGroupWithHttpInfo",
    value: function createGroupWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createGroup");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _CreateGroupOutput["default"];
      return this.apiClient.callApi('/create-group', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/CreateGroup} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateGroupOutput}
     */

  }, {
    key: "createGroup",
    value: function createGroup(body) {
      return this.createGroupWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/CreateKey} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateKeyOutput} and HTTP response
     */

  }, {
    key: "createKeyWithHttpInfo",
    value: function createKeyWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createKey");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _CreateKeyOutput["default"];
      return this.apiClient.callApi('/create-key', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/CreateKey} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateKeyOutput}
     */

  }, {
    key: "createKey",
    value: function createKey(body) {
      return this.createKeyWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/CreateLinkedTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateLinkedTargetOutput} and HTTP response
     */

  }, {
    key: "createLinkedTargetWithHttpInfo",
    value: function createLinkedTargetWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createLinkedTarget");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _CreateLinkedTargetOutput["default"];
      return this.apiClient.callApi('/create-linked-target', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/CreateLinkedTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateLinkedTargetOutput}
     */

  }, {
    key: "createLinkedTarget",
    value: function createLinkedTarget(body) {
      return this.createLinkedTargetWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/CreateNativeK8STarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateNativeK8STargetOutput} and HTTP response
     */

  }, {
    key: "createNativeK8STargetWithHttpInfo",
    value: function createNativeK8STargetWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createNativeK8STarget");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _CreateNativeK8STargetOutput["default"];
      return this.apiClient.callApi('/create-k8s-target', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/CreateNativeK8STarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateNativeK8STargetOutput}
     */

  }, {
    key: "createNativeK8STarget",
    value: function createNativeK8STarget(body) {
      return this.createNativeK8STargetWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/CreateOidcApp} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateOidcAppOutput} and HTTP response
     */

  }, {
    key: "createOidcAppWithHttpInfo",
    value: function createOidcAppWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createOidcApp");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _CreateOidcAppOutput["default"];
      return this.apiClient.callApi('/create-oidc-app', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/CreateOidcApp} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateOidcAppOutput}
     */

  }, {
    key: "createOidcApp",
    value: function createOidcApp(body) {
      return this.createOidcAppWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/CreatePKICertIssuer} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreatePKICertIssuerOutput} and HTTP response
     */

  }, {
    key: "createPKICertIssuerWithHttpInfo",
    value: function createPKICertIssuerWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createPKICertIssuer");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _CreatePKICertIssuerOutput["default"];
      return this.apiClient.callApi('/create-pki-cert-issuer', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/CreatePKICertIssuer} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreatePKICertIssuerOutput}
     */

  }, {
    key: "createPKICertIssuer",
    value: function createPKICertIssuer(body) {
      return this.createPKICertIssuerWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/CreatePingTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreatePingTargetOutput} and HTTP response
     */

  }, {
    key: "createPingTargetWithHttpInfo",
    value: function createPingTargetWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createPingTarget");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _CreatePingTargetOutput["default"];
      return this.apiClient.callApi('/create-ping-target', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/CreatePingTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreatePingTargetOutput}
     */

  }, {
    key: "createPingTarget",
    value: function createPingTarget(body) {
      return this.createPingTargetWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/CreateRabbitMQTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateRabbitMQTargetOutput} and HTTP response
     */

  }, {
    key: "createRabbitMQTargetWithHttpInfo",
    value: function createRabbitMQTargetWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createRabbitMQTarget");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _CreateRabbitMQTargetOutput["default"];
      return this.apiClient.callApi('/create-rabbitmq-target', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/CreateRabbitMQTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateRabbitMQTargetOutput}
     */

  }, {
    key: "createRabbitMQTarget",
    value: function createRabbitMQTarget(body) {
      return this.createRabbitMQTargetWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/CreateRole} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */

  }, {
    key: "createRoleWithHttpInfo",
    value: function createRoleWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createRole");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/create-role', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/CreateRole} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */

  }, {
    key: "createRole",
    value: function createRole(body) {
      return this.createRoleWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/CreateRotatedSecret} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateRotatedSecretOutput} and HTTP response
     */

  }, {
    key: "createRotatedSecretWithHttpInfo",
    value: function createRotatedSecretWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createRotatedSecret");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _CreateRotatedSecretOutput["default"];
      return this.apiClient.callApi('/create-rotated-secret', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/CreateRotatedSecret} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateRotatedSecretOutput}
     */

  }, {
    key: "createRotatedSecret",
    value: function createRotatedSecret(body) {
      return this.createRotatedSecretWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/CreateSSHCertIssuer} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateSSHCertIssuerOutput} and HTTP response
     */

  }, {
    key: "createSSHCertIssuerWithHttpInfo",
    value: function createSSHCertIssuerWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createSSHCertIssuer");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _CreateSSHCertIssuerOutput["default"];
      return this.apiClient.callApi('/create-ssh-cert-issuer', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/CreateSSHCertIssuer} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateSSHCertIssuerOutput}
     */

  }, {
    key: "createSSHCertIssuer",
    value: function createSSHCertIssuer(body) {
      return this.createSSHCertIssuerWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/CreateSSHTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateSSHTargetOutput} and HTTP response
     */

  }, {
    key: "createSSHTargetWithHttpInfo",
    value: function createSSHTargetWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createSSHTarget");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _CreateSSHTargetOutput["default"];
      return this.apiClient.callApi('/create-ssh-target', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/CreateSSHTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateSSHTargetOutput}
     */

  }, {
    key: "createSSHTarget",
    value: function createSSHTarget(body) {
      return this.createSSHTargetWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/CreateSalesforceTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateSalesforceTargetOutput} and HTTP response
     */

  }, {
    key: "createSalesforceTargetWithHttpInfo",
    value: function createSalesforceTargetWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createSalesforceTarget");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _CreateSalesforceTargetOutput["default"];
      return this.apiClient.callApi('/create-salesforce-target', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/CreateSalesforceTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateSalesforceTargetOutput}
     */

  }, {
    key: "createSalesforceTarget",
    value: function createSalesforceTarget(body) {
      return this.createSalesforceTargetWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/CreateSecret} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateSecretOutput} and HTTP response
     */

  }, {
    key: "createSecretWithHttpInfo",
    value: function createSecretWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createSecret");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _CreateSecretOutput["default"];
      return this.apiClient.callApi('/create-secret', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/CreateSecret} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateSecretOutput}
     */

  }, {
    key: "createSecret",
    value: function createSecret(body) {
      return this.createSecretWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/CreateTokenizer} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateTokenizerOutput} and HTTP response
     */

  }, {
    key: "createTokenizerWithHttpInfo",
    value: function createTokenizerWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createTokenizer");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _CreateTokenizerOutput["default"];
      return this.apiClient.callApi('/create-tokenizer', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/CreateTokenizer} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateTokenizerOutput}
     */

  }, {
    key: "createTokenizer",
    value: function createTokenizer(body) {
      return this.createTokenizerWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/CreateUserEvent} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateUserEventOutput} and HTTP response
     */

  }, {
    key: "createUserEventWithHttpInfo",
    value: function createUserEventWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createUserEvent");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _CreateUserEventOutput["default"];
      return this.apiClient.callApi('/create-user-event', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/CreateUserEvent} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateUserEventOutput}
     */

  }, {
    key: "createUserEvent",
    value: function createUserEvent(body) {
      return this.createUserEventWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/CreateWebTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateWebTargetOutput} and HTTP response
     */

  }, {
    key: "createWebTargetWithHttpInfo",
    value: function createWebTargetWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createWebTarget");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _CreateWebTargetOutput["default"];
      return this.apiClient.callApi('/create-web-target', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/CreateWebTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateWebTargetOutput}
     */

  }, {
    key: "createWebTarget",
    value: function createWebTarget(body) {
      return this.createWebTargetWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/CreateWindowsTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateWindowsTargetOutput} and HTTP response
     */

  }, {
    key: "createWindowsTargetWithHttpInfo",
    value: function createWindowsTargetWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createWindowsTarget");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _CreateWindowsTargetOutput["default"];
      return this.apiClient.callApi('/create-windows-target', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/CreateWindowsTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateWindowsTargetOutput}
     */

  }, {
    key: "createWindowsTarget",
    value: function createWindowsTarget(body) {
      return this.createWindowsTargetWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/CreateZeroSSLTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateZeroSSLTargetOutput} and HTTP response
     */

  }, {
    key: "createZeroSSLTargetWithHttpInfo",
    value: function createZeroSSLTargetWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createZeroSSLTarget");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _CreateZeroSSLTargetOutput["default"];
      return this.apiClient.callApi('/create-zerossl-target', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/CreateZeroSSLTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateZeroSSLTargetOutput}
     */

  }, {
    key: "createZeroSSLTarget",
    value: function createZeroSSLTarget(body) {
      return this.createZeroSSLTargetWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/CreateLdapTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateLdapTargetOutput} and HTTP response
     */

  }, {
    key: "createldapTargetWithHttpInfo",
    value: function createldapTargetWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createldapTarget");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _CreateLdapTargetOutput["default"];
      return this.apiClient.callApi('/create-ldap-target', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/CreateLdapTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateLdapTargetOutput}
     */

  }, {
    key: "createldapTarget",
    value: function createldapTarget(body) {
      return this.createldapTargetWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/Decrypt} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DecryptOutput} and HTTP response
     */

  }, {
    key: "decryptWithHttpInfo",
    value: function decryptWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling decrypt");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _DecryptOutput["default"];
      return this.apiClient.callApi('/decrypt', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/Decrypt} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DecryptOutput}
     */

  }, {
    key: "decrypt",
    value: function decrypt(body) {
      return this.decryptWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/DecryptGPG} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DecryptGPGOutput} and HTTP response
     */

  }, {
    key: "decryptGPGWithHttpInfo",
    value: function decryptGPGWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling decryptGPG");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _DecryptGPGOutput["default"];
      return this.apiClient.callApi('/decrypt-gpg', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/DecryptGPG} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DecryptGPGOutput}
     */

  }, {
    key: "decryptGPG",
    value: function decryptGPG(body) {
      return this.decryptGPGWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/DecryptPKCS1} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DecryptPKCS1Output} and HTTP response
     */

  }, {
    key: "decryptPKCS1WithHttpInfo",
    value: function decryptPKCS1WithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling decryptPKCS1");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _DecryptPKCS1Output["default"];
      return this.apiClient.callApi('/decrypt-pkcs1', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/DecryptPKCS1} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DecryptPKCS1Output}
     */

  }, {
    key: "decryptPKCS1",
    value: function decryptPKCS1(body) {
      return this.decryptPKCS1WithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/DecryptWithClassicKey} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DecryptWithClassicKeyOutput} and HTTP response
     */

  }, {
    key: "decryptWithClassicKeyWithHttpInfo",
    value: function decryptWithClassicKeyWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling decryptWithClassicKey");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _DecryptWithClassicKeyOutput["default"];
      return this.apiClient.callApi('/decrypt-with-classic-key', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/DecryptWithClassicKey} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DecryptWithClassicKeyOutput}
     */

  }, {
    key: "decryptWithClassicKey",
    value: function decryptWithClassicKey(body) {
      return this.decryptWithClassicKeyWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/DeleteAuthMethod} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DeleteAuthMethodOutput} and HTTP response
     */

  }, {
    key: "deleteAuthMethodWithHttpInfo",
    value: function deleteAuthMethodWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling deleteAuthMethod");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _DeleteAuthMethodOutput["default"];
      return this.apiClient.callApi('/delete-auth-method', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/DeleteAuthMethod} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DeleteAuthMethodOutput}
     */

  }, {
    key: "deleteAuthMethod",
    value: function deleteAuthMethod(body) {
      return this.deleteAuthMethodWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/DeleteAuthMethods} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DeleteAuthMethodsOutput} and HTTP response
     */

  }, {
    key: "deleteAuthMethodsWithHttpInfo",
    value: function deleteAuthMethodsWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling deleteAuthMethods");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _DeleteAuthMethodsOutput["default"];
      return this.apiClient.callApi('/delete-auth-methods', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/DeleteAuthMethods} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DeleteAuthMethodsOutput}
     */

  }, {
    key: "deleteAuthMethods",
    value: function deleteAuthMethods(body) {
      return this.deleteAuthMethodsWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/DeleteEventForwarder} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */

  }, {
    key: "deleteEventForwarderWithHttpInfo",
    value: function deleteEventForwarderWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling deleteEventForwarder");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/delete-event-forwarder', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/DeleteEventForwarder} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */

  }, {
    key: "deleteEventForwarder",
    value: function deleteEventForwarder(body) {
      return this.deleteEventForwarderWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/DeleteGatewayAllowedAccessId} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */

  }, {
    key: "deleteGatewayAllowedAccessIdWithHttpInfo",
    value: function deleteGatewayAllowedAccessIdWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling deleteGatewayAllowedAccessId");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/gateway-delete-allowed-management-access', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/DeleteGatewayAllowedAccessId} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */

  }, {
    key: "deleteGatewayAllowedAccessId",
    value: function deleteGatewayAllowedAccessId(body) {
      return this.deleteGatewayAllowedAccessIdWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/DeleteGroup} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DeleteGroupOutput} and HTTP response
     */

  }, {
    key: "deleteGroupWithHttpInfo",
    value: function deleteGroupWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling deleteGroup");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _DeleteGroupOutput["default"];
      return this.apiClient.callApi('/delete-group', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/DeleteGroup} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DeleteGroupOutput}
     */

  }, {
    key: "deleteGroup",
    value: function deleteGroup(body) {
      return this.deleteGroupWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/DeleteGwCluster} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */

  }, {
    key: "deleteGwClusterWithHttpInfo",
    value: function deleteGwClusterWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling deleteGwCluster");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/delete-gateway-cluster', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/DeleteGwCluster} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */

  }, {
    key: "deleteGwCluster",
    value: function deleteGwCluster(body) {
      return this.deleteGwClusterWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/DeleteItem} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DeleteItemOutput} and HTTP response
     */

  }, {
    key: "deleteItemWithHttpInfo",
    value: function deleteItemWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling deleteItem");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _DeleteItemOutput["default"];
      return this.apiClient.callApi('/delete-item', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/DeleteItem} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DeleteItemOutput}
     */

  }, {
    key: "deleteItem",
    value: function deleteItem(body) {
      return this.deleteItemWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/DeleteItems} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DeleteItemsOutput} and HTTP response
     */

  }, {
    key: "deleteItemsWithHttpInfo",
    value: function deleteItemsWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling deleteItems");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _DeleteItemsOutput["default"];
      return this.apiClient.callApi('/delete-items', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/DeleteItems} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DeleteItemsOutput}
     */

  }, {
    key: "deleteItems",
    value: function deleteItems(body) {
      return this.deleteItemsWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/DeleteRole} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */

  }, {
    key: "deleteRoleWithHttpInfo",
    value: function deleteRoleWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling deleteRole");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/delete-role', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/DeleteRole} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */

  }, {
    key: "deleteRole",
    value: function deleteRole(body) {
      return this.deleteRoleWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/DeleteRoleAssociation} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */

  }, {
    key: "deleteRoleAssociationWithHttpInfo",
    value: function deleteRoleAssociationWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling deleteRoleAssociation");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/delete-assoc', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/DeleteRoleAssociation} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */

  }, {
    key: "deleteRoleAssociation",
    value: function deleteRoleAssociation(body) {
      return this.deleteRoleAssociationWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/DeleteRoleRule} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DeleteRoleRuleOutput} and HTTP response
     */

  }, {
    key: "deleteRoleRuleWithHttpInfo",
    value: function deleteRoleRuleWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling deleteRoleRule");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _DeleteRoleRuleOutput["default"];
      return this.apiClient.callApi('/delete-role-rule', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/DeleteRoleRule} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DeleteRoleRuleOutput}
     */

  }, {
    key: "deleteRoleRule",
    value: function deleteRoleRule(body) {
      return this.deleteRoleRuleWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/DeleteRoles} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */

  }, {
    key: "deleteRolesWithHttpInfo",
    value: function deleteRolesWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling deleteRoles");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/delete-roles', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/DeleteRoles} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */

  }, {
    key: "deleteRoles",
    value: function deleteRoles(body) {
      return this.deleteRolesWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/DeleteTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */

  }, {
    key: "deleteTargetWithHttpInfo",
    value: function deleteTargetWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling deleteTarget");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/delete-target', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/DeleteTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */

  }, {
    key: "deleteTarget",
    value: function deleteTarget(body) {
      return this.deleteTargetWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/DeleteTargetAssociation} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */

  }, {
    key: "deleteTargetAssociationWithHttpInfo",
    value: function deleteTargetAssociationWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling deleteTargetAssociation");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/delete-assoc-target-item', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/DeleteTargetAssociation} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */

  }, {
    key: "deleteTargetAssociation",
    value: function deleteTargetAssociation(body) {
      return this.deleteTargetAssociationWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/DeleteTargets} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */

  }, {
    key: "deleteTargetsWithHttpInfo",
    value: function deleteTargetsWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling deleteTargets");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/delete-targets', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/DeleteTargets} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */

  }, {
    key: "deleteTargets",
    value: function deleteTargets(body) {
      return this.deleteTargetsWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/DeriveKey} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DeriveKeyOutput} and HTTP response
     */

  }, {
    key: "deriveKeyWithHttpInfo",
    value: function deriveKeyWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling deriveKey");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _DeriveKeyOutput["default"];
      return this.apiClient.callApi('/derive-key', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/DeriveKey} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DeriveKeyOutput}
     */

  }, {
    key: "deriveKey",
    value: function deriveKey(body) {
      return this.deriveKeyWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/DescribeAssoc} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RoleAssociationDetails} and HTTP response
     */

  }, {
    key: "describeAssocWithHttpInfo",
    value: function describeAssocWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling describeAssoc");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _RoleAssociationDetails["default"];
      return this.apiClient.callApi('/describe-role-am-assoc', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/DescribeAssoc} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RoleAssociationDetails}
     */

  }, {
    key: "describeAssoc",
    value: function describeAssoc(body) {
      return this.describeAssocWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/DescribeItem} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Item} and HTTP response
     */

  }, {
    key: "describeItemWithHttpInfo",
    value: function describeItemWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling describeItem");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _Item["default"];
      return this.apiClient.callApi('/describe-item', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/DescribeItem} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Item}
     */

  }, {
    key: "describeItem",
    value: function describeItem(body) {
      return this.describeItemWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/DescribePermissions} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DescribePermissionsOutput} and HTTP response
     */

  }, {
    key: "describePermissionsWithHttpInfo",
    value: function describePermissionsWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling describePermissions");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _DescribePermissionsOutput["default"];
      return this.apiClient.callApi('/describe-permissions', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/DescribePermissions} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DescribePermissionsOutput}
     */

  }, {
    key: "describePermissions",
    value: function describePermissions(body) {
      return this.describePermissionsWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/DescribeSubClaims} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DescribeSubClaimsOutput} and HTTP response
     */

  }, {
    key: "describeSubClaimsWithHttpInfo",
    value: function describeSubClaimsWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling describeSubClaims");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _DescribeSubClaimsOutput["default"];
      return this.apiClient.callApi('/describe-sub-claims', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/DescribeSubClaims} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DescribeSubClaimsOutput}
     */

  }, {
    key: "describeSubClaims",
    value: function describeSubClaims(body) {
      return this.describeSubClaimsWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/Detokenize} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DetokenizeOutput} and HTTP response
     */

  }, {
    key: "detokenizeWithHttpInfo",
    value: function detokenizeWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling detokenize");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _DetokenizeOutput["default"];
      return this.apiClient.callApi('/detokenize', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/Detokenize} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DetokenizeOutput}
     */

  }, {
    key: "detokenize",
    value: function detokenize(body) {
      return this.detokenizeWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/Encrypt} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EncryptOutput} and HTTP response
     */

  }, {
    key: "encryptWithHttpInfo",
    value: function encryptWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling encrypt");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _EncryptOutput["default"];
      return this.apiClient.callApi('/encrypt', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/Encrypt} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EncryptOutput}
     */

  }, {
    key: "encrypt",
    value: function encrypt(body) {
      return this.encryptWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/EncryptGPG} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EncryptGPGOutput} and HTTP response
     */

  }, {
    key: "encryptGPGWithHttpInfo",
    value: function encryptGPGWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling encryptGPG");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _EncryptGPGOutput["default"];
      return this.apiClient.callApi('/encrypt-gpg', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/EncryptGPG} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EncryptGPGOutput}
     */

  }, {
    key: "encryptGPG",
    value: function encryptGPG(body) {
      return this.encryptGPGWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/EncryptWithClassicKey} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EncryptOutput} and HTTP response
     */

  }, {
    key: "encryptWithClassicKeyWithHttpInfo",
    value: function encryptWithClassicKeyWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling encryptWithClassicKey");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _EncryptOutput["default"];
      return this.apiClient.callApi('/encrypt-with-classic-key', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/EncryptWithClassicKey} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EncryptOutput}
     */

  }, {
    key: "encryptWithClassicKey",
    value: function encryptWithClassicKey(body) {
      return this.encryptWithClassicKeyWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/EsmUpdate} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EsmCreateSecretOutput} and HTTP response
     */

  }, {
    key: "esmCreateWithHttpInfo",
    value: function esmCreateWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling esmCreate");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _EsmCreateSecretOutput["default"];
      return this.apiClient.callApi('/esm-create', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/EsmUpdate} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EsmCreateSecretOutput}
     */

  }, {
    key: "esmCreate",
    value: function esmCreate(body) {
      return this.esmCreateWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/EsmDelete} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EsmDeleteSecretOutput} and HTTP response
     */

  }, {
    key: "esmDeleteWithHttpInfo",
    value: function esmDeleteWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling esmDelete");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _EsmDeleteSecretOutput["default"];
      return this.apiClient.callApi('/esm-delete', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/EsmDelete} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EsmDeleteSecretOutput}
     */

  }, {
    key: "esmDelete",
    value: function esmDelete(body) {
      return this.esmDeleteWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/EsmGet} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EsmGetSecretOutput} and HTTP response
     */

  }, {
    key: "esmGetWithHttpInfo",
    value: function esmGetWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling esmGet");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _EsmGetSecretOutput["default"];
      return this.apiClient.callApi('/esm-get', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/EsmGet} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EsmGetSecretOutput}
     */

  }, {
    key: "esmGet",
    value: function esmGet(body) {
      return this.esmGetWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/EsmList} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EsmListSecretsOutput} and HTTP response
     */

  }, {
    key: "esmListWithHttpInfo",
    value: function esmListWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling esmList");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _EsmListSecretsOutput["default"];
      return this.apiClient.callApi('/esm-list', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/EsmList} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EsmListSecretsOutput}
     */

  }, {
    key: "esmList",
    value: function esmList(body) {
      return this.esmListWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EsmUpdateSecretOutput} and HTTP response
     */

  }, {
    key: "esmUpdateWithHttpInfo",
    value: function esmUpdateWithHttpInfo() {
      var postBody = null;
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _EsmUpdateSecretOutput["default"];
      return this.apiClient.callApi('/esm-update', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EsmUpdateSecretOutput}
     */

  }, {
    key: "esmUpdate",
    value: function esmUpdate() {
      return this.esmUpdateWithHttpInfo().then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/EventAction} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */

  }, {
    key: "eventActionWithHttpInfo",
    value: function eventActionWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling eventAction");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/event-action', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/EventAction} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */

  }, {
    key: "eventAction",
    value: function eventAction(body) {
      return this.eventActionWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/ExportClassicKey} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ExportClassicKeyOutput} and HTTP response
     */

  }, {
    key: "exportClassicKeyWithHttpInfo",
    value: function exportClassicKeyWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling exportClassicKey");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _ExportClassicKeyOutput["default"];
      return this.apiClient.callApi('/export-classic-key', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/ExportClassicKey} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ExportClassicKeyOutput}
     */

  }, {
    key: "exportClassicKey",
    value: function exportClassicKey(body) {
      return this.exportClassicKeyWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/GatewayCreateAllowedAccess} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AllowedAccess} and HTTP response
     */

  }, {
    key: "gatewayCreateAllowedAccessWithHttpInfo",
    value: function gatewayCreateAllowedAccessWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayCreateAllowedAccess");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _AllowedAccess["default"];
      return this.apiClient.callApi('/gateway-create-allowed-access', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/GatewayCreateAllowedAccess} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AllowedAccess}
     */

  }, {
    key: "gatewayCreateAllowedAccess",
    value: function gatewayCreateAllowedAccess(body) {
      return this.gatewayCreateAllowedAccessWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/GatewayCreateK8SAuthConfig} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayCreateK8SAuthConfigOutput} and HTTP response
     */

  }, {
    key: "gatewayCreateK8SAuthConfigWithHttpInfo",
    value: function gatewayCreateK8SAuthConfigWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayCreateK8SAuthConfig");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GatewayCreateK8SAuthConfigOutput["default"];
      return this.apiClient.callApi('/gateway-create-k8s-auth-config', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/GatewayCreateK8SAuthConfig} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayCreateK8SAuthConfigOutput}
     */

  }, {
    key: "gatewayCreateK8SAuthConfig",
    value: function gatewayCreateK8SAuthConfig(body) {
      return this.gatewayCreateK8SAuthConfigWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/GatewayCreateMigration} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayMigrationCreateOutput} and HTTP response
     */

  }, {
    key: "gatewayCreateMigrationWithHttpInfo",
    value: function gatewayCreateMigrationWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayCreateMigration");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GatewayMigrationCreateOutput["default"];
      return this.apiClient.callApi('/gateway-create-migration', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/GatewayCreateMigration} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayMigrationCreateOutput}
     */

  }, {
    key: "gatewayCreateMigration",
    value: function gatewayCreateMigration(body) {
      return this.gatewayCreateMigrationWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/GatewayCreateProducerArtifactory} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayCreateProducerArtifactoryOutput} and HTTP response
     */

  }, {
    key: "gatewayCreateProducerArtifactoryWithHttpInfo",
    value: function gatewayCreateProducerArtifactoryWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayCreateProducerArtifactory");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GatewayCreateProducerArtifactoryOutput["default"];
      return this.apiClient.callApi('/gateway-create-producer-artifactory', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/GatewayCreateProducerArtifactory} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayCreateProducerArtifactoryOutput}
     */

  }, {
    key: "gatewayCreateProducerArtifactory",
    value: function gatewayCreateProducerArtifactory(body) {
      return this.gatewayCreateProducerArtifactoryWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/GatewayCreateProducerAws} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayCreateProducerAwsOutput} and HTTP response
     */

  }, {
    key: "gatewayCreateProducerAwsWithHttpInfo",
    value: function gatewayCreateProducerAwsWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayCreateProducerAws");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GatewayCreateProducerAwsOutput["default"];
      return this.apiClient.callApi('/gateway-create-producer-aws', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/GatewayCreateProducerAws} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayCreateProducerAwsOutput}
     */

  }, {
    key: "gatewayCreateProducerAws",
    value: function gatewayCreateProducerAws(body) {
      return this.gatewayCreateProducerAwsWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/GatewayCreateProducerAzure} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayCreateProducerAzureOutput} and HTTP response
     */

  }, {
    key: "gatewayCreateProducerAzureWithHttpInfo",
    value: function gatewayCreateProducerAzureWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayCreateProducerAzure");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GatewayCreateProducerAzureOutput["default"];
      return this.apiClient.callApi('/gateway-create-producer-azure', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/GatewayCreateProducerAzure} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayCreateProducerAzureOutput}
     */

  }, {
    key: "gatewayCreateProducerAzure",
    value: function gatewayCreateProducerAzure(body) {
      return this.gatewayCreateProducerAzureWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/GatewayCreateProducerCassandra} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayCreateProducerCassandraOutput} and HTTP response
     */

  }, {
    key: "gatewayCreateProducerCassandraWithHttpInfo",
    value: function gatewayCreateProducerCassandraWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayCreateProducerCassandra");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GatewayCreateProducerCassandraOutput["default"];
      return this.apiClient.callApi('/gateway-create-producer-cassandra', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/GatewayCreateProducerCassandra} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayCreateProducerCassandraOutput}
     */

  }, {
    key: "gatewayCreateProducerCassandra",
    value: function gatewayCreateProducerCassandra(body) {
      return this.gatewayCreateProducerCassandraWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/GatewayCreateProducerCertificateAutomation} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayCreateProducerCertificateAutomationOutput} and HTTP response
     */

  }, {
    key: "gatewayCreateProducerCertificateAutomationWithHttpInfo",
    value: function gatewayCreateProducerCertificateAutomationWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayCreateProducerCertificateAutomation");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GatewayCreateProducerCertificateAutomationOutput["default"];
      return this.apiClient.callApi('/gateway-create-producer-certificate-automation', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/GatewayCreateProducerCertificateAutomation} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayCreateProducerCertificateAutomationOutput}
     */

  }, {
    key: "gatewayCreateProducerCertificateAutomation",
    value: function gatewayCreateProducerCertificateAutomation(body) {
      return this.gatewayCreateProducerCertificateAutomationWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/GatewayCreateProducerCustom} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayCreateProducerCustomOutput} and HTTP response
     */

  }, {
    key: "gatewayCreateProducerCustomWithHttpInfo",
    value: function gatewayCreateProducerCustomWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = opts['body'];
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GatewayCreateProducerCustomOutput["default"];
      return this.apiClient.callApi('/gateway-create-producer-custom', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/GatewayCreateProducerCustom} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayCreateProducerCustomOutput}
     */

  }, {
    key: "gatewayCreateProducerCustom",
    value: function gatewayCreateProducerCustom(opts) {
      return this.gatewayCreateProducerCustomWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/GatewayCreateProducerDockerhub} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayCreateProducerDockerhubOutput} and HTTP response
     */

  }, {
    key: "gatewayCreateProducerDockerhubWithHttpInfo",
    value: function gatewayCreateProducerDockerhubWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayCreateProducerDockerhub");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GatewayCreateProducerDockerhubOutput["default"];
      return this.apiClient.callApi('/gateway-create-producer-dockerhub', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/GatewayCreateProducerDockerhub} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayCreateProducerDockerhubOutput}
     */

  }, {
    key: "gatewayCreateProducerDockerhub",
    value: function gatewayCreateProducerDockerhub(body) {
      return this.gatewayCreateProducerDockerhubWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/GatewayCreateProducerEks} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayCreateProducerEksOutput} and HTTP response
     */

  }, {
    key: "gatewayCreateProducerEksWithHttpInfo",
    value: function gatewayCreateProducerEksWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayCreateProducerEks");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GatewayCreateProducerEksOutput["default"];
      return this.apiClient.callApi('/gateway-create-producer-eks', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/GatewayCreateProducerEks} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayCreateProducerEksOutput}
     */

  }, {
    key: "gatewayCreateProducerEks",
    value: function gatewayCreateProducerEks(body) {
      return this.gatewayCreateProducerEksWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/GatewayCreateProducerGcp} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayCreateProducerGcpOutput} and HTTP response
     */

  }, {
    key: "gatewayCreateProducerGcpWithHttpInfo",
    value: function gatewayCreateProducerGcpWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayCreateProducerGcp");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GatewayCreateProducerGcpOutput["default"];
      return this.apiClient.callApi('/gateway-create-producer-gcp', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/GatewayCreateProducerGcp} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayCreateProducerGcpOutput}
     */

  }, {
    key: "gatewayCreateProducerGcp",
    value: function gatewayCreateProducerGcp(body) {
      return this.gatewayCreateProducerGcpWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/GatewayCreateProducerGithub} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayCreateProducerGithubOutput} and HTTP response
     */

  }, {
    key: "gatewayCreateProducerGithubWithHttpInfo",
    value: function gatewayCreateProducerGithubWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayCreateProducerGithub");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GatewayCreateProducerGithubOutput["default"];
      return this.apiClient.callApi('/gateway-create-producer-github', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/GatewayCreateProducerGithub} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayCreateProducerGithubOutput}
     */

  }, {
    key: "gatewayCreateProducerGithub",
    value: function gatewayCreateProducerGithub(body) {
      return this.gatewayCreateProducerGithubWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/GatewayCreateProducerGke} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayCreateProducerGkeOutput} and HTTP response
     */

  }, {
    key: "gatewayCreateProducerGkeWithHttpInfo",
    value: function gatewayCreateProducerGkeWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayCreateProducerGke");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GatewayCreateProducerGkeOutput["default"];
      return this.apiClient.callApi('/gateway-create-producer-gke', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/GatewayCreateProducerGke} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayCreateProducerGkeOutput}
     */

  }, {
    key: "gatewayCreateProducerGke",
    value: function gatewayCreateProducerGke(body) {
      return this.gatewayCreateProducerGkeWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/GatewayCreateProducerHanaDb} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayCreateProducerHanaDbOutput} and HTTP response
     */

  }, {
    key: "gatewayCreateProducerHanaDbWithHttpInfo",
    value: function gatewayCreateProducerHanaDbWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayCreateProducerHanaDb");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GatewayCreateProducerHanaDbOutput["default"];
      return this.apiClient.callApi('/gateway-create-producer-hanadb', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/GatewayCreateProducerHanaDb} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayCreateProducerHanaDbOutput}
     */

  }, {
    key: "gatewayCreateProducerHanaDb",
    value: function gatewayCreateProducerHanaDb(body) {
      return this.gatewayCreateProducerHanaDbWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/GatewayCreateProducerLdap} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayCreateProducerLdapOutput} and HTTP response
     */

  }, {
    key: "gatewayCreateProducerLdapWithHttpInfo",
    value: function gatewayCreateProducerLdapWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayCreateProducerLdap");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GatewayCreateProducerLdapOutput["default"];
      return this.apiClient.callApi('/gateway-create-producer-ldap', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/GatewayCreateProducerLdap} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayCreateProducerLdapOutput}
     */

  }, {
    key: "gatewayCreateProducerLdap",
    value: function gatewayCreateProducerLdap(body) {
      return this.gatewayCreateProducerLdapWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/GatewayCreateProducerMSSQL} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayCreateProducerMSSQLOutput} and HTTP response
     */

  }, {
    key: "gatewayCreateProducerMSSQLWithHttpInfo",
    value: function gatewayCreateProducerMSSQLWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayCreateProducerMSSQL");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GatewayCreateProducerMSSQLOutput["default"];
      return this.apiClient.callApi('/gateway-create-producer-mssql', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/GatewayCreateProducerMSSQL} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayCreateProducerMSSQLOutput}
     */

  }, {
    key: "gatewayCreateProducerMSSQL",
    value: function gatewayCreateProducerMSSQL(body) {
      return this.gatewayCreateProducerMSSQLWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/GatewayCreateProducerMongo} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayCreateProducerMongoOutput} and HTTP response
     */

  }, {
    key: "gatewayCreateProducerMongoWithHttpInfo",
    value: function gatewayCreateProducerMongoWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayCreateProducerMongo");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GatewayCreateProducerMongoOutput["default"];
      return this.apiClient.callApi('/gateway-create-producer-mongo', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/GatewayCreateProducerMongo} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayCreateProducerMongoOutput}
     */

  }, {
    key: "gatewayCreateProducerMongo",
    value: function gatewayCreateProducerMongo(body) {
      return this.gatewayCreateProducerMongoWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/GatewayCreateProducerMySQL} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayCreateProducerMySQLOutput} and HTTP response
     */

  }, {
    key: "gatewayCreateProducerMySQLWithHttpInfo",
    value: function gatewayCreateProducerMySQLWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayCreateProducerMySQL");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GatewayCreateProducerMySQLOutput["default"];
      return this.apiClient.callApi('/gateway-create-producer-mysql', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/GatewayCreateProducerMySQL} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayCreateProducerMySQLOutput}
     */

  }, {
    key: "gatewayCreateProducerMySQL",
    value: function gatewayCreateProducerMySQL(body) {
      return this.gatewayCreateProducerMySQLWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/GatewayCreateProducerNativeK8S} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayCreateProducerNativeK8SOutput} and HTTP response
     */

  }, {
    key: "gatewayCreateProducerNativeK8SWithHttpInfo",
    value: function gatewayCreateProducerNativeK8SWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayCreateProducerNativeK8S");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GatewayCreateProducerNativeK8SOutput["default"];
      return this.apiClient.callApi('/gateway-create-producer-k8s', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/GatewayCreateProducerNativeK8S} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayCreateProducerNativeK8SOutput}
     */

  }, {
    key: "gatewayCreateProducerNativeK8S",
    value: function gatewayCreateProducerNativeK8S(body) {
      return this.gatewayCreateProducerNativeK8SWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/GatewayCreateProducerOracleDb} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayCreateProducerOracleDbOutput} and HTTP response
     */

  }, {
    key: "gatewayCreateProducerOracleDbWithHttpInfo",
    value: function gatewayCreateProducerOracleDbWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayCreateProducerOracleDb");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GatewayCreateProducerOracleDbOutput["default"];
      return this.apiClient.callApi('/gateway-create-producer-oracle', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/GatewayCreateProducerOracleDb} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayCreateProducerOracleDbOutput}
     */

  }, {
    key: "gatewayCreateProducerOracleDb",
    value: function gatewayCreateProducerOracleDb(body) {
      return this.gatewayCreateProducerOracleDbWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/GatewayCreateProducerPing} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayCreateProducerPingOutput} and HTTP response
     */

  }, {
    key: "gatewayCreateProducerPingWithHttpInfo",
    value: function gatewayCreateProducerPingWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayCreateProducerPing");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GatewayCreateProducerPingOutput["default"];
      return this.apiClient.callApi('/gateway-create-producer-ping', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/GatewayCreateProducerPing} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayCreateProducerPingOutput}
     */

  }, {
    key: "gatewayCreateProducerPing",
    value: function gatewayCreateProducerPing(body) {
      return this.gatewayCreateProducerPingWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/GatewayCreateProducerPostgreSQL} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayCreateProducerPostgreSQLOutput} and HTTP response
     */

  }, {
    key: "gatewayCreateProducerPostgreSQLWithHttpInfo",
    value: function gatewayCreateProducerPostgreSQLWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayCreateProducerPostgreSQL");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GatewayCreateProducerPostgreSQLOutput["default"];
      return this.apiClient.callApi('/gateway-create-producer-postgresql', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/GatewayCreateProducerPostgreSQL} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayCreateProducerPostgreSQLOutput}
     */

  }, {
    key: "gatewayCreateProducerPostgreSQL",
    value: function gatewayCreateProducerPostgreSQL(body) {
      return this.gatewayCreateProducerPostgreSQLWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/GatewayCreateProducerRabbitMQ} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayCreateProducerRabbitMQOutput} and HTTP response
     */

  }, {
    key: "gatewayCreateProducerRabbitMQWithHttpInfo",
    value: function gatewayCreateProducerRabbitMQWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayCreateProducerRabbitMQ");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GatewayCreateProducerRabbitMQOutput["default"];
      return this.apiClient.callApi('/gateway-create-producer-rabbitmq', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/GatewayCreateProducerRabbitMQ} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayCreateProducerRabbitMQOutput}
     */

  }, {
    key: "gatewayCreateProducerRabbitMQ",
    value: function gatewayCreateProducerRabbitMQ(body) {
      return this.gatewayCreateProducerRabbitMQWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/GatewayCreateProducerRdp} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayCreateProducerRdpOutput} and HTTP response
     */

  }, {
    key: "gatewayCreateProducerRdpWithHttpInfo",
    value: function gatewayCreateProducerRdpWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayCreateProducerRdp");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GatewayCreateProducerRdpOutput["default"];
      return this.apiClient.callApi('/gateway-create-producer-rdp', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/GatewayCreateProducerRdp} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayCreateProducerRdpOutput}
     */

  }, {
    key: "gatewayCreateProducerRdp",
    value: function gatewayCreateProducerRdp(body) {
      return this.gatewayCreateProducerRdpWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/GatewayCreateProducerRedis} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayCreateProducerRedisOutput} and HTTP response
     */

  }, {
    key: "gatewayCreateProducerRedisWithHttpInfo",
    value: function gatewayCreateProducerRedisWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayCreateProducerRedis");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GatewayCreateProducerRedisOutput["default"];
      return this.apiClient.callApi('/gateway-create-producer-Redis', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/GatewayCreateProducerRedis} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayCreateProducerRedisOutput}
     */

  }, {
    key: "gatewayCreateProducerRedis",
    value: function gatewayCreateProducerRedis(body) {
      return this.gatewayCreateProducerRedisWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/GatewayCreateProducerRedshift} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayCreateProducerRedshiftOutput} and HTTP response
     */

  }, {
    key: "gatewayCreateProducerRedshiftWithHttpInfo",
    value: function gatewayCreateProducerRedshiftWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayCreateProducerRedshift");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GatewayCreateProducerRedshiftOutput["default"];
      return this.apiClient.callApi('/gateway-create-producer-redshift', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/GatewayCreateProducerRedshift} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayCreateProducerRedshiftOutput}
     */

  }, {
    key: "gatewayCreateProducerRedshift",
    value: function gatewayCreateProducerRedshift(body) {
      return this.gatewayCreateProducerRedshiftWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/GatewayCreateProducerSnowflake} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayCreateProducerSnowflakeOutput} and HTTP response
     */

  }, {
    key: "gatewayCreateProducerSnowflakeWithHttpInfo",
    value: function gatewayCreateProducerSnowflakeWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayCreateProducerSnowflake");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GatewayCreateProducerSnowflakeOutput["default"];
      return this.apiClient.callApi('/gateway-create-producer-snowflake', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/GatewayCreateProducerSnowflake} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayCreateProducerSnowflakeOutput}
     */

  }, {
    key: "gatewayCreateProducerSnowflake",
    value: function gatewayCreateProducerSnowflake(body) {
      return this.gatewayCreateProducerSnowflakeWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/GatewayDeleteAllowedAccess} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayDeleteAllowedAccessOutput} and HTTP response
     */

  }, {
    key: "gatewayDeleteAllowedAccessWithHttpInfo",
    value: function gatewayDeleteAllowedAccessWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayDeleteAllowedAccess");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GatewayDeleteAllowedAccessOutput["default"];
      return this.apiClient.callApi('/gateway-delete-allowed-access', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/GatewayDeleteAllowedAccess} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayDeleteAllowedAccessOutput}
     */

  }, {
    key: "gatewayDeleteAllowedAccess",
    value: function gatewayDeleteAllowedAccess(body) {
      return this.gatewayDeleteAllowedAccessWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/GatewayDeleteK8SAuthConfig} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayDeleteK8SAuthConfigOutput} and HTTP response
     */

  }, {
    key: "gatewayDeleteK8SAuthConfigWithHttpInfo",
    value: function gatewayDeleteK8SAuthConfigWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayDeleteK8SAuthConfig");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GatewayDeleteK8SAuthConfigOutput["default"];
      return this.apiClient.callApi('/gateway-delete-k8s-auth-config', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/GatewayDeleteK8SAuthConfig} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayDeleteK8SAuthConfigOutput}
     */

  }, {
    key: "gatewayDeleteK8SAuthConfig",
    value: function gatewayDeleteK8SAuthConfig(body) {
      return this.gatewayDeleteK8SAuthConfigWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/GatewayDeleteMigration} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayMigrationDeleteOutput} and HTTP response
     */

  }, {
    key: "gatewayDeleteMigrationWithHttpInfo",
    value: function gatewayDeleteMigrationWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayDeleteMigration");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GatewayMigrationDeleteOutput["default"];
      return this.apiClient.callApi('/gateway-delete-migration', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/GatewayDeleteMigration} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayMigrationDeleteOutput}
     */

  }, {
    key: "gatewayDeleteMigration",
    value: function gatewayDeleteMigration(body) {
      return this.gatewayDeleteMigrationWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/GatewayDeleteProducer} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayDeleteProducerOutput} and HTTP response
     */

  }, {
    key: "gatewayDeleteProducerWithHttpInfo",
    value: function gatewayDeleteProducerWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayDeleteProducer");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GatewayDeleteProducerOutput["default"];
      return this.apiClient.callApi('/gateway-delete-producer', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/GatewayDeleteProducer} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayDeleteProducerOutput}
     */

  }, {
    key: "gatewayDeleteProducer",
    value: function gatewayDeleteProducer(body) {
      return this.gatewayDeleteProducerWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/GatewayDownloadCustomerFragments} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayDownloadCustomerFragmentsOutput} and HTTP response
     */

  }, {
    key: "gatewayDownloadCustomerFragmentsWithHttpInfo",
    value: function gatewayDownloadCustomerFragmentsWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayDownloadCustomerFragments");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GatewayDownloadCustomerFragmentsOutput["default"];
      return this.apiClient.callApi('/gateway-download-customer-fragments', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/GatewayDownloadCustomerFragments} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayDownloadCustomerFragmentsOutput}
     */

  }, {
    key: "gatewayDownloadCustomerFragments",
    value: function gatewayDownloadCustomerFragments(body) {
      return this.gatewayDownloadCustomerFragmentsWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/GatewayGetAllowedAccess} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AllowedAccess} and HTTP response
     */

  }, {
    key: "gatewayGetAllowedAccessWithHttpInfo",
    value: function gatewayGetAllowedAccessWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayGetAllowedAccess");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _AllowedAccess["default"];
      return this.apiClient.callApi('/gateway-get-allowed-access', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/GatewayGetAllowedAccess} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AllowedAccess}
     */

  }, {
    key: "gatewayGetAllowedAccess",
    value: function gatewayGetAllowedAccess(body) {
      return this.gatewayGetAllowedAccessWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/GatewayGetConfig} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AkeylessGatewayConfig} and HTTP response
     */

  }, {
    key: "gatewayGetConfigWithHttpInfo",
    value: function gatewayGetConfigWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayGetConfig");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _AkeylessGatewayConfig["default"];
      return this.apiClient.callApi('/gateway-get-config', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/GatewayGetConfig} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AkeylessGatewayConfig}
     */

  }, {
    key: "gatewayGetConfig",
    value: function gatewayGetConfig(body) {
      return this.gatewayGetConfigWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/GatewayGetK8SAuthConfig} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayGetK8SAuthConfigOutput} and HTTP response
     */

  }, {
    key: "gatewayGetK8SAuthConfigWithHttpInfo",
    value: function gatewayGetK8SAuthConfigWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayGetK8SAuthConfig");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GatewayGetK8SAuthConfigOutput["default"];
      return this.apiClient.callApi('/gateway-get-k8s-auth-config', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/GatewayGetK8SAuthConfig} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayGetK8SAuthConfigOutput}
     */

  }, {
    key: "gatewayGetK8SAuthConfig",
    value: function gatewayGetK8SAuthConfig(body) {
      return this.gatewayGetK8SAuthConfigWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/GatewayGetLdapAuthConfig} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayGetLdapAuthConfigOutput} and HTTP response
     */

  }, {
    key: "gatewayGetLdapAuthConfigWithHttpInfo",
    value: function gatewayGetLdapAuthConfigWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayGetLdapAuthConfig");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GatewayGetLdapAuthConfigOutput["default"];
      return this.apiClient.callApi('/gateway-get-ldap-auth-config', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/GatewayGetLdapAuthConfig} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayGetLdapAuthConfigOutput}
     */

  }, {
    key: "gatewayGetLdapAuthConfig",
    value: function gatewayGetLdapAuthConfig(body) {
      return this.gatewayGetLdapAuthConfigWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/GatewayGetMigration} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayMigrationGetOutput} and HTTP response
     */

  }, {
    key: "gatewayGetMigrationWithHttpInfo",
    value: function gatewayGetMigrationWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayGetMigration");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GatewayMigrationGetOutput["default"];
      return this.apiClient.callApi('/gateway-get-migration', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/GatewayGetMigration} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayMigrationGetOutput}
     */

  }, {
    key: "gatewayGetMigration",
    value: function gatewayGetMigration(body) {
      return this.gatewayGetMigrationWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/GatewayGetProducer} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DSProducerDetails} and HTTP response
     */

  }, {
    key: "gatewayGetProducerWithHttpInfo",
    value: function gatewayGetProducerWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayGetProducer");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _DSProducerDetails["default"];
      return this.apiClient.callApi('/gateway-get-producer', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/GatewayGetProducer} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DSProducerDetails}
     */

  }, {
    key: "gatewayGetProducer",
    value: function gatewayGetProducer(body) {
      return this.gatewayGetProducerWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/GatewayGetTmpUsers} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/TmpUserData>} and HTTP response
     */

  }, {
    key: "gatewayGetTmpUsersWithHttpInfo",
    value: function gatewayGetTmpUsersWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayGetTmpUsers");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [_TmpUserData["default"]];
      return this.apiClient.callApi('/gateway-get-producer-tmp-creds', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/GatewayGetTmpUsers} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/TmpUserData>}
     */

  }, {
    key: "gatewayGetTmpUsers",
    value: function gatewayGetTmpUsers(body) {
      return this.gatewayGetTmpUsersWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/GatewayListMigration} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayMigrationListOutput} and HTTP response
     */

  }, {
    key: "gatewayListMigrationWithHttpInfo",
    value: function gatewayListMigrationWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayListMigration");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GatewayMigrationListOutput["default"];
      return this.apiClient.callApi('/gateway-list-migration', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/GatewayListMigration} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayMigrationListOutput}
     */

  }, {
    key: "gatewayListMigration",
    value: function gatewayListMigration(body) {
      return this.gatewayListMigrationWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/GatewayListProducers} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetProducersListReplyObj} and HTTP response
     */

  }, {
    key: "gatewayListProducersWithHttpInfo",
    value: function gatewayListProducersWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayListProducers");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GetProducersListReplyObj["default"];
      return this.apiClient.callApi('/gateway-list-producers', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/GatewayListProducers} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetProducersListReplyObj}
     */

  }, {
    key: "gatewayListProducers",
    value: function gatewayListProducers(body) {
      return this.gatewayListProducersWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/GatewayListRotatedSecrets} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListItemsOutput} and HTTP response
     */

  }, {
    key: "gatewayListRotatedSecretsWithHttpInfo",
    value: function gatewayListRotatedSecretsWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayListRotatedSecrets");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _ListItemsOutput["default"];
      return this.apiClient.callApi('/gateway-list-rotated-secrets', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/GatewayListRotatedSecrets} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListItemsOutput}
     */

  }, {
    key: "gatewayListRotatedSecrets",
    value: function gatewayListRotatedSecrets(body) {
      return this.gatewayListRotatedSecretsWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/GatewayMigratePersonalItems} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayMigratePersonalItemsOutput} and HTTP response
     */

  }, {
    key: "gatewayMigratePersonalItemsWithHttpInfo",
    value: function gatewayMigratePersonalItemsWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = opts['body'];
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GatewayMigratePersonalItemsOutput["default"];
      return this.apiClient.callApi('/gateway-migrate-personal-items', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/GatewayMigratePersonalItems} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayMigratePersonalItemsOutput}
     */

  }, {
    key: "gatewayMigratePersonalItems",
    value: function gatewayMigratePersonalItems(opts) {
      return this.gatewayMigratePersonalItemsWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/GatewayRevokeTmpUsers} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */

  }, {
    key: "gatewayRevokeTmpUsersWithHttpInfo",
    value: function gatewayRevokeTmpUsersWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayRevokeTmpUsers");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;
      return this.apiClient.callApi('/gateway-revoke-producer-tmp-creds', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/GatewayRevokeTmpUsers} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */

  }, {
    key: "gatewayRevokeTmpUsers",
    value: function gatewayRevokeTmpUsers(body) {
      return this.gatewayRevokeTmpUsersWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/GatewayStartProducer} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayStartProducerOutput} and HTTP response
     */

  }, {
    key: "gatewayStartProducerWithHttpInfo",
    value: function gatewayStartProducerWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayStartProducer");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GatewayStartProducerOutput["default"];
      return this.apiClient.callApi('/gateway-start-producer', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/GatewayStartProducer} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayStartProducerOutput}
     */

  }, {
    key: "gatewayStartProducer",
    value: function gatewayStartProducer(body) {
      return this.gatewayStartProducerWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/GatewayStatusMigration} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MigrationStatusReplyObj} and HTTP response
     */

  }, {
    key: "gatewayStatusMigrationWithHttpInfo",
    value: function gatewayStatusMigrationWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayStatusMigration");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _MigrationStatusReplyObj["default"];
      return this.apiClient.callApi('/gateway-migration-status', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/GatewayStatusMigration} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MigrationStatusReplyObj}
     */

  }, {
    key: "gatewayStatusMigration",
    value: function gatewayStatusMigration(body) {
      return this.gatewayStatusMigrationWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/GatewayStopProducer} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayStopProducerOutput} and HTTP response
     */

  }, {
    key: "gatewayStopProducerWithHttpInfo",
    value: function gatewayStopProducerWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayStopProducer");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GatewayStopProducerOutput["default"];
      return this.apiClient.callApi('/gateway-stop-producer', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/GatewayStopProducer} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayStopProducerOutput}
     */

  }, {
    key: "gatewayStopProducer",
    value: function gatewayStopProducer(body) {
      return this.gatewayStopProducerWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/GatewaySyncMigration} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayMigrationSyncOutput} and HTTP response
     */

  }, {
    key: "gatewaySyncMigrationWithHttpInfo",
    value: function gatewaySyncMigrationWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewaySyncMigration");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GatewayMigrationSyncOutput["default"];
      return this.apiClient.callApi('/gateway-sync-migration', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/GatewaySyncMigration} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayMigrationSyncOutput}
     */

  }, {
    key: "gatewaySyncMigration",
    value: function gatewaySyncMigration(body) {
      return this.gatewaySyncMigrationWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/GatewayUpdateAllowedAccess} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AllowedAccess} and HTTP response
     */

  }, {
    key: "gatewayUpdateAllowedAccessWithHttpInfo",
    value: function gatewayUpdateAllowedAccessWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayUpdateAllowedAccess");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _AllowedAccess["default"];
      return this.apiClient.callApi('/gateway-update-allowed-access', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/GatewayUpdateAllowedAccess} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AllowedAccess}
     */

  }, {
    key: "gatewayUpdateAllowedAccess",
    value: function gatewayUpdateAllowedAccess(body) {
      return this.gatewayUpdateAllowedAccessWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/GatewayUpdateItem} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayUpdateItemOutput} and HTTP response
     */

  }, {
    key: "gatewayUpdateItemWithHttpInfo",
    value: function gatewayUpdateItemWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayUpdateItem");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GatewayUpdateItemOutput["default"];
      return this.apiClient.callApi('/gateway-update-item', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/GatewayUpdateItem} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayUpdateItemOutput}
     */

  }, {
    key: "gatewayUpdateItem",
    value: function gatewayUpdateItem(body) {
      return this.gatewayUpdateItemWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/GatewayUpdateK8SAuthConfig} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayUpdateK8SAuthConfigOutput} and HTTP response
     */

  }, {
    key: "gatewayUpdateK8SAuthConfigWithHttpInfo",
    value: function gatewayUpdateK8SAuthConfigWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayUpdateK8SAuthConfig");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GatewayUpdateK8SAuthConfigOutput["default"];
      return this.apiClient.callApi('/gateway-update-k8s-auth-config', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/GatewayUpdateK8SAuthConfig} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayUpdateK8SAuthConfigOutput}
     */

  }, {
    key: "gatewayUpdateK8SAuthConfig",
    value: function gatewayUpdateK8SAuthConfig(body) {
      return this.gatewayUpdateK8SAuthConfigWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/GatewayUpdateLdapAuthConfig} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayUpdateLdapAuthConfigOutput} and HTTP response
     */

  }, {
    key: "gatewayUpdateLdapAuthConfigWithHttpInfo",
    value: function gatewayUpdateLdapAuthConfigWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayUpdateLdapAuthConfig");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GatewayUpdateLdapAuthConfigOutput["default"];
      return this.apiClient.callApi('/gateway-update-ldap-auth-config', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/GatewayUpdateLdapAuthConfig} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayUpdateLdapAuthConfigOutput}
     */

  }, {
    key: "gatewayUpdateLdapAuthConfig",
    value: function gatewayUpdateLdapAuthConfig(body) {
      return this.gatewayUpdateLdapAuthConfigWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/GatewayUpdateMigration} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayMigrationUpdateOutput} and HTTP response
     */

  }, {
    key: "gatewayUpdateMigrationWithHttpInfo",
    value: function gatewayUpdateMigrationWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayUpdateMigration");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GatewayMigrationUpdateOutput["default"];
      return this.apiClient.callApi('/gateway-update-migration', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/GatewayUpdateMigration} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayMigrationUpdateOutput}
     */

  }, {
    key: "gatewayUpdateMigration",
    value: function gatewayUpdateMigration(body) {
      return this.gatewayUpdateMigrationWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/GatewayUpdateProducerArtifactory} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayUpdateProducerArtifactoryOutput} and HTTP response
     */

  }, {
    key: "gatewayUpdateProducerArtifactoryWithHttpInfo",
    value: function gatewayUpdateProducerArtifactoryWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayUpdateProducerArtifactory");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GatewayUpdateProducerArtifactoryOutput["default"];
      return this.apiClient.callApi('/gateway-update-producer-artifactory', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/GatewayUpdateProducerArtifactory} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayUpdateProducerArtifactoryOutput}
     */

  }, {
    key: "gatewayUpdateProducerArtifactory",
    value: function gatewayUpdateProducerArtifactory(body) {
      return this.gatewayUpdateProducerArtifactoryWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/GatewayUpdateProducerAws} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayUpdateProducerAwsOutput} and HTTP response
     */

  }, {
    key: "gatewayUpdateProducerAwsWithHttpInfo",
    value: function gatewayUpdateProducerAwsWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayUpdateProducerAws");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GatewayUpdateProducerAwsOutput["default"];
      return this.apiClient.callApi('/gateway-update-producer-aws', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/GatewayUpdateProducerAws} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayUpdateProducerAwsOutput}
     */

  }, {
    key: "gatewayUpdateProducerAws",
    value: function gatewayUpdateProducerAws(body) {
      return this.gatewayUpdateProducerAwsWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/GatewayUpdateProducerAzure} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayUpdateProducerAzureOutput} and HTTP response
     */

  }, {
    key: "gatewayUpdateProducerAzureWithHttpInfo",
    value: function gatewayUpdateProducerAzureWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayUpdateProducerAzure");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GatewayUpdateProducerAzureOutput["default"];
      return this.apiClient.callApi('/gateway-update-producer-azure', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/GatewayUpdateProducerAzure} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayUpdateProducerAzureOutput}
     */

  }, {
    key: "gatewayUpdateProducerAzure",
    value: function gatewayUpdateProducerAzure(body) {
      return this.gatewayUpdateProducerAzureWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/GatewayUpdateProducerCassandra} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayUpdateProducerCassandraOutput} and HTTP response
     */

  }, {
    key: "gatewayUpdateProducerCassandraWithHttpInfo",
    value: function gatewayUpdateProducerCassandraWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayUpdateProducerCassandra");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GatewayUpdateProducerCassandraOutput["default"];
      return this.apiClient.callApi('/gateway-update-producer-cassandra', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/GatewayUpdateProducerCassandra} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayUpdateProducerCassandraOutput}
     */

  }, {
    key: "gatewayUpdateProducerCassandra",
    value: function gatewayUpdateProducerCassandra(body) {
      return this.gatewayUpdateProducerCassandraWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/GatewayUpdateProducerCertificateAutomation} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayUpdateProducerCertificateAutomationOutput} and HTTP response
     */

  }, {
    key: "gatewayUpdateProducerCertificateAutomationWithHttpInfo",
    value: function gatewayUpdateProducerCertificateAutomationWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayUpdateProducerCertificateAutomation");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GatewayUpdateProducerCertificateAutomationOutput["default"];
      return this.apiClient.callApi('/gateway-update-producer-certificate-automation', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/GatewayUpdateProducerCertificateAutomation} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayUpdateProducerCertificateAutomationOutput}
     */

  }, {
    key: "gatewayUpdateProducerCertificateAutomation",
    value: function gatewayUpdateProducerCertificateAutomation(body) {
      return this.gatewayUpdateProducerCertificateAutomationWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/GatewayUpdateProducerCustom} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayUpdateProducerCustomOutput} and HTTP response
     */

  }, {
    key: "gatewayUpdateProducerCustomWithHttpInfo",
    value: function gatewayUpdateProducerCustomWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = opts['body'];
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GatewayUpdateProducerCustomOutput["default"];
      return this.apiClient.callApi('/gateway-update-producer-custom', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/GatewayUpdateProducerCustom} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayUpdateProducerCustomOutput}
     */

  }, {
    key: "gatewayUpdateProducerCustom",
    value: function gatewayUpdateProducerCustom(opts) {
      return this.gatewayUpdateProducerCustomWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/GatewayUpdateProducerDockerhub} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayUpdateProducerDockerhubOutput} and HTTP response
     */

  }, {
    key: "gatewayUpdateProducerDockerhubWithHttpInfo",
    value: function gatewayUpdateProducerDockerhubWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayUpdateProducerDockerhub");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GatewayUpdateProducerDockerhubOutput["default"];
      return this.apiClient.callApi('/gateway-update-producer-dockerhub', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/GatewayUpdateProducerDockerhub} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayUpdateProducerDockerhubOutput}
     */

  }, {
    key: "gatewayUpdateProducerDockerhub",
    value: function gatewayUpdateProducerDockerhub(body) {
      return this.gatewayUpdateProducerDockerhubWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/GatewayUpdateProducerEks} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayUpdateProducerEksOutput} and HTTP response
     */

  }, {
    key: "gatewayUpdateProducerEksWithHttpInfo",
    value: function gatewayUpdateProducerEksWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayUpdateProducerEks");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GatewayUpdateProducerEksOutput["default"];
      return this.apiClient.callApi('/gateway-update-producer-eks', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/GatewayUpdateProducerEks} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayUpdateProducerEksOutput}
     */

  }, {
    key: "gatewayUpdateProducerEks",
    value: function gatewayUpdateProducerEks(body) {
      return this.gatewayUpdateProducerEksWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/GatewayUpdateProducerGcp} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayUpdateProducerGcpOutput} and HTTP response
     */

  }, {
    key: "gatewayUpdateProducerGcpWithHttpInfo",
    value: function gatewayUpdateProducerGcpWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayUpdateProducerGcp");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GatewayUpdateProducerGcpOutput["default"];
      return this.apiClient.callApi('/gateway-update-producer-gcp', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/GatewayUpdateProducerGcp} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayUpdateProducerGcpOutput}
     */

  }, {
    key: "gatewayUpdateProducerGcp",
    value: function gatewayUpdateProducerGcp(body) {
      return this.gatewayUpdateProducerGcpWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/GatewayUpdateProducerGithub} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayUpdateProducerGithubOutput} and HTTP response
     */

  }, {
    key: "gatewayUpdateProducerGithubWithHttpInfo",
    value: function gatewayUpdateProducerGithubWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayUpdateProducerGithub");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GatewayUpdateProducerGithubOutput["default"];
      return this.apiClient.callApi('/gateway-update-producer-github', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/GatewayUpdateProducerGithub} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayUpdateProducerGithubOutput}
     */

  }, {
    key: "gatewayUpdateProducerGithub",
    value: function gatewayUpdateProducerGithub(body) {
      return this.gatewayUpdateProducerGithubWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/GatewayUpdateProducerGke} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayUpdateProducerGkeOutput} and HTTP response
     */

  }, {
    key: "gatewayUpdateProducerGkeWithHttpInfo",
    value: function gatewayUpdateProducerGkeWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayUpdateProducerGke");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GatewayUpdateProducerGkeOutput["default"];
      return this.apiClient.callApi('/gateway-update-producer-gke', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/GatewayUpdateProducerGke} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayUpdateProducerGkeOutput}
     */

  }, {
    key: "gatewayUpdateProducerGke",
    value: function gatewayUpdateProducerGke(body) {
      return this.gatewayUpdateProducerGkeWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/GatewayUpdateProducerHanaDb} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayUpdateProducerHanaDbOutput} and HTTP response
     */

  }, {
    key: "gatewayUpdateProducerHanaDbWithHttpInfo",
    value: function gatewayUpdateProducerHanaDbWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayUpdateProducerHanaDb");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GatewayUpdateProducerHanaDbOutput["default"];
      return this.apiClient.callApi('/gateway-update-producer-hana', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/GatewayUpdateProducerHanaDb} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayUpdateProducerHanaDbOutput}
     */

  }, {
    key: "gatewayUpdateProducerHanaDb",
    value: function gatewayUpdateProducerHanaDb(body) {
      return this.gatewayUpdateProducerHanaDbWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/GatewayUpdateProducerLdap} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayUpdateProducerLdapOutput} and HTTP response
     */

  }, {
    key: "gatewayUpdateProducerLdapWithHttpInfo",
    value: function gatewayUpdateProducerLdapWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayUpdateProducerLdap");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GatewayUpdateProducerLdapOutput["default"];
      return this.apiClient.callApi('/gateway-update-producer-ldap', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/GatewayUpdateProducerLdap} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayUpdateProducerLdapOutput}
     */

  }, {
    key: "gatewayUpdateProducerLdap",
    value: function gatewayUpdateProducerLdap(body) {
      return this.gatewayUpdateProducerLdapWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/GatewayUpdateProducerMSSQL} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayUpdateProducerMSSQLOutput} and HTTP response
     */

  }, {
    key: "gatewayUpdateProducerMSSQLWithHttpInfo",
    value: function gatewayUpdateProducerMSSQLWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayUpdateProducerMSSQL");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GatewayUpdateProducerMSSQLOutput["default"];
      return this.apiClient.callApi('/gateway-update-producer-mssql', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/GatewayUpdateProducerMSSQL} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayUpdateProducerMSSQLOutput}
     */

  }, {
    key: "gatewayUpdateProducerMSSQL",
    value: function gatewayUpdateProducerMSSQL(body) {
      return this.gatewayUpdateProducerMSSQLWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/GatewayUpdateProducerMongo} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayUpdateProducerMongoOutput} and HTTP response
     */

  }, {
    key: "gatewayUpdateProducerMongoWithHttpInfo",
    value: function gatewayUpdateProducerMongoWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayUpdateProducerMongo");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GatewayUpdateProducerMongoOutput["default"];
      return this.apiClient.callApi('/gateway-update-producer-mongo', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/GatewayUpdateProducerMongo} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayUpdateProducerMongoOutput}
     */

  }, {
    key: "gatewayUpdateProducerMongo",
    value: function gatewayUpdateProducerMongo(body) {
      return this.gatewayUpdateProducerMongoWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/GatewayUpdateProducerMySQL} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayUpdateProducerMySQLOutput} and HTTP response
     */

  }, {
    key: "gatewayUpdateProducerMySQLWithHttpInfo",
    value: function gatewayUpdateProducerMySQLWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayUpdateProducerMySQL");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GatewayUpdateProducerMySQLOutput["default"];
      return this.apiClient.callApi('/gateway-update-producer-mysql', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/GatewayUpdateProducerMySQL} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayUpdateProducerMySQLOutput}
     */

  }, {
    key: "gatewayUpdateProducerMySQL",
    value: function gatewayUpdateProducerMySQL(body) {
      return this.gatewayUpdateProducerMySQLWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/GatewayUpdateProducerNativeK8S} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayUpdateProducerNativeK8SOutput} and HTTP response
     */

  }, {
    key: "gatewayUpdateProducerNativeK8SWithHttpInfo",
    value: function gatewayUpdateProducerNativeK8SWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayUpdateProducerNativeK8S");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GatewayUpdateProducerNativeK8SOutput["default"];
      return this.apiClient.callApi('/gateway-update-producer-k8s', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/GatewayUpdateProducerNativeK8S} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayUpdateProducerNativeK8SOutput}
     */

  }, {
    key: "gatewayUpdateProducerNativeK8S",
    value: function gatewayUpdateProducerNativeK8S(body) {
      return this.gatewayUpdateProducerNativeK8SWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/GatewayUpdateProducerOracleDb} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayUpdateProducerOracleDbOutput} and HTTP response
     */

  }, {
    key: "gatewayUpdateProducerOracleDbWithHttpInfo",
    value: function gatewayUpdateProducerOracleDbWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayUpdateProducerOracleDb");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GatewayUpdateProducerOracleDbOutput["default"];
      return this.apiClient.callApi('/gateway-update-producer-oracle', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/GatewayUpdateProducerOracleDb} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayUpdateProducerOracleDbOutput}
     */

  }, {
    key: "gatewayUpdateProducerOracleDb",
    value: function gatewayUpdateProducerOracleDb(body) {
      return this.gatewayUpdateProducerOracleDbWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/GatewayUpdateProducerPing} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayUpdateProducerPingOutput} and HTTP response
     */

  }, {
    key: "gatewayUpdateProducerPingWithHttpInfo",
    value: function gatewayUpdateProducerPingWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayUpdateProducerPing");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GatewayUpdateProducerPingOutput["default"];
      return this.apiClient.callApi('/gateway-update-producer-ping', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/GatewayUpdateProducerPing} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayUpdateProducerPingOutput}
     */

  }, {
    key: "gatewayUpdateProducerPing",
    value: function gatewayUpdateProducerPing(body) {
      return this.gatewayUpdateProducerPingWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/GatewayUpdateProducerPostgreSQL} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayUpdateProducerPostgreSQLOutput} and HTTP response
     */

  }, {
    key: "gatewayUpdateProducerPostgreSQLWithHttpInfo",
    value: function gatewayUpdateProducerPostgreSQLWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayUpdateProducerPostgreSQL");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GatewayUpdateProducerPostgreSQLOutput["default"];
      return this.apiClient.callApi('/gateway-update-producer-postgresql', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/GatewayUpdateProducerPostgreSQL} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayUpdateProducerPostgreSQLOutput}
     */

  }, {
    key: "gatewayUpdateProducerPostgreSQL",
    value: function gatewayUpdateProducerPostgreSQL(body) {
      return this.gatewayUpdateProducerPostgreSQLWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/GatewayUpdateProducerRabbitMQ} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayUpdateProducerRabbitMQOutput} and HTTP response
     */

  }, {
    key: "gatewayUpdateProducerRabbitMQWithHttpInfo",
    value: function gatewayUpdateProducerRabbitMQWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayUpdateProducerRabbitMQ");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GatewayUpdateProducerRabbitMQOutput["default"];
      return this.apiClient.callApi('/gateway-update-producer-rabbitmq', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/GatewayUpdateProducerRabbitMQ} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayUpdateProducerRabbitMQOutput}
     */

  }, {
    key: "gatewayUpdateProducerRabbitMQ",
    value: function gatewayUpdateProducerRabbitMQ(body) {
      return this.gatewayUpdateProducerRabbitMQWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/GatewayUpdateProducerRdp} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayUpdateProducerRdpOutput} and HTTP response
     */

  }, {
    key: "gatewayUpdateProducerRdpWithHttpInfo",
    value: function gatewayUpdateProducerRdpWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayUpdateProducerRdp");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GatewayUpdateProducerRdpOutput["default"];
      return this.apiClient.callApi('/gateway-update-producer-rdp', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/GatewayUpdateProducerRdp} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayUpdateProducerRdpOutput}
     */

  }, {
    key: "gatewayUpdateProducerRdp",
    value: function gatewayUpdateProducerRdp(body) {
      return this.gatewayUpdateProducerRdpWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/GatewayUpdateProducerRedis} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayUpdateProducerRedisOutput} and HTTP response
     */

  }, {
    key: "gatewayUpdateProducerRedisWithHttpInfo",
    value: function gatewayUpdateProducerRedisWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayUpdateProducerRedis");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GatewayUpdateProducerRedisOutput["default"];
      return this.apiClient.callApi('/gateway-update-producer-redis', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/GatewayUpdateProducerRedis} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayUpdateProducerRedisOutput}
     */

  }, {
    key: "gatewayUpdateProducerRedis",
    value: function gatewayUpdateProducerRedis(body) {
      return this.gatewayUpdateProducerRedisWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/GatewayUpdateProducerRedshift} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayUpdateProducerRedshiftOutput} and HTTP response
     */

  }, {
    key: "gatewayUpdateProducerRedshiftWithHttpInfo",
    value: function gatewayUpdateProducerRedshiftWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayUpdateProducerRedshift");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GatewayUpdateProducerRedshiftOutput["default"];
      return this.apiClient.callApi('/gateway-update-producer-redshift', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/GatewayUpdateProducerRedshift} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayUpdateProducerRedshiftOutput}
     */

  }, {
    key: "gatewayUpdateProducerRedshift",
    value: function gatewayUpdateProducerRedshift(body) {
      return this.gatewayUpdateProducerRedshiftWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/GatewayUpdateProducerSnowflake} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayUpdateProducerSnowflakeOutput} and HTTP response
     */

  }, {
    key: "gatewayUpdateProducerSnowflakeWithHttpInfo",
    value: function gatewayUpdateProducerSnowflakeWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayUpdateProducerSnowflake");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GatewayUpdateProducerSnowflakeOutput["default"];
      return this.apiClient.callApi('/gateway-update-producer-snowflake', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/GatewayUpdateProducerSnowflake} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayUpdateProducerSnowflakeOutput}
     */

  }, {
    key: "gatewayUpdateProducerSnowflake",
    value: function gatewayUpdateProducerSnowflake(body) {
      return this.gatewayUpdateProducerSnowflakeWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/GatewayUpdateTlsCert} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayUpdateTlsCertOutput} and HTTP response
     */

  }, {
    key: "gatewayUpdateTlsCertWithHttpInfo",
    value: function gatewayUpdateTlsCertWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayUpdateTlsCert");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GatewayUpdateTlsCertOutput["default"];
      return this.apiClient.callApi('/gateway-update-tls-cert', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/GatewayUpdateTlsCert} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayUpdateTlsCertOutput}
     */

  }, {
    key: "gatewayUpdateTlsCert",
    value: function gatewayUpdateTlsCert(body) {
      return this.gatewayUpdateTlsCertWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/GatewayUpdateTmpUsers} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */

  }, {
    key: "gatewayUpdateTmpUsersWithHttpInfo",
    value: function gatewayUpdateTmpUsersWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayUpdateTmpUsers");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;
      return this.apiClient.callApi('/gateway-update-producer-tmp-creds', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/GatewayUpdateTmpUsers} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */

  }, {
    key: "gatewayUpdateTmpUsers",
    value: function gatewayUpdateTmpUsers(body) {
      return this.gatewayUpdateTmpUsersWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/GenerateCsr} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GenerateCsrOutput} and HTTP response
     */

  }, {
    key: "generateCsrWithHttpInfo",
    value: function generateCsrWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling generateCsr");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GenerateCsrOutput["default"];
      return this.apiClient.callApi('/generate-csr', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/GenerateCsr} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GenerateCsrOutput}
     */

  }, {
    key: "generateCsr",
    value: function generateCsr(body) {
      return this.generateCsrWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: String}>} and HTTP response
     */

  }, {
    key: "getAccountLogoWithHttpInfo",
    value: function getAccountLogoWithHttpInfo() {
      var postBody = null;
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = {
        'String': 'String'
      };
      return this.apiClient.callApi('/get-account-logo', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: String}>}
     */

  }, {
    key: "getAccountLogo",
    value: function getAccountLogo() {
      return this.getAccountLogoWithHttpInfo().then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/GetAccountSettings} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetAccountSettingsCommandOutput} and HTTP response
     */

  }, {
    key: "getAccountSettingsWithHttpInfo",
    value: function getAccountSettingsWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling getAccountSettings");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GetAccountSettingsCommandOutput["default"];
      return this.apiClient.callApi('/get-account-settings', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/GetAccountSettings} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetAccountSettingsCommandOutput}
     */

  }, {
    key: "getAccountSettings",
    value: function getAccountSettings(body) {
      return this.getAccountSettingsWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/GetAuthMethod} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AuthMethod} and HTTP response
     */

  }, {
    key: "getAuthMethodWithHttpInfo",
    value: function getAuthMethodWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling getAuthMethod");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _AuthMethod["default"];
      return this.apiClient.callApi('/get-auth-method', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/GetAuthMethod} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AuthMethod}
     */

  }, {
    key: "getAuthMethod",
    value: function getAuthMethod(body) {
      return this.getAuthMethodWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/GetCertificateValue} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetCertificateValueOutput} and HTTP response
     */

  }, {
    key: "getCertificateValueWithHttpInfo",
    value: function getCertificateValueWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling getCertificateValue");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GetCertificateValueOutput["default"];
      return this.apiClient.callApi('/get-certificate-value', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/GetCertificateValue} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetCertificateValueOutput}
     */

  }, {
    key: "getCertificateValue",
    value: function getCertificateValue(body) {
      return this.getCertificateValueWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/GetDynamicSecretValue} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: String}>} and HTTP response
     */

  }, {
    key: "getDynamicSecretValueWithHttpInfo",
    value: function getDynamicSecretValueWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling getDynamicSecretValue");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = {
        'String': 'String'
      };
      return this.apiClient.callApi('/get-dynamic-secret-value', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/GetDynamicSecretValue} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: String}>}
     */

  }, {
    key: "getDynamicSecretValue",
    value: function getDynamicSecretValue(body) {
      return this.getDynamicSecretValueWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/GetEventForwarder} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetEventForwarderOutput} and HTTP response
     */

  }, {
    key: "getEventForwarderWithHttpInfo",
    value: function getEventForwarderWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling getEventForwarder");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GetEventForwarderOutput["default"];
      return this.apiClient.callApi('/get-event-forwarder', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/GetEventForwarder} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetEventForwarderOutput}
     */

  }, {
    key: "getEventForwarder",
    value: function getEventForwarder(body) {
      return this.getEventForwarderWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/GetGroup} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetGroupOutput} and HTTP response
     */

  }, {
    key: "getGroupWithHttpInfo",
    value: function getGroupWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling getGroup");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GetGroupOutput["default"];
      return this.apiClient.callApi('/get-group', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/GetGroup} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetGroupOutput}
     */

  }, {
    key: "getGroup",
    value: function getGroup(body) {
      return this.getGroupWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/GetKubeExecCreds} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetKubeExecCredsOutput} and HTTP response
     */

  }, {
    key: "getKubeExecCredsWithHttpInfo",
    value: function getKubeExecCredsWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling getKubeExecCreds");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GetKubeExecCredsOutput["default"];
      return this.apiClient.callApi('/get-kube-exec-creds', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/GetKubeExecCreds} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetKubeExecCredsOutput}
     */

  }, {
    key: "getKubeExecCreds",
    value: function getKubeExecCreds(body) {
      return this.getKubeExecCredsWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/GetLastUserEventStatus} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetUserEventStatusOutput} and HTTP response
     */

  }, {
    key: "getLastUserEventStatusWithHttpInfo",
    value: function getLastUserEventStatusWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling getLastUserEventStatus");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GetUserEventStatusOutput["default"];
      return this.apiClient.callApi('/user-event-last-status', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/GetLastUserEventStatus} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetUserEventStatusOutput}
     */

  }, {
    key: "getLastUserEventStatus",
    value: function getLastUserEventStatus(body) {
      return this.getLastUserEventStatusWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/GetPKICertificate} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetPKICertificateOutput} and HTTP response
     */

  }, {
    key: "getPKICertificateWithHttpInfo",
    value: function getPKICertificateWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling getPKICertificate");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GetPKICertificateOutput["default"];
      return this.apiClient.callApi('/get-pki-certificate', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/GetPKICertificate} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetPKICertificateOutput}
     */

  }, {
    key: "getPKICertificate",
    value: function getPKICertificate(body) {
      return this.getPKICertificateWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/GetRSAPublic} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetRSAPublicOutput} and HTTP response
     */

  }, {
    key: "getRSAPublicWithHttpInfo",
    value: function getRSAPublicWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling getRSAPublic");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GetRSAPublicOutput["default"];
      return this.apiClient.callApi('/get-rsa-public', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/GetRSAPublic} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetRSAPublicOutput}
     */

  }, {
    key: "getRSAPublic",
    value: function getRSAPublic(body) {
      return this.getRSAPublicWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/GetRole} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Role} and HTTP response
     */

  }, {
    key: "getRoleWithHttpInfo",
    value: function getRoleWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling getRole");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _Role["default"];
      return this.apiClient.callApi('/get-role', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/GetRole} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Role}
     */

  }, {
    key: "getRole",
    value: function getRole(body) {
      return this.getRoleWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/GetRotatedSecretValue} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: Object}>} and HTTP response
     */

  }, {
    key: "getRotatedSecretValueWithHttpInfo",
    value: function getRotatedSecretValueWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling getRotatedSecretValue");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = {
        'String': Object
      };
      return this.apiClient.callApi('/get-rotated-secret-value', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/GetRotatedSecretValue} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: Object}>}
     */

  }, {
    key: "getRotatedSecretValue",
    value: function getRotatedSecretValue(body) {
      return this.getRotatedSecretValueWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/GetSSHCertificate} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetSSHCertificateOutput} and HTTP response
     */

  }, {
    key: "getSSHCertificateWithHttpInfo",
    value: function getSSHCertificateWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling getSSHCertificate");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GetSSHCertificateOutput["default"];
      return this.apiClient.callApi('/get-ssh-certificate', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/GetSSHCertificate} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetSSHCertificateOutput}
     */

  }, {
    key: "getSSHCertificate",
    value: function getSSHCertificate(body) {
      return this.getSSHCertificateWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/GetSecretValue} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: String}>} and HTTP response
     */

  }, {
    key: "getSecretValueWithHttpInfo",
    value: function getSecretValueWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling getSecretValue");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = {
        'String': 'String'
      };
      return this.apiClient.callApi('/get-secret-value', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/GetSecretValue} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: String}>}
     */

  }, {
    key: "getSecretValue",
    value: function getSecretValue(body) {
      return this.getSecretValueWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/GetTags} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<String>} and HTTP response
     */

  }, {
    key: "getTagsWithHttpInfo",
    value: function getTagsWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling getTags");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ['String'];
      return this.apiClient.callApi('/get-tags', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/GetTags} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<String>}
     */

  }, {
    key: "getTags",
    value: function getTags(body) {
      return this.getTagsWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/GetTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Target} and HTTP response
     */

  }, {
    key: "getTargetWithHttpInfo",
    value: function getTargetWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling getTarget");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _Target["default"];
      return this.apiClient.callApi('/get-target', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/GetTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Target}
     */

  }, {
    key: "getTarget",
    value: function getTarget(body) {
      return this.getTargetWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/GetTargetDetails} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetTargetDetailsOutput} and HTTP response
     */

  }, {
    key: "getTargetDetailsWithHttpInfo",
    value: function getTargetDetailsWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling getTargetDetails");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GetTargetDetailsOutput["default"];
      return this.apiClient.callApi('/get-target-details', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/GetTargetDetails} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetTargetDetailsOutput}
     */

  }, {
    key: "getTargetDetails",
    value: function getTargetDetails(body) {
      return this.getTargetDetailsWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/Hmac} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/HmacOutput} and HTTP response
     */

  }, {
    key: "hmacWithHttpInfo",
    value: function hmacWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling hmac");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _HmacOutput["default"];
      return this.apiClient.callApi('/hmac', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/Hmac} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/HmacOutput}
     */

  }, {
    key: "hmac",
    value: function hmac(body) {
      return this.hmacWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/ImportPasswords} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ImportPasswordsOutput} and HTTP response
     */

  }, {
    key: "importPasswordsWithHttpInfo",
    value: function importPasswordsWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling importPasswords");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _ImportPasswordsOutput["default"];
      return this.apiClient.callApi('/import-passwords', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/ImportPasswords} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ImportPasswordsOutput}
     */

  }, {
    key: "importPasswords",
    value: function importPasswords(body) {
      return this.importPasswordsWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/KmipClientDeleteRule} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/KMIPClientUpdateResponse} and HTTP response
     */

  }, {
    key: "kmipClientDeleteRuleWithHttpInfo",
    value: function kmipClientDeleteRuleWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = opts['body'];
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _KMIPClientUpdateResponse["default"];
      return this.apiClient.callApi('/kmip-client-delete-rule', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/KmipClientDeleteRule} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/KMIPClientUpdateResponse}
     */

  }, {
    key: "kmipClientDeleteRule",
    value: function kmipClientDeleteRule(opts) {
      return this.kmipClientDeleteRuleWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/KmipClientSetRule} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/KMIPClientUpdateResponse} and HTTP response
     */

  }, {
    key: "kmipClientSetRuleWithHttpInfo",
    value: function kmipClientSetRuleWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = opts['body'];
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _KMIPClientUpdateResponse["default"];
      return this.apiClient.callApi('/kmip-client-set-rule', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/KmipClientSetRule} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/KMIPClientUpdateResponse}
     */

  }, {
    key: "kmipClientSetRule",
    value: function kmipClientSetRule(opts) {
      return this.kmipClientSetRuleWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/KmipCreateClient} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/KmipCreateClientOutput} and HTTP response
     */

  }, {
    key: "kmipCreateClientWithHttpInfo",
    value: function kmipCreateClientWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = opts['body'];
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _KmipCreateClientOutput["default"];
      return this.apiClient.callApi('/kmip-create-client', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/KmipCreateClient} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/KmipCreateClientOutput}
     */

  }, {
    key: "kmipCreateClient",
    value: function kmipCreateClient(opts) {
      return this.kmipCreateClientWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/KmipDeleteClient} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */

  }, {
    key: "kmipDeleteClientWithHttpInfo",
    value: function kmipDeleteClientWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = opts['body'];
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/kmip-delete-client', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/KmipDeleteClient} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */

  }, {
    key: "kmipDeleteClient",
    value: function kmipDeleteClient(opts) {
      return this.kmipDeleteClientWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/KmipDeleteServer} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */

  }, {
    key: "kmipDeleteServerWithHttpInfo",
    value: function kmipDeleteServerWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = opts['body'];
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/kmip-delete-environment', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/KmipDeleteServer} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */

  }, {
    key: "kmipDeleteServer",
    value: function kmipDeleteServer(opts) {
      return this.kmipDeleteServerWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/KmipDescribeClient} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/KMIPClientGetResponse} and HTTP response
     */

  }, {
    key: "kmipDescribeClientWithHttpInfo",
    value: function kmipDescribeClientWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = opts['body'];
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _KMIPClientGetResponse["default"];
      return this.apiClient.callApi('/kmip-get-client', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/KmipDescribeClient} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/KMIPClientGetResponse}
     */

  }, {
    key: "kmipDescribeClient",
    value: function kmipDescribeClient(opts) {
      return this.kmipDescribeClientWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/KmipDescribeServer} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/KmipDescribeServerOutput} and HTTP response
     */

  }, {
    key: "kmipDescribeServerWithHttpInfo",
    value: function kmipDescribeServerWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = opts['body'];
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _KmipDescribeServerOutput["default"];
      return this.apiClient.callApi('/kmip-get-environment', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/KmipDescribeServer} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/KmipDescribeServerOutput}
     */

  }, {
    key: "kmipDescribeServer",
    value: function kmipDescribeServer(opts) {
      return this.kmipDescribeServerWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/KmipListClients} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/KMIPClientListResponse} and HTTP response
     */

  }, {
    key: "kmipListClientsWithHttpInfo",
    value: function kmipListClientsWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = opts['body'];
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _KMIPClientListResponse["default"];
      return this.apiClient.callApi('/kmip-list-clients', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/KmipListClients} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/KMIPClientListResponse}
     */

  }, {
    key: "kmipListClients",
    value: function kmipListClients(opts) {
      return this.kmipListClientsWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/KmipMoveServer} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/KmipMoveServerOutput} and HTTP response
     */

  }, {
    key: "kmipMoveServerWithHttpInfo",
    value: function kmipMoveServerWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = opts['body'];
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _KmipMoveServerOutput["default"];
      return this.apiClient.callApi('/kmip-move-environment', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/KmipMoveServer} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/KmipMoveServerOutput}
     */

  }, {
    key: "kmipMoveServer",
    value: function kmipMoveServer(opts) {
      return this.kmipMoveServerWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/KmipRenewClientCertificate} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/KmipRenewClientCertificateOutput} and HTTP response
     */

  }, {
    key: "kmipRenewClientCertificateWithHttpInfo",
    value: function kmipRenewClientCertificateWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = opts['body'];
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _KmipRenewClientCertificateOutput["default"];
      return this.apiClient.callApi('/kmip-renew-client', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/KmipRenewClientCertificate} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/KmipRenewClientCertificateOutput}
     */

  }, {
    key: "kmipRenewClientCertificate",
    value: function kmipRenewClientCertificate(opts) {
      return this.kmipRenewClientCertificateWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/KmipRenewServerCertificate} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/KmipRenewServerCertificateOutput} and HTTP response
     */

  }, {
    key: "kmipRenewServerCertificateWithHttpInfo",
    value: function kmipRenewServerCertificateWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = opts['body'];
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _KmipRenewServerCertificateOutput["default"];
      return this.apiClient.callApi('/kmip-renew-environment', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/KmipRenewServerCertificate} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/KmipRenewServerCertificateOutput}
     */

  }, {
    key: "kmipRenewServerCertificate",
    value: function kmipRenewServerCertificate(opts) {
      return this.kmipRenewServerCertificateWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/KmipServerSetup} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/KMIPEnvironmentCreateResponse} and HTTP response
     */

  }, {
    key: "kmipServerSetupWithHttpInfo",
    value: function kmipServerSetupWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = opts['body'];
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _KMIPEnvironmentCreateResponse["default"];
      return this.apiClient.callApi('/kmip-create-environment', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/KmipServerSetup} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/KMIPEnvironmentCreateResponse}
     */

  }, {
    key: "kmipServerSetup",
    value: function kmipServerSetup(opts) {
      return this.kmipServerSetupWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/KmipSetServerState} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/KmipSetServerStateOutput} and HTTP response
     */

  }, {
    key: "kmipSetServerStateWithHttpInfo",
    value: function kmipSetServerStateWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = opts['body'];
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _KmipSetServerStateOutput["default"];
      return this.apiClient.callApi('/kmip-set-environment-state', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/KmipSetServerState} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/KmipSetServerStateOutput}
     */

  }, {
    key: "kmipSetServerState",
    value: function kmipSetServerState(opts) {
      return this.kmipSetServerStateWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/ListAuthMethods} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListAuthMethodsOutput} and HTTP response
     */

  }, {
    key: "listAuthMethodsWithHttpInfo",
    value: function listAuthMethodsWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling listAuthMethods");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _ListAuthMethodsOutput["default"];
      return this.apiClient.callApi('/list-auth-methods', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/ListAuthMethods} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListAuthMethodsOutput}
     */

  }, {
    key: "listAuthMethods",
    value: function listAuthMethods(body) {
      return this.listAuthMethodsWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/ListGateways} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewaysListResponse} and HTTP response
     */

  }, {
    key: "listGatewaysWithHttpInfo",
    value: function listGatewaysWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling listGateways");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GatewaysListResponse["default"];
      return this.apiClient.callApi('/list-gateways', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/ListGateways} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewaysListResponse}
     */

  }, {
    key: "listGateways",
    value: function listGateways(body) {
      return this.listGatewaysWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/ListGroups} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListGroupsOutput} and HTTP response
     */

  }, {
    key: "listGroupsWithHttpInfo",
    value: function listGroupsWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling listGroups");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _ListGroupsOutput["default"];
      return this.apiClient.callApi('/list-group', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/ListGroups} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListGroupsOutput}
     */

  }, {
    key: "listGroups",
    value: function listGroups(body) {
      return this.listGroupsWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/ListItems} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListItemsInPathOutput} and HTTP response
     */

  }, {
    key: "listItemsWithHttpInfo",
    value: function listItemsWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling listItems");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _ListItemsInPathOutput["default"];
      return this.apiClient.callApi('/list-items', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/ListItems} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListItemsInPathOutput}
     */

  }, {
    key: "listItems",
    value: function listItems(body) {
      return this.listItemsWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/ListRoles} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListRolesOutput} and HTTP response
     */

  }, {
    key: "listRolesWithHttpInfo",
    value: function listRolesWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling listRoles");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _ListRolesOutput["default"];
      return this.apiClient.callApi('/list-roles', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/ListRoles} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListRolesOutput}
     */

  }, {
    key: "listRoles",
    value: function listRoles(body) {
      return this.listRolesWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/ListSRABastions} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BastionsList} and HTTP response
     */

  }, {
    key: "listSRABastionsWithHttpInfo",
    value: function listSRABastionsWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling listSRABastions");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _BastionsList["default"];
      return this.apiClient.callApi('/list-sra-bastions', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/ListSRABastions} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BastionsList}
     */

  }, {
    key: "listSRABastions",
    value: function listSRABastions(body) {
      return this.listSRABastionsWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/ListSharedItems} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */

  }, {
    key: "listSharedItemsWithHttpInfo",
    value: function listSharedItemsWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling listSharedItems");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;
      return this.apiClient.callApi('/list-shared-items', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/ListSharedItems} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */

  }, {
    key: "listSharedItems",
    value: function listSharedItems(body) {
      return this.listSharedItemsWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/ListTargets} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListTargetsOutput} and HTTP response
     */

  }, {
    key: "listTargetsWithHttpInfo",
    value: function listTargetsWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling listTargets");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _ListTargetsOutput["default"];
      return this.apiClient.callApi('/list-targets', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/ListTargets} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListTargetsOutput}
     */

  }, {
    key: "listTargets",
    value: function listTargets(body) {
      return this.listTargetsWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/MoveObjects} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */

  }, {
    key: "moveObjectsWithHttpInfo",
    value: function moveObjectsWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling moveObjects");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/move-objects', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/MoveObjects} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */

  }, {
    key: "moveObjects",
    value: function moveObjects(body) {
      return this.moveObjectsWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/RawCreds} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SystemAccessCredentialsReplyObj} and HTTP response
     */

  }, {
    key: "rawCredsWithHttpInfo",
    value: function rawCredsWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = opts['body'];
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _SystemAccessCredentialsReplyObj["default"];
      return this.apiClient.callApi('/raw-creds', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/RawCreds} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SystemAccessCredentialsReplyObj}
     */

  }, {
    key: "rawCreds",
    value: function rawCreds(opts) {
      return this.rawCredsWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/RefreshKey} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RefreshKeyOutput} and HTTP response
     */

  }, {
    key: "refreshKeyWithHttpInfo",
    value: function refreshKeyWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling refreshKey");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _RefreshKeyOutput["default"];
      return this.apiClient.callApi('/refresh-key', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/RefreshKey} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RefreshKeyOutput}
     */

  }, {
    key: "refreshKey",
    value: function refreshKey(body) {
      return this.refreshKeyWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/RequestAccess} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RequestAccessOutput} and HTTP response
     */

  }, {
    key: "requestAccessWithHttpInfo",
    value: function requestAccessWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling requestAccess");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _RequestAccessOutput["default"];
      return this.apiClient.callApi('/request-access', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/RequestAccess} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RequestAccessOutput}
     */

  }, {
    key: "requestAccess",
    value: function requestAccess(body) {
      return this.requestAccessWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/ReverseRBAC} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ReverseRBACOutput} and HTTP response
     */

  }, {
    key: "reverseRBACWithHttpInfo",
    value: function reverseRBACWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling reverseRBAC");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _ReverseRBACOutput["default"];
      return this.apiClient.callApi('/reverse-rbac', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/ReverseRBAC} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ReverseRBACOutput}
     */

  }, {
    key: "reverseRBAC",
    value: function reverseRBAC(body) {
      return this.reverseRBACWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */

  }, {
    key: "revokeCredsWithHttpInfo",
    value: function revokeCredsWithHttpInfo() {
      var postBody = null;
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/revoke-creds', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */

  }, {
    key: "revokeCreds",
    value: function revokeCreds() {
      return this.revokeCredsWithHttpInfo().then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/RollbackSecret} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RollbackSecretOutput} and HTTP response
     */

  }, {
    key: "rollbackSecretWithHttpInfo",
    value: function rollbackSecretWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling rollbackSecret");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _RollbackSecretOutput["default"];
      return this.apiClient.callApi('/rollback-secret', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/RollbackSecret} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RollbackSecretOutput}
     */

  }, {
    key: "rollbackSecret",
    value: function rollbackSecret(body) {
      return this.rollbackSecretWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/UpdateRotationSettings} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RotateKeyOutput} and HTTP response
     */

  }, {
    key: "rotateKeyWithHttpInfo",
    value: function rotateKeyWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling rotateKey");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _RotateKeyOutput["default"];
      return this.apiClient.callApi('/rotate-key', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/UpdateRotationSettings} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RotateKeyOutput}
     */

  }, {
    key: "rotateKey",
    value: function rotateKey(body) {
      return this.rotateKeyWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/RotateOidcClientSecret} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RotateOidcClientOutput} and HTTP response
     */

  }, {
    key: "rotateOidcClientSecretWithHttpInfo",
    value: function rotateOidcClientSecretWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling rotateOidcClientSecret");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _RotateOidcClientOutput["default"];
      return this.apiClient.callApi('/rotate-oidc-client-secret', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/RotateOidcClientSecret} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RotateOidcClientOutput}
     */

  }, {
    key: "rotateOidcClientSecret",
    value: function rotateOidcClientSecret(body) {
      return this.rotateOidcClientSecretWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/RotateSecret} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RotatedSecretOutput} and HTTP response
     */

  }, {
    key: "rotateSecretWithHttpInfo",
    value: function rotateSecretWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling rotateSecret");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _RotatedSecretOutput["default"];
      return this.apiClient.callApi('/gateway-rotate-secret', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/RotateSecret} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RotatedSecretOutput}
     */

  }, {
    key: "rotateSecret",
    value: function rotateSecret(body) {
      return this.rotateSecretWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/SetItemState} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */

  }, {
    key: "setItemStateWithHttpInfo",
    value: function setItemStateWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling setItemState");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/set-item-state', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/SetItemState} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */

  }, {
    key: "setItemState",
    value: function setItemState(body) {
      return this.setItemStateWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/SetRoleRule} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */

  }, {
    key: "setRoleRuleWithHttpInfo",
    value: function setRoleRuleWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling setRoleRule");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/set-role-rule', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/SetRoleRule} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */

  }, {
    key: "setRoleRule",
    value: function setRoleRule(body) {
      return this.setRoleRuleWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/ShareItem} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */

  }, {
    key: "shareItemWithHttpInfo",
    value: function shareItemWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling shareItem");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;
      return this.apiClient.callApi('/share-item', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/ShareItem} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */

  }, {
    key: "shareItem",
    value: function shareItem(body) {
      return this.shareItemWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/SignDataWithClassicKey} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SignOutput} and HTTP response
     */

  }, {
    key: "signDataWithClassicKeyWithHttpInfo",
    value: function signDataWithClassicKeyWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling signDataWithClassicKey");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _SignOutput["default"];
      return this.apiClient.callApi('/sign-data-with-classic-key', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/SignDataWithClassicKey} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SignOutput}
     */

  }, {
    key: "signDataWithClassicKey",
    value: function signDataWithClassicKey(body) {
      return this.signDataWithClassicKeyWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/SignEcDsa} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SignEcDsaOutput} and HTTP response
     */

  }, {
    key: "signEcDsaWithHttpInfo",
    value: function signEcDsaWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling signEcDsa");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _SignEcDsaOutput["default"];
      return this.apiClient.callApi('/sign-ecdsa', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/SignEcDsa} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SignEcDsaOutput}
     */

  }, {
    key: "signEcDsa",
    value: function signEcDsa(body) {
      return this.signEcDsaWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/SignGPG} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SignGPGOutput} and HTTP response
     */

  }, {
    key: "signGPGWithHttpInfo",
    value: function signGPGWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling signGPG");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _SignGPGOutput["default"];
      return this.apiClient.callApi('/sign-gpg', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/SignGPG} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SignGPGOutput}
     */

  }, {
    key: "signGPG",
    value: function signGPG(body) {
      return this.signGPGWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/SignJWTWithClassicKey} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SignJWTOutput} and HTTP response
     */

  }, {
    key: "signJWTWithClassicKeyWithHttpInfo",
    value: function signJWTWithClassicKeyWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling signJWTWithClassicKey");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _SignJWTOutput["default"];
      return this.apiClient.callApi('/sign-jwt-with-classic-key', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/SignJWTWithClassicKey} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SignJWTOutput}
     */

  }, {
    key: "signJWTWithClassicKey",
    value: function signJWTWithClassicKey(body) {
      return this.signJWTWithClassicKeyWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/SignPKCS1} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SignPKCS1Output} and HTTP response
     */

  }, {
    key: "signPKCS1WithHttpInfo",
    value: function signPKCS1WithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling signPKCS1");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _SignPKCS1Output["default"];
      return this.apiClient.callApi('/sign-pkcs1', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/SignPKCS1} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SignPKCS1Output}
     */

  }, {
    key: "signPKCS1",
    value: function signPKCS1(body) {
      return this.signPKCS1WithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/SignPKICertWithClassicKey} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SignPKICertOutput} and HTTP response
     */

  }, {
    key: "signPKICertWithClassicKeyWithHttpInfo",
    value: function signPKICertWithClassicKeyWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling signPKICertWithClassicKey");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _SignPKICertOutput["default"];
      return this.apiClient.callApi('/sign-pki-cert-with-classic-key', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/SignPKICertWithClassicKey} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SignPKICertOutput}
     */

  }, {
    key: "signPKICertWithClassicKey",
    value: function signPKICertWithClassicKey(body) {
      return this.signPKICertWithClassicKeyWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/SignRsaSsaPss} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SignRsaSsaPssOutput} and HTTP response
     */

  }, {
    key: "signRsaSsaPssWithHttpInfo",
    value: function signRsaSsaPssWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling signRsaSsaPss");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _SignRsaSsaPssOutput["default"];
      return this.apiClient.callApi('/sign-rsassa-pss', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/SignRsaSsaPss} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SignRsaSsaPssOutput}
     */

  }, {
    key: "signRsaSsaPss",
    value: function signRsaSsaPss(body) {
      return this.signRsaSsaPssWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/StaticCredsAuth} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/StaticCredsAuthOutput} and HTTP response
     */

  }, {
    key: "staticCredsAuthWithHttpInfo",
    value: function staticCredsAuthWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling staticCredsAuth");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _StaticCredsAuthOutput["default"];
      return this.apiClient.callApi('/static-creds-auth', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/StaticCredsAuth} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/StaticCredsAuthOutput}
     */

  }, {
    key: "staticCredsAuth",
    value: function staticCredsAuth(body) {
      return this.staticCredsAuthWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/Tokenize} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TokenizeOutput} and HTTP response
     */

  }, {
    key: "tokenizeWithHttpInfo",
    value: function tokenizeWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling tokenize");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _TokenizeOutput["default"];
      return this.apiClient.callApi('/tokenize', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/Tokenize} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TokenizeOutput}
     */

  }, {
    key: "tokenize",
    value: function tokenize(body) {
      return this.tokenizeWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/UidCreateChildToken} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UidCreateChildTokenOutput} and HTTP response
     */

  }, {
    key: "uidCreateChildTokenWithHttpInfo",
    value: function uidCreateChildTokenWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling uidCreateChildToken");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _UidCreateChildTokenOutput["default"];
      return this.apiClient.callApi('/uid-create-child-token', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/UidCreateChildToken} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UidCreateChildTokenOutput}
     */

  }, {
    key: "uidCreateChildToken",
    value: function uidCreateChildToken(body) {
      return this.uidCreateChildTokenWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/UidGenerateToken} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UidGenerateTokenOutput} and HTTP response
     */

  }, {
    key: "uidGenerateTokenWithHttpInfo",
    value: function uidGenerateTokenWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling uidGenerateToken");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _UidGenerateTokenOutput["default"];
      return this.apiClient.callApi('/uid-generate-token', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/UidGenerateToken} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UidGenerateTokenOutput}
     */

  }, {
    key: "uidGenerateToken",
    value: function uidGenerateToken(body) {
      return this.uidGenerateTokenWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/UidListChildren} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UniversalIdentityDetails} and HTTP response
     */

  }, {
    key: "uidListChildrenWithHttpInfo",
    value: function uidListChildrenWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling uidListChildren");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _UniversalIdentityDetails["default"];
      return this.apiClient.callApi('/uid-list-children', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/UidListChildren} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UniversalIdentityDetails}
     */

  }, {
    key: "uidListChildren",
    value: function uidListChildren(body) {
      return this.uidListChildrenWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/UidRevokeToken} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */

  }, {
    key: "uidRevokeTokenWithHttpInfo",
    value: function uidRevokeTokenWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling uidRevokeToken");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/uid-revoke-token', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/UidRevokeToken} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */

  }, {
    key: "uidRevokeToken",
    value: function uidRevokeToken(body) {
      return this.uidRevokeTokenWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/UidRotateToken} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UidRotateTokenOutput} and HTTP response
     */

  }, {
    key: "uidRotateTokenWithHttpInfo",
    value: function uidRotateTokenWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling uidRotateToken");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _UidRotateTokenOutput["default"];
      return this.apiClient.callApi('/uid-rotate-token', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/UidRotateToken} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UidRotateTokenOutput}
     */

  }, {
    key: "uidRotateToken",
    value: function uidRotateToken(body) {
      return this.uidRotateTokenWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/UpdateAWSTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */

  }, {
    key: "updateAWSTargetWithHttpInfo",
    value: function updateAWSTargetWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateAWSTarget");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/update-aws-target', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/UpdateAWSTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */

  }, {
    key: "updateAWSTarget",
    value: function updateAWSTarget(body) {
      return this.updateAWSTargetWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/UpdateAWSTargetDetails} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateTargetOutput} and HTTP response
     */

  }, {
    key: "updateAWSTargetDetailsWithHttpInfo",
    value: function updateAWSTargetDetailsWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateAWSTargetDetails");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _UpdateTargetOutput["default"];
      return this.apiClient.callApi('/update-aws-target-details', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/UpdateAWSTargetDetails} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateTargetOutput}
     */

  }, {
    key: "updateAWSTargetDetails",
    value: function updateAWSTargetDetails(body) {
      return this.updateAWSTargetDetailsWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/UpdateAccountSettings} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateAccountSettingsOutput} and HTTP response
     */

  }, {
    key: "updateAccountSettingsWithHttpInfo",
    value: function updateAccountSettingsWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateAccountSettings");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _UpdateAccountSettingsOutput["default"];
      return this.apiClient.callApi('/update-account-settings', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/UpdateAccountSettings} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateAccountSettingsOutput}
     */

  }, {
    key: "updateAccountSettings",
    value: function updateAccountSettings(body) {
      return this.updateAccountSettingsWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/UpdateArtifactoryTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateArtifactoryTargetOutput} and HTTP response
     */

  }, {
    key: "updateArtifactoryTargetWithHttpInfo",
    value: function updateArtifactoryTargetWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateArtifactoryTarget");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _UpdateArtifactoryTargetOutput["default"];
      return this.apiClient.callApi('/update-artifactory-target', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/UpdateArtifactoryTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateArtifactoryTargetOutput}
     */

  }, {
    key: "updateArtifactoryTarget",
    value: function updateArtifactoryTarget(body) {
      return this.updateArtifactoryTargetWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/UpdateAssoc} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */

  }, {
    key: "updateAssocWithHttpInfo",
    value: function updateAssocWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateAssoc");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/update-assoc', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/UpdateAssoc} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */

  }, {
    key: "updateAssoc",
    value: function updateAssoc(body) {
      return this.updateAssocWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/UpdateAuthMethod} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateAuthMethodOutput} and HTTP response
     */

  }, {
    key: "updateAuthMethodWithHttpInfo",
    value: function updateAuthMethodWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateAuthMethod");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _UpdateAuthMethodOutput["default"];
      return this.apiClient.callApi('/update-auth-method', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/UpdateAuthMethod} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateAuthMethodOutput}
     */

  }, {
    key: "updateAuthMethod",
    value: function updateAuthMethod(body) {
      return this.updateAuthMethodWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/UpdateAuthMethodAWSIAM} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */

  }, {
    key: "updateAuthMethodAWSIAMWithHttpInfo",
    value: function updateAuthMethodAWSIAMWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateAuthMethodAWSIAM");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/update-auth-method-aws-iam', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/UpdateAuthMethodAWSIAM} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */

  }, {
    key: "updateAuthMethodAWSIAM",
    value: function updateAuthMethodAWSIAM(body) {
      return this.updateAuthMethodAWSIAMWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/UpdateAuthMethodAzureAD} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */

  }, {
    key: "updateAuthMethodAzureADWithHttpInfo",
    value: function updateAuthMethodAzureADWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateAuthMethodAzureAD");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/update-auth-method-azure-ad', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/UpdateAuthMethodAzureAD} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */

  }, {
    key: "updateAuthMethodAzureAD",
    value: function updateAuthMethodAzureAD(body) {
      return this.updateAuthMethodAzureADWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/UpdateAuthMethodCert} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateAuthMethodCertOutput} and HTTP response
     */

  }, {
    key: "updateAuthMethodCertWithHttpInfo",
    value: function updateAuthMethodCertWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateAuthMethodCert");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _UpdateAuthMethodCertOutput["default"];
      return this.apiClient.callApi('/update-auth-method-cert', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/UpdateAuthMethodCert} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateAuthMethodCertOutput}
     */

  }, {
    key: "updateAuthMethodCert",
    value: function updateAuthMethodCert(body) {
      return this.updateAuthMethodCertWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/UpdateAuthMethodGCP} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */

  }, {
    key: "updateAuthMethodGCPWithHttpInfo",
    value: function updateAuthMethodGCPWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateAuthMethodGCP");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/update-auth-method-gcp', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/UpdateAuthMethodGCP} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */

  }, {
    key: "updateAuthMethodGCP",
    value: function updateAuthMethodGCP(body) {
      return this.updateAuthMethodGCPWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/UpdateAuthMethodK8S} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateAuthMethodK8SOutput} and HTTP response
     */

  }, {
    key: "updateAuthMethodK8SWithHttpInfo",
    value: function updateAuthMethodK8SWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateAuthMethodK8S");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _UpdateAuthMethodK8SOutput["default"];
      return this.apiClient.callApi('/update-auth-method-k8s', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/UpdateAuthMethodK8S} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateAuthMethodK8SOutput}
     */

  }, {
    key: "updateAuthMethodK8S",
    value: function updateAuthMethodK8S(body) {
      return this.updateAuthMethodK8SWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/UpdateAuthMethodLDAP} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateAuthMethodLDAPOutput} and HTTP response
     */

  }, {
    key: "updateAuthMethodLDAPWithHttpInfo",
    value: function updateAuthMethodLDAPWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateAuthMethodLDAP");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _UpdateAuthMethodLDAPOutput["default"];
      return this.apiClient.callApi('/update-auth-method-ldap', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/UpdateAuthMethodLDAP} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateAuthMethodLDAPOutput}
     */

  }, {
    key: "updateAuthMethodLDAP",
    value: function updateAuthMethodLDAP(body) {
      return this.updateAuthMethodLDAPWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/UpdateAuthMethodOAuth2} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */

  }, {
    key: "updateAuthMethodOAuth2WithHttpInfo",
    value: function updateAuthMethodOAuth2WithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateAuthMethodOAuth2");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/update-auth-method-oauth2', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/UpdateAuthMethodOAuth2} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */

  }, {
    key: "updateAuthMethodOAuth2",
    value: function updateAuthMethodOAuth2(body) {
      return this.updateAuthMethodOAuth2WithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/UpdateAuthMethodOIDC} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */

  }, {
    key: "updateAuthMethodOIDCWithHttpInfo",
    value: function updateAuthMethodOIDCWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateAuthMethodOIDC");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/update-auth-method-oidc', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/UpdateAuthMethodOIDC} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */

  }, {
    key: "updateAuthMethodOIDC",
    value: function updateAuthMethodOIDC(body) {
      return this.updateAuthMethodOIDCWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/UpdateAuthMethodSAML} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */

  }, {
    key: "updateAuthMethodSAMLWithHttpInfo",
    value: function updateAuthMethodSAMLWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateAuthMethodSAML");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/update-auth-method-saml', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/UpdateAuthMethodSAML} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */

  }, {
    key: "updateAuthMethodSAML",
    value: function updateAuthMethodSAML(body) {
      return this.updateAuthMethodSAMLWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/UpdateAuthMethodUniversalIdentity} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */

  }, {
    key: "updateAuthMethodUniversalIdentityWithHttpInfo",
    value: function updateAuthMethodUniversalIdentityWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateAuthMethodUniversalIdentity");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/update-auth-method-universal-identity', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/UpdateAuthMethodUniversalIdentity} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */

  }, {
    key: "updateAuthMethodUniversalIdentity",
    value: function updateAuthMethodUniversalIdentity(body) {
      return this.updateAuthMethodUniversalIdentityWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/UpdateAzureTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateAzureTargetOutput} and HTTP response
     */

  }, {
    key: "updateAzureTargetWithHttpInfo",
    value: function updateAzureTargetWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateAzureTarget");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _UpdateAzureTargetOutput["default"];
      return this.apiClient.callApi('/update-azure-target', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/UpdateAzureTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateAzureTargetOutput}
     */

  }, {
    key: "updateAzureTarget",
    value: function updateAzureTarget(body) {
      return this.updateAzureTargetWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/UpdateCertificateValue} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateCertificateOutput} and HTTP response
     */

  }, {
    key: "updateCertificateValueWithHttpInfo",
    value: function updateCertificateValueWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateCertificateValue");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _UpdateCertificateOutput["default"];
      return this.apiClient.callApi('/update-certificate-value', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/UpdateCertificateValue} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateCertificateOutput}
     */

  }, {
    key: "updateCertificateValue",
    value: function updateCertificateValue(body) {
      return this.updateCertificateValueWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/UpdateDBTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateDBTargetOutput} and HTTP response
     */

  }, {
    key: "updateDBTargetWithHttpInfo",
    value: function updateDBTargetWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateDBTarget");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _UpdateDBTargetOutput["default"];
      return this.apiClient.callApi('/update-db-target', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/UpdateDBTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateDBTargetOutput}
     */

  }, {
    key: "updateDBTarget",
    value: function updateDBTarget(body) {
      return this.updateDBTargetWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/UpdateDBTargetDetails} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateTargetOutput} and HTTP response
     */

  }, {
    key: "updateDBTargetDetailsWithHttpInfo",
    value: function updateDBTargetDetailsWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateDBTargetDetails");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _UpdateTargetOutput["default"];
      return this.apiClient.callApi('/update-db-target-details', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/UpdateDBTargetDetails} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateTargetOutput}
     */

  }, {
    key: "updateDBTargetDetails",
    value: function updateDBTargetDetails(body) {
      return this.updateDBTargetDetailsWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/UpdateDockerhubTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateDockerhubTargetOutput} and HTTP response
     */

  }, {
    key: "updateDockerhubTargetWithHttpInfo",
    value: function updateDockerhubTargetWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateDockerhubTarget");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _UpdateDockerhubTargetOutput["default"];
      return this.apiClient.callApi('/update-dockerhub-target', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/UpdateDockerhubTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateDockerhubTargetOutput}
     */

  }, {
    key: "updateDockerhubTarget",
    value: function updateDockerhubTarget(body) {
      return this.updateDockerhubTargetWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/UpdateEKSTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateEKSTargetOutput} and HTTP response
     */

  }, {
    key: "updateEKSTargetWithHttpInfo",
    value: function updateEKSTargetWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateEKSTarget");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _UpdateEKSTargetOutput["default"];
      return this.apiClient.callApi('/update-eks-target', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/UpdateEKSTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateEKSTargetOutput}
     */

  }, {
    key: "updateEKSTarget",
    value: function updateEKSTarget(body) {
      return this.updateEKSTargetWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/UpdateEventForwarder} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */

  }, {
    key: "updateEventForwarderWithHttpInfo",
    value: function updateEventForwarderWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateEventForwarder");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/update-event-forwarder', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/UpdateEventForwarder} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */

  }, {
    key: "updateEventForwarder",
    value: function updateEventForwarder(body) {
      return this.updateEventForwarderWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/UpdateGKETarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateGKETargetOutput} and HTTP response
     */

  }, {
    key: "updateGKETargetWithHttpInfo",
    value: function updateGKETargetWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateGKETarget");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _UpdateGKETargetOutput["default"];
      return this.apiClient.callApi('/update-gke-target', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/UpdateGKETarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateGKETargetOutput}
     */

  }, {
    key: "updateGKETarget",
    value: function updateGKETarget(body) {
      return this.updateGKETargetWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/UpdateGcpTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateGcpTargetOutput} and HTTP response
     */

  }, {
    key: "updateGcpTargetWithHttpInfo",
    value: function updateGcpTargetWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateGcpTarget");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _UpdateGcpTargetOutput["default"];
      return this.apiClient.callApi('/update-gcp-target', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/UpdateGcpTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateGcpTargetOutput}
     */

  }, {
    key: "updateGcpTarget",
    value: function updateGcpTarget(body) {
      return this.updateGcpTargetWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/UpdateGithubTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateGithubTargetOutput} and HTTP response
     */

  }, {
    key: "updateGithubTargetWithHttpInfo",
    value: function updateGithubTargetWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateGithubTarget");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _UpdateGithubTargetOutput["default"];
      return this.apiClient.callApi('/update-github-target', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/UpdateGithubTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateGithubTargetOutput}
     */

  }, {
    key: "updateGithubTarget",
    value: function updateGithubTarget(body) {
      return this.updateGithubTargetWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/UpdateGlobalSignAtlasTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateGlobalSignAtlasTargetOutput} and HTTP response
     */

  }, {
    key: "updateGlobalSignAtlasTargetWithHttpInfo",
    value: function updateGlobalSignAtlasTargetWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateGlobalSignAtlasTarget");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _UpdateGlobalSignAtlasTargetOutput["default"];
      return this.apiClient.callApi('/update-globalsign-atlas-target', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/UpdateGlobalSignAtlasTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateGlobalSignAtlasTargetOutput}
     */

  }, {
    key: "updateGlobalSignAtlasTarget",
    value: function updateGlobalSignAtlasTarget(body) {
      return this.updateGlobalSignAtlasTargetWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/UpdateGlobalSignTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateGlobalSignTargetOutput} and HTTP response
     */

  }, {
    key: "updateGlobalSignTargetWithHttpInfo",
    value: function updateGlobalSignTargetWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateGlobalSignTarget");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _UpdateGlobalSignTargetOutput["default"];
      return this.apiClient.callApi('/update-globalsign-target', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/UpdateGlobalSignTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateGlobalSignTargetOutput}
     */

  }, {
    key: "updateGlobalSignTarget",
    value: function updateGlobalSignTarget(body) {
      return this.updateGlobalSignTargetWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/UpdateGroup} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateGroupOutput} and HTTP response
     */

  }, {
    key: "updateGroupWithHttpInfo",
    value: function updateGroupWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateGroup");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _UpdateGroupOutput["default"];
      return this.apiClient.callApi('/update-group', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/UpdateGroup} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateGroupOutput}
     */

  }, {
    key: "updateGroup",
    value: function updateGroup(body) {
      return this.updateGroupWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/UpdateItem} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateItemOutput} and HTTP response
     */

  }, {
    key: "updateItemWithHttpInfo",
    value: function updateItemWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateItem");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _UpdateItemOutput["default"];
      return this.apiClient.callApi('/update-item', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/UpdateItem} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateItemOutput}
     */

  }, {
    key: "updateItem",
    value: function updateItem(body) {
      return this.updateItemWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/UpdateLdapTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateLdapTargetOutput} and HTTP response
     */

  }, {
    key: "updateLdapTargetWithHttpInfo",
    value: function updateLdapTargetWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateLdapTarget");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _UpdateLdapTargetOutput["default"];
      return this.apiClient.callApi('/update-ldap-target', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/UpdateLdapTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateLdapTargetOutput}
     */

  }, {
    key: "updateLdapTarget",
    value: function updateLdapTarget(body) {
      return this.updateLdapTargetWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/UpdateLdapTargetDetails} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateTargetOutput} and HTTP response
     */

  }, {
    key: "updateLdapTargetDetailsWithHttpInfo",
    value: function updateLdapTargetDetailsWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateLdapTargetDetails");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _UpdateTargetOutput["default"];
      return this.apiClient.callApi('/update-ldap-target-details', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/UpdateLdapTargetDetails} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateTargetOutput}
     */

  }, {
    key: "updateLdapTargetDetails",
    value: function updateLdapTargetDetails(body) {
      return this.updateLdapTargetDetailsWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/UpdateLinkedTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */

  }, {
    key: "updateLinkedTargetWithHttpInfo",
    value: function updateLinkedTargetWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateLinkedTarget");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/update-linked-target', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/UpdateLinkedTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */

  }, {
    key: "updateLinkedTarget",
    value: function updateLinkedTarget(body) {
      return this.updateLinkedTargetWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/UpdateNativeK8STarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateNativeK8STargetOutput} and HTTP response
     */

  }, {
    key: "updateNativeK8STargetWithHttpInfo",
    value: function updateNativeK8STargetWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateNativeK8STarget");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _UpdateNativeK8STargetOutput["default"];
      return this.apiClient.callApi('/update-k8s-target', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/UpdateNativeK8STarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateNativeK8STargetOutput}
     */

  }, {
    key: "updateNativeK8STarget",
    value: function updateNativeK8STarget(body) {
      return this.updateNativeK8STargetWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/UpdateOidcApp} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */

  }, {
    key: "updateOidcAppWithHttpInfo",
    value: function updateOidcAppWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateOidcApp");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/update-oidc-app', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/UpdateOidcApp} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */

  }, {
    key: "updateOidcApp",
    value: function updateOidcApp(body) {
      return this.updateOidcAppWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/UpdatePKICertIssuer} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdatePKICertIssuerOutput} and HTTP response
     */

  }, {
    key: "updatePKICertIssuerWithHttpInfo",
    value: function updatePKICertIssuerWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updatePKICertIssuer");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _UpdatePKICertIssuerOutput["default"];
      return this.apiClient.callApi('/update-pki-cert-issuer', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/UpdatePKICertIssuer} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdatePKICertIssuerOutput}
     */

  }, {
    key: "updatePKICertIssuer",
    value: function updatePKICertIssuer(body) {
      return this.updatePKICertIssuerWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/UpdatePingTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */

  }, {
    key: "updatePingTargetWithHttpInfo",
    value: function updatePingTargetWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updatePingTarget");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/update-ping-target', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/UpdatePingTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */

  }, {
    key: "updatePingTarget",
    value: function updatePingTarget(body) {
      return this.updatePingTargetWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/UpdateRDPTargetDetails} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateTargetOutput} and HTTP response
     */

  }, {
    key: "updateRDPTargetDetailsWithHttpInfo",
    value: function updateRDPTargetDetailsWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateRDPTargetDetails");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _UpdateTargetOutput["default"];
      return this.apiClient.callApi('/update-rdp-target-details', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/UpdateRDPTargetDetails} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateTargetOutput}
     */

  }, {
    key: "updateRDPTargetDetails",
    value: function updateRDPTargetDetails(body) {
      return this.updateRDPTargetDetailsWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/UpdateRabbitMQTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateRabbitMQTargetOutput} and HTTP response
     */

  }, {
    key: "updateRabbitMQTargetWithHttpInfo",
    value: function updateRabbitMQTargetWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateRabbitMQTarget");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _UpdateRabbitMQTargetOutput["default"];
      return this.apiClient.callApi('/update-rabbitmq-target', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/UpdateRabbitMQTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateRabbitMQTargetOutput}
     */

  }, {
    key: "updateRabbitMQTarget",
    value: function updateRabbitMQTarget(body) {
      return this.updateRabbitMQTargetWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/UpdateRabbitMQTargetDetails} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateTargetOutput} and HTTP response
     */

  }, {
    key: "updateRabbitMQTargetDetailsWithHttpInfo",
    value: function updateRabbitMQTargetDetailsWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateRabbitMQTargetDetails");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _UpdateTargetOutput["default"];
      return this.apiClient.callApi('/update-rabbitmq-target-details', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/UpdateRabbitMQTargetDetails} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateTargetOutput}
     */

  }, {
    key: "updateRabbitMQTargetDetails",
    value: function updateRabbitMQTargetDetails(body) {
      return this.updateRabbitMQTargetDetailsWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/UpdateRole} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateRoleOutput} and HTTP response
     */

  }, {
    key: "updateRoleWithHttpInfo",
    value: function updateRoleWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateRole");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _UpdateRoleOutput["default"];
      return this.apiClient.callApi('/update-role', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/UpdateRole} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateRoleOutput}
     */

  }, {
    key: "updateRole",
    value: function updateRole(body) {
      return this.updateRoleWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/UpdateRotatedSecret} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateRotatedSecretOutput} and HTTP response
     */

  }, {
    key: "updateRotatedSecretWithHttpInfo",
    value: function updateRotatedSecretWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateRotatedSecret");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _UpdateRotatedSecretOutput["default"];
      return this.apiClient.callApi('/update-rotated-secret', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/UpdateRotatedSecret} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateRotatedSecretOutput}
     */

  }, {
    key: "updateRotatedSecret",
    value: function updateRotatedSecret(body) {
      return this.updateRotatedSecretWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RotateKeyOutput} and HTTP response
     */

  }, {
    key: "updateRotationSettingsWithHttpInfo",
    value: function updateRotationSettingsWithHttpInfo() {
      var postBody = null;
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _RotateKeyOutput["default"];
      return this.apiClient.callApi('/update-rotation-settingsrotate-key', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RotateKeyOutput}
     */

  }, {
    key: "updateRotationSettings",
    value: function updateRotationSettings() {
      return this.updateRotationSettingsWithHttpInfo().then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/UpdateSSHCertIssuer} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateSSHCertIssuerOutput} and HTTP response
     */

  }, {
    key: "updateSSHCertIssuerWithHttpInfo",
    value: function updateSSHCertIssuerWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateSSHCertIssuer");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _UpdateSSHCertIssuerOutput["default"];
      return this.apiClient.callApi('/update-ssh-cert-issuer', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/UpdateSSHCertIssuer} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateSSHCertIssuerOutput}
     */

  }, {
    key: "updateSSHCertIssuer",
    value: function updateSSHCertIssuer(body) {
      return this.updateSSHCertIssuerWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/UpdateSSHTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateSSHTargetOutput} and HTTP response
     */

  }, {
    key: "updateSSHTargetWithHttpInfo",
    value: function updateSSHTargetWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateSSHTarget");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _UpdateSSHTargetOutput["default"];
      return this.apiClient.callApi('/update-ssh-target', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/UpdateSSHTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateSSHTargetOutput}
     */

  }, {
    key: "updateSSHTarget",
    value: function updateSSHTarget(body) {
      return this.updateSSHTargetWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/UpdateSSHTargetDetails} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateTargetOutput} and HTTP response
     */

  }, {
    key: "updateSSHTargetDetailsWithHttpInfo",
    value: function updateSSHTargetDetailsWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateSSHTargetDetails");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _UpdateTargetOutput["default"];
      return this.apiClient.callApi('/update-ssh-target-details', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/UpdateSSHTargetDetails} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateTargetOutput}
     */

  }, {
    key: "updateSSHTargetDetails",
    value: function updateSSHTargetDetails(body) {
      return this.updateSSHTargetDetailsWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/UpdateSalesforceTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateSalesforceTargetOutput} and HTTP response
     */

  }, {
    key: "updateSalesforceTargetWithHttpInfo",
    value: function updateSalesforceTargetWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateSalesforceTarget");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _UpdateSalesforceTargetOutput["default"];
      return this.apiClient.callApi('/update-salesforce-target', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/UpdateSalesforceTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateSalesforceTargetOutput}
     */

  }, {
    key: "updateSalesforceTarget",
    value: function updateSalesforceTarget(body) {
      return this.updateSalesforceTargetWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/UpdateSecretVal} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateSecretValOutput} and HTTP response
     */

  }, {
    key: "updateSecretValWithHttpInfo",
    value: function updateSecretValWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateSecretVal");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _UpdateSecretValOutput["default"];
      return this.apiClient.callApi('/update-secret-val', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/UpdateSecretVal} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateSecretValOutput}
     */

  }, {
    key: "updateSecretVal",
    value: function updateSecretVal(body) {
      return this.updateSecretValWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/UpdateTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateTargetOutput} and HTTP response
     */

  }, {
    key: "updateTargetWithHttpInfo",
    value: function updateTargetWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateTarget");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _UpdateTargetOutput["default"];
      return this.apiClient.callApi('/update-target', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/UpdateTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateTargetOutput}
     */

  }, {
    key: "updateTarget",
    value: function updateTarget(body) {
      return this.updateTargetWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/UpdateTargetDetails} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateTargetOutput} and HTTP response
     */

  }, {
    key: "updateTargetDetailsWithHttpInfo",
    value: function updateTargetDetailsWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateTargetDetails");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _UpdateTargetOutput["default"];
      return this.apiClient.callApi('/update-target-details', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/UpdateTargetDetails} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateTargetOutput}
     */

  }, {
    key: "updateTargetDetails",
    value: function updateTargetDetails(body) {
      return this.updateTargetDetailsWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/UpdateWebTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateWebTargetOutput} and HTTP response
     */

  }, {
    key: "updateWebTargetWithHttpInfo",
    value: function updateWebTargetWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateWebTarget");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _UpdateWebTargetOutput["default"];
      return this.apiClient.callApi('/update-web-target', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/UpdateWebTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateWebTargetOutput}
     */

  }, {
    key: "updateWebTarget",
    value: function updateWebTarget(body) {
      return this.updateWebTargetWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/UpdateWebTargetDetails} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateTargetOutput} and HTTP response
     */

  }, {
    key: "updateWebTargetDetailsWithHttpInfo",
    value: function updateWebTargetDetailsWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateWebTargetDetails");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _UpdateTargetOutput["default"];
      return this.apiClient.callApi('/update-web-target-details', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/UpdateWebTargetDetails} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateTargetOutput}
     */

  }, {
    key: "updateWebTargetDetails",
    value: function updateWebTargetDetails(body) {
      return this.updateWebTargetDetailsWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/UpdateWindowsTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */

  }, {
    key: "updateWindowsTargetWithHttpInfo",
    value: function updateWindowsTargetWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateWindowsTarget");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/update-windows-target', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/UpdateWindowsTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */

  }, {
    key: "updateWindowsTarget",
    value: function updateWindowsTarget(body) {
      return this.updateWindowsTargetWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/UpdateZeroSSLTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateZeroSSLTargetOutput} and HTTP response
     */

  }, {
    key: "updateZeroSSLTargetWithHttpInfo",
    value: function updateZeroSSLTargetWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateZeroSSLTarget");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _UpdateZeroSSLTargetOutput["default"];
      return this.apiClient.callApi('/update-zerossl-target', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/UpdateZeroSSLTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateZeroSSLTargetOutput}
     */

  }, {
    key: "updateZeroSSLTarget",
    value: function updateZeroSSLTarget(body) {
      return this.updateZeroSSLTargetWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/UploadRSA} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */

  }, {
    key: "uploadRSAWithHttpInfo",
    value: function uploadRSAWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling uploadRSA");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/upload-rsa', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/UploadRSA} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */

  }, {
    key: "uploadRSA",
    value: function uploadRSA(body) {
      return this.uploadRSAWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/ValidateToken} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ValidateTokenOutput} and HTTP response
     */

  }, {
    key: "validateTokenWithHttpInfo",
    value: function validateTokenWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling validateToken");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _ValidateTokenOutput["default"];
      return this.apiClient.callApi('/validate-token', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/ValidateToken} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ValidateTokenOutput}
     */

  }, {
    key: "validateToken",
    value: function validateToken(body) {
      return this.validateTokenWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/VerifyDataWithClassicKey} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/VerifyPKICertOutput} and HTTP response
     */

  }, {
    key: "verifyDataWithClassicKeyWithHttpInfo",
    value: function verifyDataWithClassicKeyWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling verifyDataWithClassicKey");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _VerifyPKICertOutput["default"];
      return this.apiClient.callApi('/verify-data-with-classic-key', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/VerifyDataWithClassicKey} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/VerifyPKICertOutput}
     */

  }, {
    key: "verifyDataWithClassicKey",
    value: function verifyDataWithClassicKey(body) {
      return this.verifyDataWithClassicKeyWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/VerifyEcDsa} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */

  }, {
    key: "verifyEcDsaWithHttpInfo",
    value: function verifyEcDsaWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling verifyEcDsa");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/verify-ecdsa', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/VerifyEcDsa} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */

  }, {
    key: "verifyEcDsa",
    value: function verifyEcDsa(body) {
      return this.verifyEcDsaWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/VerifyGPG} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */

  }, {
    key: "verifyGPGWithHttpInfo",
    value: function verifyGPGWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling verifyGPG");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/verify-gpg', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/VerifyGPG} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */

  }, {
    key: "verifyGPG",
    value: function verifyGPG(body) {
      return this.verifyGPGWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/VerifyJWTWithClassicKey} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/VerifyJWTOutput} and HTTP response
     */

  }, {
    key: "verifyJWTWithClassicKeyWithHttpInfo",
    value: function verifyJWTWithClassicKeyWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling verifyJWTWithClassicKey");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _VerifyJWTOutput["default"];
      return this.apiClient.callApi('/verify-jwt-with-classic-key', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/VerifyJWTWithClassicKey} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/VerifyJWTOutput}
     */

  }, {
    key: "verifyJWTWithClassicKey",
    value: function verifyJWTWithClassicKey(body) {
      return this.verifyJWTWithClassicKeyWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/VerifyPKCS1} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */

  }, {
    key: "verifyPKCS1WithHttpInfo",
    value: function verifyPKCS1WithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling verifyPKCS1");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/verify-pkcs1', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/VerifyPKCS1} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */

  }, {
    key: "verifyPKCS1",
    value: function verifyPKCS1(body) {
      return this.verifyPKCS1WithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/VerifyPKICertWithClassicKey} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/VerifyPKICertOutput} and HTTP response
     */

  }, {
    key: "verifyPKICertWithClassicKeyWithHttpInfo",
    value: function verifyPKICertWithClassicKeyWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling verifyPKICertWithClassicKey");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _VerifyPKICertOutput["default"];
      return this.apiClient.callApi('/verify-pki-cert-with-classic-key', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/VerifyPKICertWithClassicKey} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/VerifyPKICertOutput}
     */

  }, {
    key: "verifyPKICertWithClassicKey",
    value: function verifyPKICertWithClassicKey(body) {
      return this.verifyPKICertWithClassicKeyWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * @param {module:model/VerifyRsaSsaPss} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */

  }, {
    key: "verifyRsaSsaPssWithHttpInfo",
    value: function verifyRsaSsaPssWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling verifyRsaSsaPss");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/verify-rsassa-pss', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * @param {module:model/VerifyRsaSsaPss} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */

  }, {
    key: "verifyRsaSsaPss",
    value: function verifyRsaSsaPss(body) {
      return this.verifyRsaSsaPssWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);

  return V2Api;
}();

exports["default"] = V2Api;