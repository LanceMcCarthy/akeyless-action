"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ApiClient = _interopRequireDefault(require("../ApiClient"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * The TargetCreateDB model module.
 * @module model/TargetCreateDB
 * @version 4.2.0
 */
var TargetCreateDB = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>TargetCreateDB</code>.
   * @alias module:model/TargetCreateDB
   * @param connectionType {String} (Optional) Type of connection to mssql database [credentials/cloud-identity]
   * @param dbType {String} 
   * @param name {String} Target name
   */
  function TargetCreateDB(connectionType, dbType, name) {
    _classCallCheck(this, TargetCreateDB);

    TargetCreateDB.initialize(this, connectionType, dbType, name);
  }
  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */


  _createClass(TargetCreateDB, null, [{
    key: "initialize",
    value: function initialize(obj, connectionType, dbType, name) {
      obj['connection-type'] = connectionType;
      obj['db-type'] = dbType;
      obj['name'] = name;
    }
    /**
     * Constructs a <code>TargetCreateDB</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TargetCreateDB} obj Optional instance to populate.
     * @return {module:model/TargetCreateDB} The populated <code>TargetCreateDB</code> instance.
     */

  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new TargetCreateDB();

        if (data.hasOwnProperty('DBDefinedConnectionType')) {
          obj['DBDefinedConnectionType'] = _ApiClient["default"].convertToType(data['DBDefinedConnectionType'], 'String');
        }

        if (data.hasOwnProperty('azure-client-id')) {
          obj['azure-client-id'] = _ApiClient["default"].convertToType(data['azure-client-id'], 'String');
        }

        if (data.hasOwnProperty('azure-client-secret')) {
          obj['azure-client-secret'] = _ApiClient["default"].convertToType(data['azure-client-secret'], 'String');
        }

        if (data.hasOwnProperty('azure-tenant-id')) {
          obj['azure-tenant-id'] = _ApiClient["default"].convertToType(data['azure-tenant-id'], 'String');
        }

        if (data.hasOwnProperty('cloud-service-provider')) {
          obj['cloud-service-provider'] = _ApiClient["default"].convertToType(data['cloud-service-provider'], 'String');
        }

        if (data.hasOwnProperty('cluster-mode')) {
          obj['cluster-mode'] = _ApiClient["default"].convertToType(data['cluster-mode'], 'Boolean');
        }

        if (data.hasOwnProperty('comment')) {
          obj['comment'] = _ApiClient["default"].convertToType(data['comment'], 'String');
        }

        if (data.hasOwnProperty('connection-type')) {
          obj['connection-type'] = _ApiClient["default"].convertToType(data['connection-type'], 'String');
        }

        if (data.hasOwnProperty('db-name')) {
          obj['db-name'] = _ApiClient["default"].convertToType(data['db-name'], 'String');
        }

        if (data.hasOwnProperty('db-server-certificates')) {
          obj['db-server-certificates'] = _ApiClient["default"].convertToType(data['db-server-certificates'], 'String');
        }

        if (data.hasOwnProperty('db-server-name')) {
          obj['db-server-name'] = _ApiClient["default"].convertToType(data['db-server-name'], 'String');
        }

        if (data.hasOwnProperty('db-type')) {
          obj['db-type'] = _ApiClient["default"].convertToType(data['db-type'], 'String');
        }

        if (data.hasOwnProperty('description')) {
          obj['description'] = _ApiClient["default"].convertToType(data['description'], 'String');
        }

        if (data.hasOwnProperty('host')) {
          obj['host'] = _ApiClient["default"].convertToType(data['host'], 'String');
        }

        if (data.hasOwnProperty('json')) {
          obj['json'] = _ApiClient["default"].convertToType(data['json'], 'Boolean');
        }

        if (data.hasOwnProperty('key')) {
          obj['key'] = _ApiClient["default"].convertToType(data['key'], 'String');
        }

        if (data.hasOwnProperty('max-versions')) {
          obj['max-versions'] = _ApiClient["default"].convertToType(data['max-versions'], 'String');
        }

        if (data.hasOwnProperty('mongodb-atlas')) {
          obj['mongodb-atlas'] = _ApiClient["default"].convertToType(data['mongodb-atlas'], 'Boolean');
        }

        if (data.hasOwnProperty('mongodb-atlas-api-private-key')) {
          obj['mongodb-atlas-api-private-key'] = _ApiClient["default"].convertToType(data['mongodb-atlas-api-private-key'], 'String');
        }

        if (data.hasOwnProperty('mongodb-atlas-api-public-key')) {
          obj['mongodb-atlas-api-public-key'] = _ApiClient["default"].convertToType(data['mongodb-atlas-api-public-key'], 'String');
        }

        if (data.hasOwnProperty('mongodb-atlas-project-id')) {
          obj['mongodb-atlas-project-id'] = _ApiClient["default"].convertToType(data['mongodb-atlas-project-id'], 'String');
        }

        if (data.hasOwnProperty('mongodb-default-auth-db')) {
          obj['mongodb-default-auth-db'] = _ApiClient["default"].convertToType(data['mongodb-default-auth-db'], 'String');
        }

        if (data.hasOwnProperty('mongodb-uri-options')) {
          obj['mongodb-uri-options'] = _ApiClient["default"].convertToType(data['mongodb-uri-options'], 'String');
        }

        if (data.hasOwnProperty('name')) {
          obj['name'] = _ApiClient["default"].convertToType(data['name'], 'String');
        }

        if (data.hasOwnProperty('oracle-service-name')) {
          obj['oracle-service-name'] = _ApiClient["default"].convertToType(data['oracle-service-name'], 'String');
        }

        if (data.hasOwnProperty('port')) {
          obj['port'] = _ApiClient["default"].convertToType(data['port'], 'String');
        }

        if (data.hasOwnProperty('pwd')) {
          obj['pwd'] = _ApiClient["default"].convertToType(data['pwd'], 'String');
        }

        if (data.hasOwnProperty('snowflake-account')) {
          obj['snowflake-account'] = _ApiClient["default"].convertToType(data['snowflake-account'], 'String');
        }

        if (data.hasOwnProperty('snowflake-api-private-key')) {
          obj['snowflake-api-private-key'] = _ApiClient["default"].convertToType(data['snowflake-api-private-key'], 'String');
        }

        if (data.hasOwnProperty('snowflake-api-private-key-password')) {
          obj['snowflake-api-private-key-password'] = _ApiClient["default"].convertToType(data['snowflake-api-private-key-password'], 'String');
        }

        if (data.hasOwnProperty('ssl')) {
          obj['ssl'] = _ApiClient["default"].convertToType(data['ssl'], 'Boolean');
        }

        if (data.hasOwnProperty('ssl-certificate')) {
          obj['ssl-certificate'] = _ApiClient["default"].convertToType(data['ssl-certificate'], 'String');
        }

        if (data.hasOwnProperty('token')) {
          obj['token'] = _ApiClient["default"].convertToType(data['token'], 'String');
        }

        if (data.hasOwnProperty('uid-token')) {
          obj['uid-token'] = _ApiClient["default"].convertToType(data['uid-token'], 'String');
        }

        if (data.hasOwnProperty('user-name')) {
          obj['user-name'] = _ApiClient["default"].convertToType(data['user-name'], 'String');
        }
      }

      return obj;
    }
  }]);

  return TargetCreateDB;
}();
/**
 * @member {String} DBDefinedConnectionType
 */


TargetCreateDB.prototype['DBDefinedConnectionType'] = undefined;
/**
 * (Optional) Client id (relevant for \"cloud-service-provider\" only)
 * @member {String} azure-client-id
 */

TargetCreateDB.prototype['azure-client-id'] = undefined;
/**
 * (Optional) Client secret (relevant for \"cloud-service-provider\" only)
 * @member {String} azure-client-secret
 */

TargetCreateDB.prototype['azure-client-secret'] = undefined;
/**
 * (Optional) Tenant id (relevant for \"cloud-service-provider\" only)
 * @member {String} azure-tenant-id
 */

TargetCreateDB.prototype['azure-tenant-id'] = undefined;
/**
 * (Optional) Cloud service provider (currently only supports Azure)
 * @member {String} cloud-service-provider
 */

TargetCreateDB.prototype['cloud-service-provider'] = undefined;
/**
 * Cluster Mode
 * @member {Boolean} cluster-mode
 */

TargetCreateDB.prototype['cluster-mode'] = undefined;
/**
 * Deprecated - use description
 * @member {String} comment
 */

TargetCreateDB.prototype['comment'] = undefined;
/**
 * (Optional) Type of connection to mssql database [credentials/cloud-identity]
 * @member {String} connection-type
 * @default 'credentials'
 */

TargetCreateDB.prototype['connection-type'] = 'credentials';
/**
 * @member {String} db-name
 */

TargetCreateDB.prototype['db-name'] = undefined;
/**
 * (Optional) DB server certificates
 * @member {String} db-server-certificates
 */

TargetCreateDB.prototype['db-server-certificates'] = undefined;
/**
 * (Optional) Server name for certificate verification
 * @member {String} db-server-name
 */

TargetCreateDB.prototype['db-server-name'] = undefined;
/**
 * @member {String} db-type
 */

TargetCreateDB.prototype['db-type'] = undefined;
/**
 * Description of the object
 * @member {String} description
 */

TargetCreateDB.prototype['description'] = undefined;
/**
 * @member {String} host
 */

TargetCreateDB.prototype['host'] = undefined;
/**
 * Set output format to JSON
 * @member {Boolean} json
 * @default false
 */

TargetCreateDB.prototype['json'] = false;
/**
 * The name of a key that used to encrypt the target secret value (if empty, the account default protectionKey key will be used)
 * @member {String} key
 */

TargetCreateDB.prototype['key'] = undefined;
/**
 * Set the maximum number of versions, limited by the account settings defaults.
 * @member {String} max-versions
 */

TargetCreateDB.prototype['max-versions'] = undefined;
/**
 * @member {Boolean} mongodb-atlas
 */

TargetCreateDB.prototype['mongodb-atlas'] = undefined;
/**
 * MongoDB Atlas private key
 * @member {String} mongodb-atlas-api-private-key
 */

TargetCreateDB.prototype['mongodb-atlas-api-private-key'] = undefined;
/**
 * MongoDB Atlas public key
 * @member {String} mongodb-atlas-api-public-key
 */

TargetCreateDB.prototype['mongodb-atlas-api-public-key'] = undefined;
/**
 * MongoDB Atlas project ID
 * @member {String} mongodb-atlas-project-id
 */

TargetCreateDB.prototype['mongodb-atlas-project-id'] = undefined;
/**
 * MongoDB server default authentication database
 * @member {String} mongodb-default-auth-db
 */

TargetCreateDB.prototype['mongodb-default-auth-db'] = undefined;
/**
 * MongoDB server URI options
 * @member {String} mongodb-uri-options
 */

TargetCreateDB.prototype['mongodb-uri-options'] = undefined;
/**
 * Target name
 * @member {String} name
 */

TargetCreateDB.prototype['name'] = undefined;
/**
 * @member {String} oracle-service-name
 */

TargetCreateDB.prototype['oracle-service-name'] = undefined;
/**
 * @member {String} port
 */

TargetCreateDB.prototype['port'] = undefined;
/**
 * @member {String} pwd
 */

TargetCreateDB.prototype['pwd'] = undefined;
/**
 * @member {String} snowflake-account
 */

TargetCreateDB.prototype['snowflake-account'] = undefined;
/**
 * RSA Private key (base64 encoded)
 * @member {String} snowflake-api-private-key
 */

TargetCreateDB.prototype['snowflake-api-private-key'] = undefined;
/**
 * The Private key passphrase
 * @member {String} snowflake-api-private-key-password
 */

TargetCreateDB.prototype['snowflake-api-private-key-password'] = undefined;
/**
 * Enable/Disable SSL [true/false]
 * @member {Boolean} ssl
 * @default false
 */

TargetCreateDB.prototype['ssl'] = false;
/**
 * SSL connection certificate
 * @member {String} ssl-certificate
 */

TargetCreateDB.prototype['ssl-certificate'] = undefined;
/**
 * Authentication token (see `/auth` and `/configure`)
 * @member {String} token
 */

TargetCreateDB.prototype['token'] = undefined;
/**
 * The universal identity token, Required only for universal_identity authentication
 * @member {String} uid-token
 */

TargetCreateDB.prototype['uid-token'] = undefined;
/**
 * @member {String} user-name
 */

TargetCreateDB.prototype['user-name'] = undefined;
var _default = TargetCreateDB;
exports["default"] = _default;