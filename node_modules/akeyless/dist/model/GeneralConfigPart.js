"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ApiClient = _interopRequireDefault(require("../ApiClient"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * The GeneralConfigPart model module.
 * @module model/GeneralConfigPart
 * @version 3.3.16
 */
var GeneralConfigPart = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>GeneralConfigPart</code>.
   * @alias module:model/GeneralConfigPart
   */
  function GeneralConfigPart() {
    _classCallCheck(this, GeneralConfigPart);

    GeneralConfigPart.initialize(this);
  }
  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */


  _createClass(GeneralConfigPart, null, [{
    key: "initialize",
    value: function initialize(obj) {}
    /**
     * Constructs a <code>GeneralConfigPart</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GeneralConfigPart} obj Optional instance to populate.
     * @return {module:model/GeneralConfigPart} The populated <code>GeneralConfigPart</code> instance.
     */

  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new GeneralConfigPart();

        if (data.hasOwnProperty('akeyless_url')) {
          obj['akeyless_url'] = _ApiClient["default"].convertToType(data['akeyless_url'], 'String');
        }

        if (data.hasOwnProperty('api_token_ttl')) {
          obj['api_token_ttl'] = _ApiClient["default"].convertToType(data['api_token_ttl'], 'String');
        }

        if (data.hasOwnProperty('display_name')) {
          obj['display_name'] = _ApiClient["default"].convertToType(data['display_name'], 'String');
        }

        if (data.hasOwnProperty('enable_sni_proxy')) {
          obj['enable_sni_proxy'] = _ApiClient["default"].convertToType(data['enable_sni_proxy'], 'Boolean');
        }

        if (data.hasOwnProperty('enable_tls')) {
          obj['enable_tls'] = _ApiClient["default"].convertToType(data['enable_tls'], 'Boolean');
        }

        if (data.hasOwnProperty('enable_tls_configure')) {
          obj['enable_tls_configure'] = _ApiClient["default"].convertToType(data['enable_tls_configure'], 'Boolean');
        }

        if (data.hasOwnProperty('enable_tls_curl')) {
          obj['enable_tls_curl'] = _ApiClient["default"].convertToType(data['enable_tls_curl'], 'Boolean');
        }

        if (data.hasOwnProperty('enable_tls_hvp')) {
          obj['enable_tls_hvp'] = _ApiClient["default"].convertToType(data['enable_tls_hvp'], 'Boolean');
        }

        if (data.hasOwnProperty('gw_cluster_url')) {
          obj['gw_cluster_url'] = _ApiClient["default"].convertToType(data['gw_cluster_url'], 'String');
        }

        if (data.hasOwnProperty('tcp_port')) {
          obj['tcp_port'] = _ApiClient["default"].convertToType(data['tcp_port'], 'String');
        }

        if (data.hasOwnProperty('tls_cert')) {
          obj['tls_cert'] = _ApiClient["default"].convertToType(data['tls_cert'], 'String');
        }

        if (data.hasOwnProperty('tls_key')) {
          obj['tls_key'] = _ApiClient["default"].convertToType(data['tls_key'], 'String');
        }
      }

      return obj;
    }
  }]);

  return GeneralConfigPart;
}();
/**
 * AkeylessUrl is here for BC only. Gator will still return it if it exists in the configuration, but new clients (>=2.34.0) will ignore it and override it with what exists in their local file. It will no longer be sent to Gator for update, so new clusters will only have the default value saved in the DB.
 * @member {String} akeyless_url
 */


GeneralConfigPart.prototype['akeyless_url'] = undefined;
/**
 * @member {String} api_token_ttl
 */

GeneralConfigPart.prototype['api_token_ttl'] = undefined;
/**
 * @member {String} display_name
 */

GeneralConfigPart.prototype['display_name'] = undefined;
/**
 * @member {Boolean} enable_sni_proxy
 */

GeneralConfigPart.prototype['enable_sni_proxy'] = undefined;
/**
 * @member {Boolean} enable_tls
 */

GeneralConfigPart.prototype['enable_tls'] = undefined;
/**
 * @member {Boolean} enable_tls_configure
 */

GeneralConfigPart.prototype['enable_tls_configure'] = undefined;
/**
 * @member {Boolean} enable_tls_curl
 */

GeneralConfigPart.prototype['enable_tls_curl'] = undefined;
/**
 * @member {Boolean} enable_tls_hvp
 */

GeneralConfigPart.prototype['enable_tls_hvp'] = undefined;
/**
 * @member {String} gw_cluster_url
 */

GeneralConfigPart.prototype['gw_cluster_url'] = undefined;
/**
 * @member {String} tcp_port
 */

GeneralConfigPart.prototype['tcp_port'] = undefined;
/**
 * @member {String} tls_cert
 */

GeneralConfigPart.prototype['tls_cert'] = undefined;
/**
 * @member {String} tls_key
 */

GeneralConfigPart.prototype['tls_key'] = undefined;
var _default = GeneralConfigPart;
exports["default"] = _default;