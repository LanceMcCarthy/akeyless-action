"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ApiClient = _interopRequireDefault(require("../ApiClient"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * The CreateAuthMethodLDAP model module.
 * @module model/CreateAuthMethodLDAP
 * @version 2.15.24
 */
var CreateAuthMethodLDAP = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>CreateAuthMethodLDAP</code>.
   * createAuthMethodLDAP is a command that creates a new auth method that will be able to authenticate using LDAP.
   * @alias module:model/CreateAuthMethodLDAP
   * @param name {String} Auth Method name
   */
  function CreateAuthMethodLDAP(name) {
    _classCallCheck(this, CreateAuthMethodLDAP);

    CreateAuthMethodLDAP.initialize(this, name);
  }
  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */


  _createClass(CreateAuthMethodLDAP, null, [{
    key: "initialize",
    value: function initialize(obj, name) {
      obj['name'] = name;
    }
    /**
     * Constructs a <code>CreateAuthMethodLDAP</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateAuthMethodLDAP} obj Optional instance to populate.
     * @return {module:model/CreateAuthMethodLDAP} The populated <code>CreateAuthMethodLDAP</code> instance.
     */

  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new CreateAuthMethodLDAP();

        if (data.hasOwnProperty('access-expires')) {
          obj['access-expires'] = _ApiClient["default"].convertToType(data['access-expires'], 'Number');
        }

        if (data.hasOwnProperty('bound-ips')) {
          obj['bound-ips'] = _ApiClient["default"].convertToType(data['bound-ips'], ['String']);
        }

        if (data.hasOwnProperty('force-sub-claims')) {
          obj['force-sub-claims'] = _ApiClient["default"].convertToType(data['force-sub-claims'], 'Boolean');
        }

        if (data.hasOwnProperty('name')) {
          obj['name'] = _ApiClient["default"].convertToType(data['name'], 'String');
        }

        if (data.hasOwnProperty('password')) {
          obj['password'] = _ApiClient["default"].convertToType(data['password'], 'String');
        }

        if (data.hasOwnProperty('token')) {
          obj['token'] = _ApiClient["default"].convertToType(data['token'], 'String');
        }

        if (data.hasOwnProperty('uid-token')) {
          obj['uid-token'] = _ApiClient["default"].convertToType(data['uid-token'], 'String');
        }

        if (data.hasOwnProperty('username')) {
          obj['username'] = _ApiClient["default"].convertToType(data['username'], 'String');
        }
      }

      return obj;
    }
  }]);

  return CreateAuthMethodLDAP;
}();
/**
 * Access expiration date in Unix timestamp (select 0 for access without expiry date)
 * @member {Number} access-expires
 * @default 0
 */


CreateAuthMethodLDAP.prototype['access-expires'] = 0;
/**
 * A CIDR whitelist with the IPs that the access is restricted to
 * @member {Array.<String>} bound-ips
 */

CreateAuthMethodLDAP.prototype['bound-ips'] = undefined;
/**
 * if true: enforce role-association must include sub claims
 * @member {Boolean} force-sub-claims
 */

CreateAuthMethodLDAP.prototype['force-sub-claims'] = undefined;
/**
 * Auth Method name
 * @member {String} name
 */

CreateAuthMethodLDAP.prototype['name'] = undefined;
/**
 * Required only when the authentication process requires a username and password
 * @member {String} password
 */

CreateAuthMethodLDAP.prototype['password'] = undefined;
/**
 * Authentication token (see `/auth` and `/configure`)
 * @member {String} token
 */

CreateAuthMethodLDAP.prototype['token'] = undefined;
/**
 * The universal identity token, Required only for universal_identity authentication
 * @member {String} uid-token
 */

CreateAuthMethodLDAP.prototype['uid-token'] = undefined;
/**
 * Required only when the authentication process requires a username and password
 * @member {String} username
 */

CreateAuthMethodLDAP.prototype['username'] = undefined;
var _default = CreateAuthMethodLDAP;
exports["default"] = _default;