"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ApiClient = _interopRequireDefault(require("../ApiClient"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * The GetKubeExecCreds model module.
 * @module model/GetKubeExecCreds
 * @version 5.0.0
 */
var GetKubeExecCreds = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>GetKubeExecCreds</code>.
   * getKubeExecCreds is a command that gets credentials for authentication with Kubernetes cluster based on a PKI cert issuer.
   * @alias module:model/GetKubeExecCreds
   * @param certIssuerName {String} The name of the PKI certificate issuer
   */
  function GetKubeExecCreds(certIssuerName) {
    _classCallCheck(this, GetKubeExecCreds);

    GetKubeExecCreds.initialize(this, certIssuerName);
  }
  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */


  _createClass(GetKubeExecCreds, null, [{
    key: "initialize",
    value: function initialize(obj, certIssuerName) {
      obj['api-version'] = 'v1';
      obj['cert-issuer-name'] = certIssuerName;
      obj['json'] = false;
      obj['max-path-len'] = -1;
    }
    /**
     * Constructs a <code>GetKubeExecCreds</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GetKubeExecCreds} obj Optional instance to populate.
     * @return {module:model/GetKubeExecCreds} The populated <code>GetKubeExecCreds</code> instance.
     */

  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new GetKubeExecCreds();

        if (data.hasOwnProperty('alt-names')) {
          obj['alt-names'] = _ApiClient["default"].convertToType(data['alt-names'], 'String');
        }

        if (data.hasOwnProperty('api-version')) {
          obj['api-version'] = _ApiClient["default"].convertToType(data['api-version'], 'String');
        }

        if (data.hasOwnProperty('cert-issuer-name')) {
          obj['cert-issuer-name'] = _ApiClient["default"].convertToType(data['cert-issuer-name'], 'String');
        }

        if (data.hasOwnProperty('common-name')) {
          obj['common-name'] = _ApiClient["default"].convertToType(data['common-name'], 'String');
        }

        if (data.hasOwnProperty('csr-data-base64')) {
          obj['csr-data-base64'] = _ApiClient["default"].convertToType(data['csr-data-base64'], 'String');
        }

        if (data.hasOwnProperty('extended-key-usage')) {
          obj['extended-key-usage'] = _ApiClient["default"].convertToType(data['extended-key-usage'], 'String');
        }

        if (data.hasOwnProperty('extra-extensions')) {
          obj['extra-extensions'] = _ApiClient["default"].convertToType(data['extra-extensions'], 'String');
        }

        if (data.hasOwnProperty('json')) {
          obj['json'] = _ApiClient["default"].convertToType(data['json'], 'Boolean');
        }

        if (data.hasOwnProperty('key-data-base64')) {
          obj['key-data-base64'] = _ApiClient["default"].convertToType(data['key-data-base64'], 'String');
        }

        if (data.hasOwnProperty('max-path-len')) {
          obj['max-path-len'] = _ApiClient["default"].convertToType(data['max-path-len'], 'Number');
        }

        if (data.hasOwnProperty('token')) {
          obj['token'] = _ApiClient["default"].convertToType(data['token'], 'String');
        }

        if (data.hasOwnProperty('ttl')) {
          obj['ttl'] = _ApiClient["default"].convertToType(data['ttl'], 'String');
        }

        if (data.hasOwnProperty('uid-token')) {
          obj['uid-token'] = _ApiClient["default"].convertToType(data['uid-token'], 'String');
        }

        if (data.hasOwnProperty('uri-sans')) {
          obj['uri-sans'] = _ApiClient["default"].convertToType(data['uri-sans'], 'String');
        }
      }

      return obj;
    }
    /**
     * Validates the JSON data with respect to <code>GetKubeExecCreds</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GetKubeExecCreds</code>.
     */

  }, {
    key: "validateJSON",
    value: function validateJSON(data) {
      // check to make sure all required properties are present in the JSON string
      var _iterator = _createForOfIteratorHelper(GetKubeExecCreds.RequiredProperties),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var property = _step.value;

          if (!data.hasOwnProperty(property)) {
            throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
          }
        } // ensure the json data is a string

      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      if (data['alt-names'] && !(typeof data['alt-names'] === 'string' || data['alt-names'] instanceof String)) {
        throw new Error("Expected the field `alt-names` to be a primitive type in the JSON string but got " + data['alt-names']);
      } // ensure the json data is a string


      if (data['api-version'] && !(typeof data['api-version'] === 'string' || data['api-version'] instanceof String)) {
        throw new Error("Expected the field `api-version` to be a primitive type in the JSON string but got " + data['api-version']);
      } // ensure the json data is a string


      if (data['cert-issuer-name'] && !(typeof data['cert-issuer-name'] === 'string' || data['cert-issuer-name'] instanceof String)) {
        throw new Error("Expected the field `cert-issuer-name` to be a primitive type in the JSON string but got " + data['cert-issuer-name']);
      } // ensure the json data is a string


      if (data['common-name'] && !(typeof data['common-name'] === 'string' || data['common-name'] instanceof String)) {
        throw new Error("Expected the field `common-name` to be a primitive type in the JSON string but got " + data['common-name']);
      } // ensure the json data is a string


      if (data['csr-data-base64'] && !(typeof data['csr-data-base64'] === 'string' || data['csr-data-base64'] instanceof String)) {
        throw new Error("Expected the field `csr-data-base64` to be a primitive type in the JSON string but got " + data['csr-data-base64']);
      } // ensure the json data is a string


      if (data['extended-key-usage'] && !(typeof data['extended-key-usage'] === 'string' || data['extended-key-usage'] instanceof String)) {
        throw new Error("Expected the field `extended-key-usage` to be a primitive type in the JSON string but got " + data['extended-key-usage']);
      } // ensure the json data is a string


      if (data['extra-extensions'] && !(typeof data['extra-extensions'] === 'string' || data['extra-extensions'] instanceof String)) {
        throw new Error("Expected the field `extra-extensions` to be a primitive type in the JSON string but got " + data['extra-extensions']);
      } // ensure the json data is a string


      if (data['key-data-base64'] && !(typeof data['key-data-base64'] === 'string' || data['key-data-base64'] instanceof String)) {
        throw new Error("Expected the field `key-data-base64` to be a primitive type in the JSON string but got " + data['key-data-base64']);
      } // ensure the json data is a string


      if (data['token'] && !(typeof data['token'] === 'string' || data['token'] instanceof String)) {
        throw new Error("Expected the field `token` to be a primitive type in the JSON string but got " + data['token']);
      } // ensure the json data is a string


      if (data['ttl'] && !(typeof data['ttl'] === 'string' || data['ttl'] instanceof String)) {
        throw new Error("Expected the field `ttl` to be a primitive type in the JSON string but got " + data['ttl']);
      } // ensure the json data is a string


      if (data['uid-token'] && !(typeof data['uid-token'] === 'string' || data['uid-token'] instanceof String)) {
        throw new Error("Expected the field `uid-token` to be a primitive type in the JSON string but got " + data['uid-token']);
      } // ensure the json data is a string


      if (data['uri-sans'] && !(typeof data['uri-sans'] === 'string' || data['uri-sans'] instanceof String)) {
        throw new Error("Expected the field `uri-sans` to be a primitive type in the JSON string but got " + data['uri-sans']);
      }

      return true;
    }
  }]);

  return GetKubeExecCreds;
}();

GetKubeExecCreds.RequiredProperties = ["cert-issuer-name"];
/**
 * The Subject Alternative Names to be included in the PKI certificate (in a comma-separated list) (if CSR is supplied this flag is ignored and any DNS.* names are taken from it)
 * @member {String} alt-names
 */

GetKubeExecCreds.prototype['alt-names'] = undefined;
/**
 * Client authentication API version
 * @member {String} api-version
 * @default 'v1'
 */

GetKubeExecCreds.prototype['api-version'] = 'v1';
/**
 * The name of the PKI certificate issuer
 * @member {String} cert-issuer-name
 */

GetKubeExecCreds.prototype['cert-issuer-name'] = undefined;
/**
 * The common name to be included in the PKI certificate (if CSR is supplied this flag is ignored and the CSR subject CN is taken)
 * @member {String} common-name
 */

GetKubeExecCreds.prototype['common-name'] = undefined;
/**
 * Certificate Signing Request contents encoded in base64 to generate the certificate with
 * @member {String} csr-data-base64
 */

GetKubeExecCreds.prototype['csr-data-base64'] = undefined;
/**
 * A comma-separated list of extended key usage requests which will be used for certificate issuance. Supported values: 'clientauth', 'serverauth'. If critical is present the extension will be marked as critical
 * @member {String} extended-key-usage
 */

GetKubeExecCreds.prototype['extended-key-usage'] = undefined;
/**
 * A json string that defines the requested extra extensions for the certificate
 * @member {String} extra-extensions
 */

GetKubeExecCreds.prototype['extra-extensions'] = undefined;
/**
 * Set output format to JSON
 * @member {Boolean} json
 * @default false
 */

GetKubeExecCreds.prototype['json'] = false;
/**
 * PKI key file contents. If this option is used, the certificate will be printed to stdout
 * @member {String} key-data-base64
 */

GetKubeExecCreds.prototype['key-data-base64'] = undefined;
/**
 * The maximum path length for the generated certificate. -1, means unlimited unless the signing certificate has a maximum path length set
 * @member {Number} max-path-len
 * @default -1
 */

GetKubeExecCreds.prototype['max-path-len'] = -1;
/**
 * Authentication token (see `/auth` and `/configure`)
 * @member {String} token
 */

GetKubeExecCreds.prototype['token'] = undefined;
/**
 * Updated certificate lifetime in seconds (must be less than the Certificate Issuer default TTL)
 * @member {String} ttl
 */

GetKubeExecCreds.prototype['ttl'] = undefined;
/**
 * The universal identity token, Required only for universal_identity authentication
 * @member {String} uid-token
 */

GetKubeExecCreds.prototype['uid-token'] = undefined;
/**
 * The URI Subject Alternative Names to be included in the PKI certificate (in a comma-separated list) (if CSR is supplied this flag is ignored and any URI.* names are taken from it)
 * @member {String} uri-sans
 */

GetKubeExecCreds.prototype['uri-sans'] = undefined;
var _default = GetKubeExecCreds;
exports["default"] = _default;