"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ApiClient = _interopRequireDefault(require("../ApiClient"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * The GatewayUpdateItem model module.
 * @module model/GatewayUpdateItem
 * @version 5.0.1
 */
var GatewayUpdateItem = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>GatewayUpdateItem</code>.
   * gatewayUpdateItem is a command that updates classic key
   * @alias module:model/GatewayUpdateItem
   * @param name {String} Item name
   * @param type {String} Item type
   */
  function GatewayUpdateItem(name, type) {
    _classCallCheck(this, GatewayUpdateItem);

    GatewayUpdateItem.initialize(this, name, type);
  }
  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */


  _createClass(GatewayUpdateItem, null, [{
    key: "initialize",
    value: function initialize(obj, name, type) {
      obj['description'] = 'default_metadata';
      obj['json'] = false;
      obj['name'] = name;
      obj['new-metadata'] = 'default_metadata';
      obj['rotation-hour'] = 0;
      obj['rotator-creds-type'] = 'use-self-creds';
      obj['type'] = type;
    }
    /**
     * Constructs a <code>GatewayUpdateItem</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GatewayUpdateItem} obj Optional instance to populate.
     * @return {module:model/GatewayUpdateItem} The populated <code>GatewayUpdateItem</code> instance.
     */

  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new GatewayUpdateItem();

        if (data.hasOwnProperty('add-tag')) {
          obj['add-tag'] = _ApiClient["default"].convertToType(data['add-tag'], ['String']);
        }

        if (data.hasOwnProperty('api-id')) {
          obj['api-id'] = _ApiClient["default"].convertToType(data['api-id'], 'String');
        }

        if (data.hasOwnProperty('api-key')) {
          obj['api-key'] = _ApiClient["default"].convertToType(data['api-key'], 'String');
        }

        if (data.hasOwnProperty('app-id')) {
          obj['app-id'] = _ApiClient["default"].convertToType(data['app-id'], 'String');
        }

        if (data.hasOwnProperty('auto-rotate')) {
          obj['auto-rotate'] = _ApiClient["default"].convertToType(data['auto-rotate'], 'String');
        }

        if (data.hasOwnProperty('custom-payload')) {
          obj['custom-payload'] = _ApiClient["default"].convertToType(data['custom-payload'], 'String');
        }

        if (data.hasOwnProperty('delete_protection')) {
          obj['delete_protection'] = _ApiClient["default"].convertToType(data['delete_protection'], 'String');
        }

        if (data.hasOwnProperty('description')) {
          obj['description'] = _ApiClient["default"].convertToType(data['description'], 'String');
        }

        if (data.hasOwnProperty('gcp-key')) {
          obj['gcp-key'] = _ApiClient["default"].convertToType(data['gcp-key'], 'String');
        }

        if (data.hasOwnProperty('gcp-service-account-email')) {
          obj['gcp-service-account-email'] = _ApiClient["default"].convertToType(data['gcp-service-account-email'], 'String');
        }

        if (data.hasOwnProperty('gcp-service-account-key-id')) {
          obj['gcp-service-account-key-id'] = _ApiClient["default"].convertToType(data['gcp-service-account-key-id'], 'String');
        }

        if (data.hasOwnProperty('grace-rotation')) {
          obj['grace-rotation'] = _ApiClient["default"].convertToType(data['grace-rotation'], 'String');
        }

        if (data.hasOwnProperty('json')) {
          obj['json'] = _ApiClient["default"].convertToType(data['json'], 'Boolean');
        }

        if (data.hasOwnProperty('keep-prev-version')) {
          obj['keep-prev-version'] = _ApiClient["default"].convertToType(data['keep-prev-version'], 'String');
        }

        if (data.hasOwnProperty('key')) {
          obj['key'] = _ApiClient["default"].convertToType(data['key'], 'String');
        }

        if (data.hasOwnProperty('name')) {
          obj['name'] = _ApiClient["default"].convertToType(data['name'], 'String');
        }

        if (data.hasOwnProperty('new-metadata')) {
          obj['new-metadata'] = _ApiClient["default"].convertToType(data['new-metadata'], 'String');
        }

        if (data.hasOwnProperty('new-name')) {
          obj['new-name'] = _ApiClient["default"].convertToType(data['new-name'], 'String');
        }

        if (data.hasOwnProperty('new-version')) {
          obj['new-version'] = _ApiClient["default"].convertToType(data['new-version'], 'Boolean');
        }

        if (data.hasOwnProperty('password-length')) {
          obj['password-length'] = _ApiClient["default"].convertToType(data['password-length'], 'String');
        }

        if (data.hasOwnProperty('rm-tag')) {
          obj['rm-tag'] = _ApiClient["default"].convertToType(data['rm-tag'], ['String']);
        }

        if (data.hasOwnProperty('rotated-password')) {
          obj['rotated-password'] = _ApiClient["default"].convertToType(data['rotated-password'], 'String');
        }

        if (data.hasOwnProperty('rotated-username')) {
          obj['rotated-username'] = _ApiClient["default"].convertToType(data['rotated-username'], 'String');
        }

        if (data.hasOwnProperty('rotation-event-in')) {
          obj['rotation-event-in'] = _ApiClient["default"].convertToType(data['rotation-event-in'], ['String']);
        }

        if (data.hasOwnProperty('rotation-hour')) {
          obj['rotation-hour'] = _ApiClient["default"].convertToType(data['rotation-hour'], 'Number');
        }

        if (data.hasOwnProperty('rotation-interval')) {
          obj['rotation-interval'] = _ApiClient["default"].convertToType(data['rotation-interval'], 'String');
        }

        if (data.hasOwnProperty('rotator-creds-type')) {
          obj['rotator-creds-type'] = _ApiClient["default"].convertToType(data['rotator-creds-type'], 'String');
        }

        if (data.hasOwnProperty('token')) {
          obj['token'] = _ApiClient["default"].convertToType(data['token'], 'String');
        }

        if (data.hasOwnProperty('type')) {
          obj['type'] = _ApiClient["default"].convertToType(data['type'], 'String');
        }

        if (data.hasOwnProperty('uid-token')) {
          obj['uid-token'] = _ApiClient["default"].convertToType(data['uid-token'], 'String');
        }
      }

      return obj;
    }
    /**
     * Validates the JSON data with respect to <code>GatewayUpdateItem</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GatewayUpdateItem</code>.
     */

  }, {
    key: "validateJSON",
    value: function validateJSON(data) {
      // check to make sure all required properties are present in the JSON string
      var _iterator = _createForOfIteratorHelper(GatewayUpdateItem.RequiredProperties),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var property = _step.value;

          if (!data.hasOwnProperty(property)) {
            throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
          }
        } // ensure the json data is an array

      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      if (!Array.isArray(data['add-tag'])) {
        throw new Error("Expected the field `add-tag` to be an array in the JSON data but got " + data['add-tag']);
      } // ensure the json data is a string


      if (data['api-id'] && !(typeof data['api-id'] === 'string' || data['api-id'] instanceof String)) {
        throw new Error("Expected the field `api-id` to be a primitive type in the JSON string but got " + data['api-id']);
      } // ensure the json data is a string


      if (data['api-key'] && !(typeof data['api-key'] === 'string' || data['api-key'] instanceof String)) {
        throw new Error("Expected the field `api-key` to be a primitive type in the JSON string but got " + data['api-key']);
      } // ensure the json data is a string


      if (data['app-id'] && !(typeof data['app-id'] === 'string' || data['app-id'] instanceof String)) {
        throw new Error("Expected the field `app-id` to be a primitive type in the JSON string but got " + data['app-id']);
      } // ensure the json data is a string


      if (data['auto-rotate'] && !(typeof data['auto-rotate'] === 'string' || data['auto-rotate'] instanceof String)) {
        throw new Error("Expected the field `auto-rotate` to be a primitive type in the JSON string but got " + data['auto-rotate']);
      } // ensure the json data is a string


      if (data['custom-payload'] && !(typeof data['custom-payload'] === 'string' || data['custom-payload'] instanceof String)) {
        throw new Error("Expected the field `custom-payload` to be a primitive type in the JSON string but got " + data['custom-payload']);
      } // ensure the json data is a string


      if (data['delete_protection'] && !(typeof data['delete_protection'] === 'string' || data['delete_protection'] instanceof String)) {
        throw new Error("Expected the field `delete_protection` to be a primitive type in the JSON string but got " + data['delete_protection']);
      } // ensure the json data is a string


      if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
        throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
      } // ensure the json data is a string


      if (data['gcp-key'] && !(typeof data['gcp-key'] === 'string' || data['gcp-key'] instanceof String)) {
        throw new Error("Expected the field `gcp-key` to be a primitive type in the JSON string but got " + data['gcp-key']);
      } // ensure the json data is a string


      if (data['gcp-service-account-email'] && !(typeof data['gcp-service-account-email'] === 'string' || data['gcp-service-account-email'] instanceof String)) {
        throw new Error("Expected the field `gcp-service-account-email` to be a primitive type in the JSON string but got " + data['gcp-service-account-email']);
      } // ensure the json data is a string


      if (data['gcp-service-account-key-id'] && !(typeof data['gcp-service-account-key-id'] === 'string' || data['gcp-service-account-key-id'] instanceof String)) {
        throw new Error("Expected the field `gcp-service-account-key-id` to be a primitive type in the JSON string but got " + data['gcp-service-account-key-id']);
      } // ensure the json data is a string


      if (data['grace-rotation'] && !(typeof data['grace-rotation'] === 'string' || data['grace-rotation'] instanceof String)) {
        throw new Error("Expected the field `grace-rotation` to be a primitive type in the JSON string but got " + data['grace-rotation']);
      } // ensure the json data is a string


      if (data['keep-prev-version'] && !(typeof data['keep-prev-version'] === 'string' || data['keep-prev-version'] instanceof String)) {
        throw new Error("Expected the field `keep-prev-version` to be a primitive type in the JSON string but got " + data['keep-prev-version']);
      } // ensure the json data is a string


      if (data['key'] && !(typeof data['key'] === 'string' || data['key'] instanceof String)) {
        throw new Error("Expected the field `key` to be a primitive type in the JSON string but got " + data['key']);
      } // ensure the json data is a string


      if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
        throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
      } // ensure the json data is a string


      if (data['new-metadata'] && !(typeof data['new-metadata'] === 'string' || data['new-metadata'] instanceof String)) {
        throw new Error("Expected the field `new-metadata` to be a primitive type in the JSON string but got " + data['new-metadata']);
      } // ensure the json data is a string


      if (data['new-name'] && !(typeof data['new-name'] === 'string' || data['new-name'] instanceof String)) {
        throw new Error("Expected the field `new-name` to be a primitive type in the JSON string but got " + data['new-name']);
      } // ensure the json data is a string


      if (data['password-length'] && !(typeof data['password-length'] === 'string' || data['password-length'] instanceof String)) {
        throw new Error("Expected the field `password-length` to be a primitive type in the JSON string but got " + data['password-length']);
      } // ensure the json data is an array


      if (!Array.isArray(data['rm-tag'])) {
        throw new Error("Expected the field `rm-tag` to be an array in the JSON data but got " + data['rm-tag']);
      } // ensure the json data is a string


      if (data['rotated-password'] && !(typeof data['rotated-password'] === 'string' || data['rotated-password'] instanceof String)) {
        throw new Error("Expected the field `rotated-password` to be a primitive type in the JSON string but got " + data['rotated-password']);
      } // ensure the json data is a string


      if (data['rotated-username'] && !(typeof data['rotated-username'] === 'string' || data['rotated-username'] instanceof String)) {
        throw new Error("Expected the field `rotated-username` to be a primitive type in the JSON string but got " + data['rotated-username']);
      } // ensure the json data is an array


      if (!Array.isArray(data['rotation-event-in'])) {
        throw new Error("Expected the field `rotation-event-in` to be an array in the JSON data but got " + data['rotation-event-in']);
      } // ensure the json data is a string


      if (data['rotation-interval'] && !(typeof data['rotation-interval'] === 'string' || data['rotation-interval'] instanceof String)) {
        throw new Error("Expected the field `rotation-interval` to be a primitive type in the JSON string but got " + data['rotation-interval']);
      } // ensure the json data is a string


      if (data['rotator-creds-type'] && !(typeof data['rotator-creds-type'] === 'string' || data['rotator-creds-type'] instanceof String)) {
        throw new Error("Expected the field `rotator-creds-type` to be a primitive type in the JSON string but got " + data['rotator-creds-type']);
      } // ensure the json data is a string


      if (data['token'] && !(typeof data['token'] === 'string' || data['token'] instanceof String)) {
        throw new Error("Expected the field `token` to be a primitive type in the JSON string but got " + data['token']);
      } // ensure the json data is a string


      if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
        throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
      } // ensure the json data is a string


      if (data['uid-token'] && !(typeof data['uid-token'] === 'string' || data['uid-token'] instanceof String)) {
        throw new Error("Expected the field `uid-token` to be a primitive type in the JSON string but got " + data['uid-token']);
      }

      return true;
    }
  }]);

  return GatewayUpdateItem;
}();

GatewayUpdateItem.RequiredProperties = ["name", "type"];
/**
 * List of the new tags that will be attached to this item
 * @member {Array.<String>} add-tag
 */

GatewayUpdateItem.prototype['add-tag'] = undefined;
/**
 * API ID to rotate (relevant only for rotator-type=api-key)
 * @member {String} api-id
 */

GatewayUpdateItem.prototype['api-id'] = undefined;
/**
 * API key to rotate (relevant only for rotator-type=api-key)
 * @member {String} api-key
 */

GatewayUpdateItem.prototype['api-key'] = undefined;
/**
 * ApplicationId (used in azure)
 * @member {String} app-id
 */

GatewayUpdateItem.prototype['app-id'] = undefined;
/**
 * Whether to automatically rotate every --rotation-interval days, or disable existing automatic rotation [true/false]
 * @member {String} auto-rotate
 */

GatewayUpdateItem.prototype['auto-rotate'] = undefined;
/**
 * Secret payload to be sent with rotation request (relevant only for rotator-type=custom)
 * @member {String} custom-payload
 */

GatewayUpdateItem.prototype['custom-payload'] = undefined;
/**
 * Protection from accidental deletion of this object [true/false]
 * @member {String} delete_protection
 */

GatewayUpdateItem.prototype['delete_protection'] = undefined;
/**
 * Description of the object
 * @member {String} description
 * @default 'default_metadata'
 */

GatewayUpdateItem.prototype['description'] = 'default_metadata';
/**
 * Base64-encoded service account private key text
 * @member {String} gcp-key
 */

GatewayUpdateItem.prototype['gcp-key'] = undefined;
/**
 * The email of the gcp service account to rotate
 * @member {String} gcp-service-account-email
 */

GatewayUpdateItem.prototype['gcp-service-account-email'] = undefined;
/**
 * The key id of the gcp service account to rotate
 * @member {String} gcp-service-account-key-id
 */

GatewayUpdateItem.prototype['gcp-service-account-key-id'] = undefined;
/**
 * Create a new access key without deleting the old key from AWS for backup (relevant only for AWS) [true/false]
 * @member {String} grace-rotation
 */

GatewayUpdateItem.prototype['grace-rotation'] = undefined;
/**
 * Set output format to JSON
 * @member {Boolean} json
 * @default false
 */

GatewayUpdateItem.prototype['json'] = false;
/**
 * Whether to keep previous version [true/false]. (relevant only for --type=rotated-secret). If not set, use default according to account settings
 * @member {String} keep-prev-version
 */

GatewayUpdateItem.prototype['keep-prev-version'] = undefined;
/**
 * The name of a key that used to encrypt the secret value (if empty, the account default protectionKey key will be used)
 * @member {String} key
 */

GatewayUpdateItem.prototype['key'] = undefined;
/**
 * Item name
 * @member {String} name
 */

GatewayUpdateItem.prototype['name'] = undefined;
/**
 * Deprecated - use description
 * @member {String} new-metadata
 * @default 'default_metadata'
 */

GatewayUpdateItem.prototype['new-metadata'] = 'default_metadata';
/**
 * New item name
 * @member {String} new-name
 */

GatewayUpdateItem.prototype['new-name'] = undefined;
/**
 * Deprecated
 * @member {Boolean} new-version
 */

GatewayUpdateItem.prototype['new-version'] = undefined;
/**
 * The length of the password to be generated
 * @member {String} password-length
 */

GatewayUpdateItem.prototype['password-length'] = undefined;
/**
 * List of the existent tags that will be removed from this item
 * @member {Array.<String>} rm-tag
 */

GatewayUpdateItem.prototype['rm-tag'] = undefined;
/**
 * rotated-username password (relevant only for rotator-type=password)
 * @member {String} rotated-password
 */

GatewayUpdateItem.prototype['rotated-password'] = undefined;
/**
 * username to be rotated, if selected \\\"use-self-creds\\\" at rotator-creds-type, this username will try to rotate it's own password, if \\\"use-target-creds\\\" is selected, target credentials will be use to rotate the rotated-password (relevant only for rotator-type=password)
 * @member {String} rotated-username
 */

GatewayUpdateItem.prototype['rotated-username'] = undefined;
/**
 * How many days before the rotation of the item would you like to be notified
 * @member {Array.<String>} rotation-event-in
 */

GatewayUpdateItem.prototype['rotation-event-in'] = undefined;
/**
 * The Rotation Hour
 * @member {Number} rotation-hour
 * @default 0
 */

GatewayUpdateItem.prototype['rotation-hour'] = 0;
/**
 * The number of days to wait between every automatic key rotation (1-365)
 * @member {String} rotation-interval
 */

GatewayUpdateItem.prototype['rotation-interval'] = undefined;
/**
 * The rotation credentials type
 * @member {String} rotator-creds-type
 * @default 'use-self-creds'
 */

GatewayUpdateItem.prototype['rotator-creds-type'] = 'use-self-creds';
/**
 * Authentication token (see `/auth` and `/configure`)
 * @member {String} token
 */

GatewayUpdateItem.prototype['token'] = undefined;
/**
 * Item type
 * @member {String} type
 */

GatewayUpdateItem.prototype['type'] = undefined;
/**
 * The universal identity token, Required only for universal_identity authentication
 * @member {String} uid-token
 */

GatewayUpdateItem.prototype['uid-token'] = undefined;
var _default = GatewayUpdateItem;
exports["default"] = _default;