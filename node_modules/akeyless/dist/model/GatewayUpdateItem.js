"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ApiClient = _interopRequireDefault(require("../ApiClient"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * The GatewayUpdateItem model module.
 * @module model/GatewayUpdateItem
 * @version 3.5.1
 */
var GatewayUpdateItem = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>GatewayUpdateItem</code>.
   * gatewayUpdateItem is a command that updates classic key
   * @alias module:model/GatewayUpdateItem
   * @param name {String} Item name
   * @param type {String} Item type
   */
  function GatewayUpdateItem(name, type) {
    _classCallCheck(this, GatewayUpdateItem);

    GatewayUpdateItem.initialize(this, name, type);
  }
  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */


  _createClass(GatewayUpdateItem, null, [{
    key: "initialize",
    value: function initialize(obj, name, type) {
      obj['name'] = name;
      obj['type'] = type;
    }
    /**
     * Constructs a <code>GatewayUpdateItem</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GatewayUpdateItem} obj Optional instance to populate.
     * @return {module:model/GatewayUpdateItem} The populated <code>GatewayUpdateItem</code> instance.
     */

  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new GatewayUpdateItem();

        if (data.hasOwnProperty('add-tag')) {
          obj['add-tag'] = _ApiClient["default"].convertToType(data['add-tag'], ['String']);
        }

        if (data.hasOwnProperty('api-id')) {
          obj['api-id'] = _ApiClient["default"].convertToType(data['api-id'], 'String');
        }

        if (data.hasOwnProperty('api-key')) {
          obj['api-key'] = _ApiClient["default"].convertToType(data['api-key'], 'String');
        }

        if (data.hasOwnProperty('auto-rotate')) {
          obj['auto-rotate'] = _ApiClient["default"].convertToType(data['auto-rotate'], 'String');
        }

        if (data.hasOwnProperty('custom-payload')) {
          obj['custom-payload'] = _ApiClient["default"].convertToType(data['custom-payload'], 'String');
        }

        if (data.hasOwnProperty('delete_protection')) {
          obj['delete_protection'] = _ApiClient["default"].convertToType(data['delete_protection'], 'String');
        }

        if (data.hasOwnProperty('description')) {
          obj['description'] = _ApiClient["default"].convertToType(data['description'], 'String');
        }

        if (data.hasOwnProperty('gcp-key')) {
          obj['gcp-key'] = _ApiClient["default"].convertToType(data['gcp-key'], 'String');
        }

        if (data.hasOwnProperty('gcp-service-account-email')) {
          obj['gcp-service-account-email'] = _ApiClient["default"].convertToType(data['gcp-service-account-email'], 'String');
        }

        if (data.hasOwnProperty('gcp-service-account-key-id')) {
          obj['gcp-service-account-key-id'] = _ApiClient["default"].convertToType(data['gcp-service-account-key-id'], 'String');
        }

        if (data.hasOwnProperty('json')) {
          obj['json'] = _ApiClient["default"].convertToType(data['json'], 'Boolean');
        }

        if (data.hasOwnProperty('keep-prev-version')) {
          obj['keep-prev-version'] = _ApiClient["default"].convertToType(data['keep-prev-version'], 'String');
        }

        if (data.hasOwnProperty('key')) {
          obj['key'] = _ApiClient["default"].convertToType(data['key'], 'String');
        }

        if (data.hasOwnProperty('name')) {
          obj['name'] = _ApiClient["default"].convertToType(data['name'], 'String');
        }

        if (data.hasOwnProperty('new-metadata')) {
          obj['new-metadata'] = _ApiClient["default"].convertToType(data['new-metadata'], 'String');
        }

        if (data.hasOwnProperty('new-name')) {
          obj['new-name'] = _ApiClient["default"].convertToType(data['new-name'], 'String');
        }

        if (data.hasOwnProperty('new-version')) {
          obj['new-version'] = _ApiClient["default"].convertToType(data['new-version'], 'Boolean');
        }

        if (data.hasOwnProperty('rm-tag')) {
          obj['rm-tag'] = _ApiClient["default"].convertToType(data['rm-tag'], ['String']);
        }

        if (data.hasOwnProperty('rotated-password')) {
          obj['rotated-password'] = _ApiClient["default"].convertToType(data['rotated-password'], 'String');
        }

        if (data.hasOwnProperty('rotated-username')) {
          obj['rotated-username'] = _ApiClient["default"].convertToType(data['rotated-username'], 'String');
        }

        if (data.hasOwnProperty('rotation-hour')) {
          obj['rotation-hour'] = _ApiClient["default"].convertToType(data['rotation-hour'], 'Number');
        }

        if (data.hasOwnProperty('rotation-interval')) {
          obj['rotation-interval'] = _ApiClient["default"].convertToType(data['rotation-interval'], 'String');
        }

        if (data.hasOwnProperty('rotator-creds-type')) {
          obj['rotator-creds-type'] = _ApiClient["default"].convertToType(data['rotator-creds-type'], 'String');
        }

        if (data.hasOwnProperty('token')) {
          obj['token'] = _ApiClient["default"].convertToType(data['token'], 'String');
        }

        if (data.hasOwnProperty('type')) {
          obj['type'] = _ApiClient["default"].convertToType(data['type'], 'String');
        }

        if (data.hasOwnProperty('uid-token')) {
          obj['uid-token'] = _ApiClient["default"].convertToType(data['uid-token'], 'String');
        }
      }

      return obj;
    }
  }]);

  return GatewayUpdateItem;
}();
/**
 * List of the new tags that will be attached to this item
 * @member {Array.<String>} add-tag
 */


GatewayUpdateItem.prototype['add-tag'] = undefined;
/**
 * API ID to rotate (relevant only for rotator-type=api-key)
 * @member {String} api-id
 */

GatewayUpdateItem.prototype['api-id'] = undefined;
/**
 * API key to rotate (relevant only for rotator-type=api-key)
 * @member {String} api-key
 */

GatewayUpdateItem.prototype['api-key'] = undefined;
/**
 * Whether to automatically rotate every --rotation-interval days, or disable existing automatic rotation [true/false]
 * @member {String} auto-rotate
 */

GatewayUpdateItem.prototype['auto-rotate'] = undefined;
/**
 * Secret payload to be sent with rotation request (relevant only for rotator-type=custom)
 * @member {String} custom-payload
 */

GatewayUpdateItem.prototype['custom-payload'] = undefined;
/**
 * Protection from accidental deletion of this item [true/false]
 * @member {String} delete_protection
 */

GatewayUpdateItem.prototype['delete_protection'] = undefined;
/**
 * Description of the object
 * @member {String} description
 * @default 'default_metadata'
 */

GatewayUpdateItem.prototype['description'] = 'default_metadata';
/**
 * Base64-encoded service account private key text
 * @member {String} gcp-key
 */

GatewayUpdateItem.prototype['gcp-key'] = undefined;
/**
 * The email of the gcp service account to rotate
 * @member {String} gcp-service-account-email
 */

GatewayUpdateItem.prototype['gcp-service-account-email'] = undefined;
/**
 * The key id of the gcp service account to rotate
 * @member {String} gcp-service-account-key-id
 */

GatewayUpdateItem.prototype['gcp-service-account-key-id'] = undefined;
/**
 * Set output format to JSON
 * @member {Boolean} json
 * @default false
 */

GatewayUpdateItem.prototype['json'] = false;
/**
 * Whether to keep previous version [true/false]. (relevant only for --type=rotated-secret). If not set, use default according to account settings
 * @member {String} keep-prev-version
 */

GatewayUpdateItem.prototype['keep-prev-version'] = undefined;
/**
 * The name of a key that used to encrypt the secret value (if empty, the account default protectionKey key will be used)
 * @member {String} key
 */

GatewayUpdateItem.prototype['key'] = undefined;
/**
 * Item name
 * @member {String} name
 */

GatewayUpdateItem.prototype['name'] = undefined;
/**
 * Deprecated - use description
 * @member {String} new-metadata
 * @default 'default_metadata'
 */

GatewayUpdateItem.prototype['new-metadata'] = 'default_metadata';
/**
 * New item name
 * @member {String} new-name
 */

GatewayUpdateItem.prototype['new-name'] = undefined;
/**
 * Deprecated
 * @member {Boolean} new-version
 */

GatewayUpdateItem.prototype['new-version'] = undefined;
/**
 * List of the existent tags that will be removed from this item
 * @member {Array.<String>} rm-tag
 */

GatewayUpdateItem.prototype['rm-tag'] = undefined;
/**
 * rotated-username password (relevant only for rotator-type=password)
 * @member {String} rotated-password
 */

GatewayUpdateItem.prototype['rotated-password'] = undefined;
/**
 * username to be rotated, if selected \\\"use-self-creds\\\" at rotator-creds-type, this username will try to rotate it's own password, if \\\"use-target-creds\\\" is selected, target credentials will be use to rotate the rotated-password (relevant only for rotator-type=password)
 * @member {String} rotated-username
 */

GatewayUpdateItem.prototype['rotated-username'] = undefined;
/**
 * The Rotation Hour
 * @member {Number} rotation-hour
 * @default 0
 */

GatewayUpdateItem.prototype['rotation-hour'] = 0;
/**
 * The number of days to wait between every automatic key rotation (1-365)
 * @member {String} rotation-interval
 */

GatewayUpdateItem.prototype['rotation-interval'] = undefined;
/**
 * The rotation credentials type
 * @member {String} rotator-creds-type
 * @default 'use-self-creds'
 */

GatewayUpdateItem.prototype['rotator-creds-type'] = 'use-self-creds';
/**
 * Authentication token (see `/auth` and `/configure`)
 * @member {String} token
 */

GatewayUpdateItem.prototype['token'] = undefined;
/**
 * Item type
 * @member {String} type
 */

GatewayUpdateItem.prototype['type'] = undefined;
/**
 * The universal identity token, Required only for universal_identity authentication
 * @member {String} uid-token
 */

GatewayUpdateItem.prototype['uid-token'] = undefined;
var _default = GatewayUpdateItem;
exports["default"] = _default;