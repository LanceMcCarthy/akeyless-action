"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ApiClient = _interopRequireDefault(require("../ApiClient"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * The DynamicSecretUpdateGitlab model module.
 * @module model/DynamicSecretUpdateGitlab
 * @version 4.2.0
 */
var DynamicSecretUpdateGitlab = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>DynamicSecretUpdateGitlab</code>.
   * dynamicSecretUpdateGitlab is a command that updates gitlab dynamic secret
   * @alias module:model/DynamicSecretUpdateGitlab
   * @param gitlabAccessType {String} Gitlab access token type [project,group]
   * @param gitlabTokenScopes {String} Comma-separated list of access token scopes to grant
   * @param name {String} Dynamic secret name
   */
  function DynamicSecretUpdateGitlab(gitlabAccessType, gitlabTokenScopes, name) {
    _classCallCheck(this, DynamicSecretUpdateGitlab);

    DynamicSecretUpdateGitlab.initialize(this, gitlabAccessType, gitlabTokenScopes, name);
  }
  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */


  _createClass(DynamicSecretUpdateGitlab, null, [{
    key: "initialize",
    value: function initialize(obj, gitlabAccessType, gitlabTokenScopes, name) {
      obj['gitlab-access-type'] = gitlabAccessType;
      obj['gitlab-token-scopes'] = gitlabTokenScopes;
      obj['name'] = name;
    }
    /**
     * Constructs a <code>DynamicSecretUpdateGitlab</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DynamicSecretUpdateGitlab} obj Optional instance to populate.
     * @return {module:model/DynamicSecretUpdateGitlab} The populated <code>DynamicSecretUpdateGitlab</code> instance.
     */

  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new DynamicSecretUpdateGitlab();

        if (data.hasOwnProperty('delete_protection')) {
          obj['delete_protection'] = _ApiClient["default"].convertToType(data['delete_protection'], 'String');
        }

        if (data.hasOwnProperty('description')) {
          obj['description'] = _ApiClient["default"].convertToType(data['description'], 'String');
        }

        if (data.hasOwnProperty('gitlab-access-token')) {
          obj['gitlab-access-token'] = _ApiClient["default"].convertToType(data['gitlab-access-token'], 'String');
        }

        if (data.hasOwnProperty('gitlab-access-type')) {
          obj['gitlab-access-type'] = _ApiClient["default"].convertToType(data['gitlab-access-type'], 'String');
        }

        if (data.hasOwnProperty('gitlab-certificate')) {
          obj['gitlab-certificate'] = _ApiClient["default"].convertToType(data['gitlab-certificate'], 'String');
        }

        if (data.hasOwnProperty('gitlab-role')) {
          obj['gitlab-role'] = _ApiClient["default"].convertToType(data['gitlab-role'], 'String');
        }

        if (data.hasOwnProperty('gitlab-token-scopes')) {
          obj['gitlab-token-scopes'] = _ApiClient["default"].convertToType(data['gitlab-token-scopes'], 'String');
        }

        if (data.hasOwnProperty('gitlab-url')) {
          obj['gitlab-url'] = _ApiClient["default"].convertToType(data['gitlab-url'], 'String');
        }

        if (data.hasOwnProperty('group-name')) {
          obj['group-name'] = _ApiClient["default"].convertToType(data['group-name'], 'String');
        }

        if (data.hasOwnProperty('installation-organization')) {
          obj['installation-organization'] = _ApiClient["default"].convertToType(data['installation-organization'], 'String');
        }

        if (data.hasOwnProperty('json')) {
          obj['json'] = _ApiClient["default"].convertToType(data['json'], 'Boolean');
        }

        if (data.hasOwnProperty('name')) {
          obj['name'] = _ApiClient["default"].convertToType(data['name'], 'String');
        }

        if (data.hasOwnProperty('new-name')) {
          obj['new-name'] = _ApiClient["default"].convertToType(data['new-name'], 'String');
        }

        if (data.hasOwnProperty('tags')) {
          obj['tags'] = _ApiClient["default"].convertToType(data['tags'], ['String']);
        }

        if (data.hasOwnProperty('target-name')) {
          obj['target-name'] = _ApiClient["default"].convertToType(data['target-name'], 'String');
        }

        if (data.hasOwnProperty('token')) {
          obj['token'] = _ApiClient["default"].convertToType(data['token'], 'String');
        }

        if (data.hasOwnProperty('ttl')) {
          obj['ttl'] = _ApiClient["default"].convertToType(data['ttl'], 'String');
        }

        if (data.hasOwnProperty('uid-token')) {
          obj['uid-token'] = _ApiClient["default"].convertToType(data['uid-token'], 'String');
        }
      }

      return obj;
    }
  }]);

  return DynamicSecretUpdateGitlab;
}();
/**
 * Protection from accidental deletion of this item [true/false]
 * @member {String} delete_protection
 */


DynamicSecretUpdateGitlab.prototype['delete_protection'] = undefined;
/**
 * Description of the object
 * @member {String} description
 */

DynamicSecretUpdateGitlab.prototype['description'] = undefined;
/**
 * Gitlab access token
 * @member {String} gitlab-access-token
 */

DynamicSecretUpdateGitlab.prototype['gitlab-access-token'] = undefined;
/**
 * Gitlab access token type [project,group]
 * @member {String} gitlab-access-type
 */

DynamicSecretUpdateGitlab.prototype['gitlab-access-type'] = undefined;
/**
 * Gitlab tls certificate (base64 encoded)
 * @member {String} gitlab-certificate
 */

DynamicSecretUpdateGitlab.prototype['gitlab-certificate'] = undefined;
/**
 * Gitlab role
 * @member {String} gitlab-role
 */

DynamicSecretUpdateGitlab.prototype['gitlab-role'] = undefined;
/**
 * Comma-separated list of access token scopes to grant
 * @member {String} gitlab-token-scopes
 */

DynamicSecretUpdateGitlab.prototype['gitlab-token-scopes'] = undefined;
/**
 * Gitlab base url
 * @member {String} gitlab-url
 * @default 'https://gitlab.com/'
 */

DynamicSecretUpdateGitlab.prototype['gitlab-url'] = 'https://gitlab.com/';
/**
 * Gitlab group name, required for access-type=group
 * @member {String} group-name
 */

DynamicSecretUpdateGitlab.prototype['group-name'] = undefined;
/**
 * Gitlab project name, required for access-type=project
 * @member {String} installation-organization
 */

DynamicSecretUpdateGitlab.prototype['installation-organization'] = undefined;
/**
 * Set output format to JSON
 * @member {Boolean} json
 * @default false
 */

DynamicSecretUpdateGitlab.prototype['json'] = false;
/**
 * Dynamic secret name
 * @member {String} name
 */

DynamicSecretUpdateGitlab.prototype['name'] = undefined;
/**
 * Dynamic secret new name
 * @member {String} new-name
 */

DynamicSecretUpdateGitlab.prototype['new-name'] = undefined;
/**
 * Add tags attached to this object
 * @member {Array.<String>} tags
 */

DynamicSecretUpdateGitlab.prototype['tags'] = undefined;
/**
 * Target name
 * @member {String} target-name
 */

DynamicSecretUpdateGitlab.prototype['target-name'] = undefined;
/**
 * Authentication token (see `/auth` and `/configure`)
 * @member {String} token
 */

DynamicSecretUpdateGitlab.prototype['token'] = undefined;
/**
 * Access Token TTL
 * @member {String} ttl
 */

DynamicSecretUpdateGitlab.prototype['ttl'] = undefined;
/**
 * The universal identity token, Required only for universal_identity authentication
 * @member {String} uid-token
 */

DynamicSecretUpdateGitlab.prototype['uid-token'] = undefined;
var _default = DynamicSecretUpdateGitlab;
exports["default"] = _default;