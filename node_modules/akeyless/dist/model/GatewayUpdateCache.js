"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ApiClient = _interopRequireDefault(require("../ApiClient"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * The GatewayUpdateCache model module.
 * @module model/GatewayUpdateCache
 * @version 5.0.3
 */
var GatewayUpdateCache = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>GatewayUpdateCache</code>.
   * gatewayUpdateCache is a command that updates cache settings
   * @alias module:model/GatewayUpdateCache
   */
  function GatewayUpdateCache() {
    _classCallCheck(this, GatewayUpdateCache);

    GatewayUpdateCache.initialize(this);
  }
  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */


  _createClass(GatewayUpdateCache, null, [{
    key: "initialize",
    value: function initialize(obj) {
      obj['backup-interval'] = '1';
      obj['json'] = false;
      obj['minimum-fetch-interval'] = '5';
      obj['stale-timeout'] = '60';
    }
    /**
     * Constructs a <code>GatewayUpdateCache</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GatewayUpdateCache} obj Optional instance to populate.
     * @return {module:model/GatewayUpdateCache} The populated <code>GatewayUpdateCache</code> instance.
     */

  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new GatewayUpdateCache();

        if (data.hasOwnProperty('backup-interval')) {
          obj['backup-interval'] = _ApiClient["default"].convertToType(data['backup-interval'], 'String');
        }

        if (data.hasOwnProperty('enable-cache')) {
          obj['enable-cache'] = _ApiClient["default"].convertToType(data['enable-cache'], 'String');
        }

        if (data.hasOwnProperty('enable-proactive')) {
          obj['enable-proactive'] = _ApiClient["default"].convertToType(data['enable-proactive'], 'String');
        }

        if (data.hasOwnProperty('json')) {
          obj['json'] = _ApiClient["default"].convertToType(data['json'], 'Boolean');
        }

        if (data.hasOwnProperty('minimum-fetch-interval')) {
          obj['minimum-fetch-interval'] = _ApiClient["default"].convertToType(data['minimum-fetch-interval'], 'String');
        }

        if (data.hasOwnProperty('stale-timeout')) {
          obj['stale-timeout'] = _ApiClient["default"].convertToType(data['stale-timeout'], 'String');
        }

        if (data.hasOwnProperty('token')) {
          obj['token'] = _ApiClient["default"].convertToType(data['token'], 'String');
        }

        if (data.hasOwnProperty('uid-token')) {
          obj['uid-token'] = _ApiClient["default"].convertToType(data['uid-token'], 'String');
        }
      }

      return obj;
    }
    /**
     * Validates the JSON data with respect to <code>GatewayUpdateCache</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GatewayUpdateCache</code>.
     */

  }, {
    key: "validateJSON",
    value: function validateJSON(data) {
      // ensure the json data is a string
      if (data['backup-interval'] && !(typeof data['backup-interval'] === 'string' || data['backup-interval'] instanceof String)) {
        throw new Error("Expected the field `backup-interval` to be a primitive type in the JSON string but got " + data['backup-interval']);
      } // ensure the json data is a string


      if (data['enable-cache'] && !(typeof data['enable-cache'] === 'string' || data['enable-cache'] instanceof String)) {
        throw new Error("Expected the field `enable-cache` to be a primitive type in the JSON string but got " + data['enable-cache']);
      } // ensure the json data is a string


      if (data['enable-proactive'] && !(typeof data['enable-proactive'] === 'string' || data['enable-proactive'] instanceof String)) {
        throw new Error("Expected the field `enable-proactive` to be a primitive type in the JSON string but got " + data['enable-proactive']);
      } // ensure the json data is a string


      if (data['minimum-fetch-interval'] && !(typeof data['minimum-fetch-interval'] === 'string' || data['minimum-fetch-interval'] instanceof String)) {
        throw new Error("Expected the field `minimum-fetch-interval` to be a primitive type in the JSON string but got " + data['minimum-fetch-interval']);
      } // ensure the json data is a string


      if (data['stale-timeout'] && !(typeof data['stale-timeout'] === 'string' || data['stale-timeout'] instanceof String)) {
        throw new Error("Expected the field `stale-timeout` to be a primitive type in the JSON string but got " + data['stale-timeout']);
      } // ensure the json data is a string


      if (data['token'] && !(typeof data['token'] === 'string' || data['token'] instanceof String)) {
        throw new Error("Expected the field `token` to be a primitive type in the JSON string but got " + data['token']);
      } // ensure the json data is a string


      if (data['uid-token'] && !(typeof data['uid-token'] === 'string' || data['uid-token'] instanceof String)) {
        throw new Error("Expected the field `uid-token` to be a primitive type in the JSON string but got " + data['uid-token']);
      }

      return true;
    }
  }]);

  return GatewayUpdateCache;
}();
/**
 * Secure backup interval in minutes. To ensure service continuity in case of power cycle and network outage secrets will be backed up periodically per backup interval
 * @member {String} backup-interval
 * @default '1'
 */


GatewayUpdateCache.prototype['backup-interval'] = '1';
/**
 * Enable cache [true/false]
 * @member {String} enable-cache
 */

GatewayUpdateCache.prototype['enable-cache'] = undefined;
/**
 * Enable proactive caching [true/false]
 * @member {String} enable-proactive
 */

GatewayUpdateCache.prototype['enable-proactive'] = undefined;
/**
 * Set output format to JSON
 * @member {Boolean} json
 * @default false
 */

GatewayUpdateCache.prototype['json'] = false;
/**
 * When using Cache or/and Proactive Cache, additional secrets will be fetched upon requesting a secret, based on the requestor's access policy. Define minimum fetching interval to avoid over fetching in a given time frame
 * @member {String} minimum-fetch-interval
 * @default '5'
 */

GatewayUpdateCache.prototype['minimum-fetch-interval'] = '5';
/**
 * Stale timeout in minutes, cache entries which are not accessed within timeout will be removed from cache
 * @member {String} stale-timeout
 * @default '60'
 */

GatewayUpdateCache.prototype['stale-timeout'] = '60';
/**
 * Authentication token (see `/auth` and `/configure`)
 * @member {String} token
 */

GatewayUpdateCache.prototype['token'] = undefined;
/**
 * The universal identity token, Required only for universal_identity authentication
 * @member {String} uid-token
 */

GatewayUpdateCache.prototype['uid-token'] = undefined;
var _default = GatewayUpdateCache;
exports["default"] = _default;