"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ApiClient = _interopRequireDefault(require("../ApiClient"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * The UpdateGithubTarget model module.
 * @module model/UpdateGithubTarget
 * @version 4.3.0
 */
var UpdateGithubTarget = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>UpdateGithubTarget</code>.
   * updateGithubTarget is a command that updates a new target. [Deprecated: Use target-update-github command]
   * @alias module:model/UpdateGithubTarget
   * @param name {String} Target name
   */
  function UpdateGithubTarget(name) {
    _classCallCheck(this, UpdateGithubTarget);

    UpdateGithubTarget.initialize(this, name);
  }
  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */


  _createClass(UpdateGithubTarget, null, [{
    key: "initialize",
    value: function initialize(obj, name) {
      obj['name'] = name;
    }
    /**
     * Constructs a <code>UpdateGithubTarget</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateGithubTarget} obj Optional instance to populate.
     * @return {module:model/UpdateGithubTarget} The populated <code>UpdateGithubTarget</code> instance.
     */

  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new UpdateGithubTarget();

        if (data.hasOwnProperty('comment')) {
          obj['comment'] = _ApiClient["default"].convertToType(data['comment'], 'String');
        }

        if (data.hasOwnProperty('description')) {
          obj['description'] = _ApiClient["default"].convertToType(data['description'], 'String');
        }

        if (data.hasOwnProperty('github-app-id')) {
          obj['github-app-id'] = _ApiClient["default"].convertToType(data['github-app-id'], 'Number');
        }

        if (data.hasOwnProperty('github-app-private-key')) {
          obj['github-app-private-key'] = _ApiClient["default"].convertToType(data['github-app-private-key'], 'String');
        }

        if (data.hasOwnProperty('github-base-url')) {
          obj['github-base-url'] = _ApiClient["default"].convertToType(data['github-base-url'], 'String');
        }

        if (data.hasOwnProperty('json')) {
          obj['json'] = _ApiClient["default"].convertToType(data['json'], 'Boolean');
        }

        if (data.hasOwnProperty('keep-prev-version')) {
          obj['keep-prev-version'] = _ApiClient["default"].convertToType(data['keep-prev-version'], 'String');
        }

        if (data.hasOwnProperty('key')) {
          obj['key'] = _ApiClient["default"].convertToType(data['key'], 'String');
        }

        if (data.hasOwnProperty('max-versions')) {
          obj['max-versions'] = _ApiClient["default"].convertToType(data['max-versions'], 'String');
        }

        if (data.hasOwnProperty('name')) {
          obj['name'] = _ApiClient["default"].convertToType(data['name'], 'String');
        }

        if (data.hasOwnProperty('new-name')) {
          obj['new-name'] = _ApiClient["default"].convertToType(data['new-name'], 'String');
        }

        if (data.hasOwnProperty('token')) {
          obj['token'] = _ApiClient["default"].convertToType(data['token'], 'String');
        }

        if (data.hasOwnProperty('uid-token')) {
          obj['uid-token'] = _ApiClient["default"].convertToType(data['uid-token'], 'String');
        }

        if (data.hasOwnProperty('update-version')) {
          obj['update-version'] = _ApiClient["default"].convertToType(data['update-version'], 'Boolean');
        }
      }

      return obj;
    }
  }]);

  return UpdateGithubTarget;
}();
/**
 * Deprecated - use description
 * @member {String} comment
 */


UpdateGithubTarget.prototype['comment'] = undefined;
/**
 * Description of the object
 * @member {String} description
 */

UpdateGithubTarget.prototype['description'] = undefined;
/**
 * Github app id
 * @member {Number} github-app-id
 */

UpdateGithubTarget.prototype['github-app-id'] = undefined;
/**
 * App private key
 * @member {String} github-app-private-key
 */

UpdateGithubTarget.prototype['github-app-private-key'] = undefined;
/**
 * Base URL
 * @member {String} github-base-url
 * @default 'https://api.github.com/'
 */

UpdateGithubTarget.prototype['github-base-url'] = 'https://api.github.com/';
/**
 * Set output format to JSON
 * @member {Boolean} json
 * @default false
 */

UpdateGithubTarget.prototype['json'] = false;
/**
 * Whether to keep previous version [true/false]. If not set, use default according to account settings
 * @member {String} keep-prev-version
 */

UpdateGithubTarget.prototype['keep-prev-version'] = undefined;
/**
 * The name of a key that used to encrypt the target secret value (if empty, the account default protectionKey key will be used)
 * @member {String} key
 */

UpdateGithubTarget.prototype['key'] = undefined;
/**
 * Set the maximum number of versions, limited by the account settings defaults.
 * @member {String} max-versions
 */

UpdateGithubTarget.prototype['max-versions'] = undefined;
/**
 * Target name
 * @member {String} name
 */

UpdateGithubTarget.prototype['name'] = undefined;
/**
 * New target name
 * @member {String} new-name
 */

UpdateGithubTarget.prototype['new-name'] = undefined;
/**
 * Authentication token (see `/auth` and `/configure`)
 * @member {String} token
 */

UpdateGithubTarget.prototype['token'] = undefined;
/**
 * The universal identity token, Required only for universal_identity authentication
 * @member {String} uid-token
 */

UpdateGithubTarget.prototype['uid-token'] = undefined;
/**
 * Deprecated
 * @member {Boolean} update-version
 */

UpdateGithubTarget.prototype['update-version'] = undefined;
var _default = UpdateGithubTarget;
exports["default"] = _default;