"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ApiClient = _interopRequireDefault(require("../ApiClient"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * The CreateSalesforceTarget model module.
 * @module model/CreateSalesforceTarget
 * @version 3.3.15
 */
var CreateSalesforceTarget = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>CreateSalesforceTarget</code>.
   * @alias module:model/CreateSalesforceTarget
   * @param authFlow {String} type of the auth flow ('jwt' / 'user-password')
   * @param clientId {String} Client ID of the oauth2 app to use for connecting to Salesforce
   * @param email {String} The email of the user attached to the oauth2 app used for connecting to Salesforce
   * @param name {String} Target name
   * @param tenantUrl {String} Url of the Salesforce tenant
   */
  function CreateSalesforceTarget(authFlow, clientId, email, name, tenantUrl) {
    _classCallCheck(this, CreateSalesforceTarget);

    CreateSalesforceTarget.initialize(this, authFlow, clientId, email, name, tenantUrl);
  }
  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */


  _createClass(CreateSalesforceTarget, null, [{
    key: "initialize",
    value: function initialize(obj, authFlow, clientId, email, name, tenantUrl) {
      obj['auth-flow'] = authFlow;
      obj['client-id'] = clientId;
      obj['email'] = email;
      obj['name'] = name;
      obj['tenant-url'] = tenantUrl;
    }
    /**
     * Constructs a <code>CreateSalesforceTarget</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateSalesforceTarget} obj Optional instance to populate.
     * @return {module:model/CreateSalesforceTarget} The populated <code>CreateSalesforceTarget</code> instance.
     */

  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new CreateSalesforceTarget();

        if (data.hasOwnProperty('app-private-key-data')) {
          obj['app-private-key-data'] = _ApiClient["default"].convertToType(data['app-private-key-data'], 'String');
        }

        if (data.hasOwnProperty('auth-flow')) {
          obj['auth-flow'] = _ApiClient["default"].convertToType(data['auth-flow'], 'String');
        }

        if (data.hasOwnProperty('ca-cert-data')) {
          obj['ca-cert-data'] = _ApiClient["default"].convertToType(data['ca-cert-data'], 'String');
        }

        if (data.hasOwnProperty('ca-cert-name')) {
          obj['ca-cert-name'] = _ApiClient["default"].convertToType(data['ca-cert-name'], 'String');
        }

        if (data.hasOwnProperty('client-id')) {
          obj['client-id'] = _ApiClient["default"].convertToType(data['client-id'], 'String');
        }

        if (data.hasOwnProperty('client-secret')) {
          obj['client-secret'] = _ApiClient["default"].convertToType(data['client-secret'], 'String');
        }

        if (data.hasOwnProperty('comment')) {
          obj['comment'] = _ApiClient["default"].convertToType(data['comment'], 'String');
        }

        if (data.hasOwnProperty('description')) {
          obj['description'] = _ApiClient["default"].convertToType(data['description'], 'String');
        }

        if (data.hasOwnProperty('email')) {
          obj['email'] = _ApiClient["default"].convertToType(data['email'], 'String');
        }

        if (data.hasOwnProperty('json')) {
          obj['json'] = _ApiClient["default"].convertToType(data['json'], 'Boolean');
        }

        if (data.hasOwnProperty('key')) {
          obj['key'] = _ApiClient["default"].convertToType(data['key'], 'String');
        }

        if (data.hasOwnProperty('name')) {
          obj['name'] = _ApiClient["default"].convertToType(data['name'], 'String');
        }

        if (data.hasOwnProperty('password')) {
          obj['password'] = _ApiClient["default"].convertToType(data['password'], 'String');
        }

        if (data.hasOwnProperty('security-token')) {
          obj['security-token'] = _ApiClient["default"].convertToType(data['security-token'], 'String');
        }

        if (data.hasOwnProperty('tenant-url')) {
          obj['tenant-url'] = _ApiClient["default"].convertToType(data['tenant-url'], 'String');
        }

        if (data.hasOwnProperty('token')) {
          obj['token'] = _ApiClient["default"].convertToType(data['token'], 'String');
        }

        if (data.hasOwnProperty('uid-token')) {
          obj['uid-token'] = _ApiClient["default"].convertToType(data['uid-token'], 'String');
        }
      }

      return obj;
    }
  }]);

  return CreateSalesforceTarget;
}();
/**
 * Base64 encoded PEM of the connected app private key (relevant for JWT auth only)
 * @member {String} app-private-key-data
 */


CreateSalesforceTarget.prototype['app-private-key-data'] = undefined;
/**
 * type of the auth flow ('jwt' / 'user-password')
 * @member {String} auth-flow
 */

CreateSalesforceTarget.prototype['auth-flow'] = undefined;
/**
 * Base64 encoded PEM cert to use when uploading a new key to Salesforce
 * @member {String} ca-cert-data
 */

CreateSalesforceTarget.prototype['ca-cert-data'] = undefined;
/**
 * name of the certificate in Salesforce tenant to use when uploading new key
 * @member {String} ca-cert-name
 */

CreateSalesforceTarget.prototype['ca-cert-name'] = undefined;
/**
 * Client ID of the oauth2 app to use for connecting to Salesforce
 * @member {String} client-id
 */

CreateSalesforceTarget.prototype['client-id'] = undefined;
/**
 * Client secret of the oauth2 app to use for connecting to Salesforce (required for password flow)
 * @member {String} client-secret
 */

CreateSalesforceTarget.prototype['client-secret'] = undefined;
/**
 * Deprecated - use description
 * @member {String} comment
 */

CreateSalesforceTarget.prototype['comment'] = undefined;
/**
 * Description of the object
 * @member {String} description
 */

CreateSalesforceTarget.prototype['description'] = undefined;
/**
 * The email of the user attached to the oauth2 app used for connecting to Salesforce
 * @member {String} email
 */

CreateSalesforceTarget.prototype['email'] = undefined;
/**
 * Set output format to JSON
 * @member {Boolean} json
 * @default false
 */

CreateSalesforceTarget.prototype['json'] = false;
/**
 * The name of a key that used to encrypt the target secret value (if empty, the account default protectionKey key will be used)
 * @member {String} key
 */

CreateSalesforceTarget.prototype['key'] = undefined;
/**
 * Target name
 * @member {String} name
 */

CreateSalesforceTarget.prototype['name'] = undefined;
/**
 * The password of the user attached to the oauth2 app used for connecting to Salesforce (required for user-password flow)
 * @member {String} password
 */

CreateSalesforceTarget.prototype['password'] = undefined;
/**
 * The security token of the user attached to the oauth2 app used for connecting to Salesforce  (required for user-password flow)
 * @member {String} security-token
 */

CreateSalesforceTarget.prototype['security-token'] = undefined;
/**
 * Url of the Salesforce tenant
 * @member {String} tenant-url
 */

CreateSalesforceTarget.prototype['tenant-url'] = undefined;
/**
 * Authentication token (see `/auth` and `/configure`)
 * @member {String} token
 */

CreateSalesforceTarget.prototype['token'] = undefined;
/**
 * The universal identity token, Required only for universal_identity authentication
 * @member {String} uid-token
 */

CreateSalesforceTarget.prototype['uid-token'] = undefined;
var _default = CreateSalesforceTarget;
exports["default"] = _default;