"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ApiClient = _interopRequireDefault(require("../ApiClient"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * The CreateSecret model module.
 * @module model/CreateSecret
 * @version 4.2.0
 */
var CreateSecret = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>CreateSecret</code>.
   * @alias module:model/CreateSecret
   * @param name {String} Secret name
   * @param value {String} The secret value (relevant only for type 'generic')
   */
  function CreateSecret(name, value) {
    _classCallCheck(this, CreateSecret);

    CreateSecret.initialize(this, name, value);
  }
  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */


  _createClass(CreateSecret, null, [{
    key: "initialize",
    value: function initialize(obj, name, value) {
      obj['name'] = name;
      obj['value'] = value;
    }
    /**
     * Constructs a <code>CreateSecret</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateSecret} obj Optional instance to populate.
     * @return {module:model/CreateSecret} The populated <code>CreateSecret</code> instance.
     */

  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new CreateSecret();

        if (data.hasOwnProperty('accessibility')) {
          obj['accessibility'] = _ApiClient["default"].convertToType(data['accessibility'], 'String');
        }

        if (data.hasOwnProperty('change-event')) {
          obj['change-event'] = _ApiClient["default"].convertToType(data['change-event'], 'String');
        }

        if (data.hasOwnProperty('custom-field')) {
          obj['custom-field'] = _ApiClient["default"].convertToType(data['custom-field'], {
            'String': 'String'
          });
        }

        if (data.hasOwnProperty('delete_protection')) {
          obj['delete_protection'] = _ApiClient["default"].convertToType(data['delete_protection'], 'String');
        }

        if (data.hasOwnProperty('description')) {
          obj['description'] = _ApiClient["default"].convertToType(data['description'], 'String');
        }

        if (data.hasOwnProperty('format')) {
          obj['format'] = _ApiClient["default"].convertToType(data['format'], 'String');
        }

        if (data.hasOwnProperty('inject-url')) {
          obj['inject-url'] = _ApiClient["default"].convertToType(data['inject-url'], ['String']);
        }

        if (data.hasOwnProperty('json')) {
          obj['json'] = _ApiClient["default"].convertToType(data['json'], 'Boolean');
        }

        if (data.hasOwnProperty('max-versions')) {
          obj['max-versions'] = _ApiClient["default"].convertToType(data['max-versions'], 'String');
        }

        if (data.hasOwnProperty('metadata')) {
          obj['metadata'] = _ApiClient["default"].convertToType(data['metadata'], 'String');
        }

        if (data.hasOwnProperty('multiline_value')) {
          obj['multiline_value'] = _ApiClient["default"].convertToType(data['multiline_value'], 'Boolean');
        }

        if (data.hasOwnProperty('name')) {
          obj['name'] = _ApiClient["default"].convertToType(data['name'], 'String');
        }

        if (data.hasOwnProperty('password')) {
          obj['password'] = _ApiClient["default"].convertToType(data['password'], 'String');
        }

        if (data.hasOwnProperty('protection_key')) {
          obj['protection_key'] = _ApiClient["default"].convertToType(data['protection_key'], 'String');
        }

        if (data.hasOwnProperty('secure-access-bastion-issuer')) {
          obj['secure-access-bastion-issuer'] = _ApiClient["default"].convertToType(data['secure-access-bastion-issuer'], 'String');
        }

        if (data.hasOwnProperty('secure-access-enable')) {
          obj['secure-access-enable'] = _ApiClient["default"].convertToType(data['secure-access-enable'], 'String');
        }

        if (data.hasOwnProperty('secure-access-host')) {
          obj['secure-access-host'] = _ApiClient["default"].convertToType(data['secure-access-host'], ['String']);
        }

        if (data.hasOwnProperty('secure-access-rdp-user')) {
          obj['secure-access-rdp-user'] = _ApiClient["default"].convertToType(data['secure-access-rdp-user'], 'String');
        }

        if (data.hasOwnProperty('secure-access-ssh-creds')) {
          obj['secure-access-ssh-creds'] = _ApiClient["default"].convertToType(data['secure-access-ssh-creds'], 'String');
        }

        if (data.hasOwnProperty('secure-access-ssh-user')) {
          obj['secure-access-ssh-user'] = _ApiClient["default"].convertToType(data['secure-access-ssh-user'], 'String');
        }

        if (data.hasOwnProperty('secure-access-url')) {
          obj['secure-access-url'] = _ApiClient["default"].convertToType(data['secure-access-url'], 'String');
        }

        if (data.hasOwnProperty('secure-access-web-browsing')) {
          obj['secure-access-web-browsing'] = _ApiClient["default"].convertToType(data['secure-access-web-browsing'], 'Boolean');
        }

        if (data.hasOwnProperty('secure-access-web-proxy')) {
          obj['secure-access-web-proxy'] = _ApiClient["default"].convertToType(data['secure-access-web-proxy'], 'Boolean');
        }

        if (data.hasOwnProperty('tags')) {
          obj['tags'] = _ApiClient["default"].convertToType(data['tags'], ['String']);
        }

        if (data.hasOwnProperty('token')) {
          obj['token'] = _ApiClient["default"].convertToType(data['token'], 'String');
        }

        if (data.hasOwnProperty('type')) {
          obj['type'] = _ApiClient["default"].convertToType(data['type'], 'String');
        }

        if (data.hasOwnProperty('uid-token')) {
          obj['uid-token'] = _ApiClient["default"].convertToType(data['uid-token'], 'String');
        }

        if (data.hasOwnProperty('username')) {
          obj['username'] = _ApiClient["default"].convertToType(data['username'], 'String');
        }

        if (data.hasOwnProperty('value')) {
          obj['value'] = _ApiClient["default"].convertToType(data['value'], 'String');
        }
      }

      return obj;
    }
  }]);

  return CreateSecret;
}();
/**
 * for personal password manager
 * @member {String} accessibility
 * @default 'regular'
 */


CreateSecret.prototype['accessibility'] = 'regular';
/**
 * Trigger an event when a secret value changed [true/false] (Relevant only for Static Secret)
 * @member {String} change-event
 */

CreateSecret.prototype['change-event'] = undefined;
/**
 * For Password Management use, additional fields
 * @member {Object.<String, String>} custom-field
 */

CreateSecret.prototype['custom-field'] = undefined;
/**
 * Protection from accidental deletion of this item [true/false]
 * @member {String} delete_protection
 */

CreateSecret.prototype['delete_protection'] = undefined;
/**
 * Description of the object
 * @member {String} description
 */

CreateSecret.prototype['description'] = undefined;
/**
 * Secret format [text/json] (relevant only for type 'generic')
 * @member {String} format
 * @default 'text'
 */

CreateSecret.prototype['format'] = 'text';
/**
 * For Password Management use, reflect the website context
 * @member {Array.<String>} inject-url
 */

CreateSecret.prototype['inject-url'] = undefined;
/**
 * Set output format to JSON
 * @member {Boolean} json
 * @default false
 */

CreateSecret.prototype['json'] = false;
/**
 * Set the maximum number of versions, limited by the account settings defaults.
 * @member {String} max-versions
 */

CreateSecret.prototype['max-versions'] = undefined;
/**
 * Deprecated - use description
 * @member {String} metadata
 */

CreateSecret.prototype['metadata'] = undefined;
/**
 * The provided value is a multiline value (separated by '\\n')
 * @member {Boolean} multiline_value
 */

CreateSecret.prototype['multiline_value'] = undefined;
/**
 * Secret name
 * @member {String} name
 */

CreateSecret.prototype['name'] = undefined;
/**
 * For Password Management use, additional fields
 * @member {String} password
 */

CreateSecret.prototype['password'] = undefined;
/**
 * The name of a key that used to encrypt the secret value (if empty, the account default protectionKey key will be used)
 * @member {String} protection_key
 */

CreateSecret.prototype['protection_key'] = undefined;
/**
 * Path to the SSH Certificate Issuer for your Akeyless Bastion
 * @member {String} secure-access-bastion-issuer
 */

CreateSecret.prototype['secure-access-bastion-issuer'] = undefined;
/**
 * Enable/Disable secure remote access [true/false]
 * @member {String} secure-access-enable
 */

CreateSecret.prototype['secure-access-enable'] = undefined;
/**
 * Target servers for connections (In case of Linked Target association, host(s) will inherit Linked Target hosts - Relevant only for Dynamic Secrets/producers)
 * @member {Array.<String>} secure-access-host
 */

CreateSecret.prototype['secure-access-host'] = undefined;
/**
 * Remote Desktop Username
 * @member {String} secure-access-rdp-user
 */

CreateSecret.prototype['secure-access-rdp-user'] = undefined;
/**
 * Static-Secret values contains SSH Credentials, either Private Key or Password [password/private-key]
 * @member {String} secure-access-ssh-creds
 */

CreateSecret.prototype['secure-access-ssh-creds'] = undefined;
/**
 * Override the SSH username as indicated in SSH Certificate Issuer
 * @member {String} secure-access-ssh-user
 */

CreateSecret.prototype['secure-access-ssh-user'] = undefined;
/**
 * Destination URL to inject secrets
 * @member {String} secure-access-url
 */

CreateSecret.prototype['secure-access-url'] = undefined;
/**
 * Secure browser via Akeyless Web Access Bastion
 * @member {Boolean} secure-access-web-browsing
 * @default false
 */

CreateSecret.prototype['secure-access-web-browsing'] = false;
/**
 * Web-Proxy via Akeyless Web Access Bastion
 * @member {Boolean} secure-access-web-proxy
 * @default false
 */

CreateSecret.prototype['secure-access-web-proxy'] = false;
/**
 * Add tags attached to this object
 * @member {Array.<String>} tags
 */

CreateSecret.prototype['tags'] = undefined;
/**
 * Authentication token (see `/auth` and `/configure`)
 * @member {String} token
 */

CreateSecret.prototype['token'] = undefined;
/**
 * The secret sub type [generic/password]
 * @member {String} type
 * @default 'generic'
 */

CreateSecret.prototype['type'] = 'generic';
/**
 * The universal identity token, Required only for universal_identity authentication
 * @member {String} uid-token
 */

CreateSecret.prototype['uid-token'] = undefined;
/**
 * For Password Management use
 * @member {String} username
 */

CreateSecret.prototype['username'] = undefined;
/**
 * The secret value (relevant only for type 'generic')
 * @member {String} value
 */

CreateSecret.prototype['value'] = undefined;
var _default = CreateSecret;
exports["default"] = _default;