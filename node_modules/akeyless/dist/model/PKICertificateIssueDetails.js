"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ApiClient = _interopRequireDefault(require("../ApiClient"));

var _CertificateExpirationEvent = _interopRequireDefault(require("./CertificateExpirationEvent"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * The PKICertificateIssueDetails model module.
 * @module model/PKICertificateIssueDetails
 * @version 5.0.0
 */
var PKICertificateIssueDetails = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>PKICertificateIssueDetails</code>.
   * @alias module:model/PKICertificateIssueDetails
   */
  function PKICertificateIssueDetails() {
    _classCallCheck(this, PKICertificateIssueDetails);

    PKICertificateIssueDetails.initialize(this);
  }
  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */


  _createClass(PKICertificateIssueDetails, null, [{
    key: "initialize",
    value: function initialize(obj) {}
    /**
     * Constructs a <code>PKICertificateIssueDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PKICertificateIssueDetails} obj Optional instance to populate.
     * @return {module:model/PKICertificateIssueDetails} The populated <code>PKICertificateIssueDetails</code> instance.
     */

  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new PKICertificateIssueDetails();

        if (data.hasOwnProperty('acme_enabled')) {
          obj['acme_enabled'] = _ApiClient["default"].convertToType(data['acme_enabled'], 'Boolean');
        }

        if (data.hasOwnProperty('allow_any_name')) {
          obj['allow_any_name'] = _ApiClient["default"].convertToType(data['allow_any_name'], 'Boolean');
        }

        if (data.hasOwnProperty('allow_copy_ext_from_csr')) {
          obj['allow_copy_ext_from_csr'] = _ApiClient["default"].convertToType(data['allow_copy_ext_from_csr'], 'Boolean');
        }

        if (data.hasOwnProperty('allow_subdomains')) {
          obj['allow_subdomains'] = _ApiClient["default"].convertToType(data['allow_subdomains'], 'Boolean');
        }

        if (data.hasOwnProperty('allowed_domains_list')) {
          obj['allowed_domains_list'] = _ApiClient["default"].convertToType(data['allowed_domains_list'], ['String']);
        }

        if (data.hasOwnProperty('allowed_extra_extensions')) {
          obj['allowed_extra_extensions'] = _ApiClient["default"].convertToType(data['allowed_extra_extensions'], {
            'String': ['String']
          });
        }

        if (data.hasOwnProperty('allowed_uri_sans')) {
          obj['allowed_uri_sans'] = _ApiClient["default"].convertToType(data['allowed_uri_sans'], ['String']);
        }

        if (data.hasOwnProperty('auto_renew_certificate')) {
          obj['auto_renew_certificate'] = _ApiClient["default"].convertToType(data['auto_renew_certificate'], 'Boolean');
        }

        if (data.hasOwnProperty('basic_constraints_valid_for_non_ca')) {
          obj['basic_constraints_valid_for_non_ca'] = _ApiClient["default"].convertToType(data['basic_constraints_valid_for_non_ca'], 'Boolean');
        }

        if (data.hasOwnProperty('certificate_authority_mode')) {
          obj['certificate_authority_mode'] = _ApiClient["default"].convertToType(data['certificate_authority_mode'], 'String');
        }

        if (data.hasOwnProperty('client_flag')) {
          obj['client_flag'] = _ApiClient["default"].convertToType(data['client_flag'], 'Boolean');
        }

        if (data.hasOwnProperty('code_signing_flag')) {
          obj['code_signing_flag'] = _ApiClient["default"].convertToType(data['code_signing_flag'], 'Boolean');
        }

        if (data.hasOwnProperty('country')) {
          obj['country'] = _ApiClient["default"].convertToType(data['country'], ['String']);
        }

        if (data.hasOwnProperty('create_private_crl')) {
          obj['create_private_crl'] = _ApiClient["default"].convertToType(data['create_private_crl'], 'Boolean');
        }

        if (data.hasOwnProperty('create_public_crl')) {
          obj['create_public_crl'] = _ApiClient["default"].convertToType(data['create_public_crl'], 'Boolean');
        }

        if (data.hasOwnProperty('destination_path')) {
          obj['destination_path'] = _ApiClient["default"].convertToType(data['destination_path'], 'String');
        }

        if (data.hasOwnProperty('enforce_hostnames')) {
          obj['enforce_hostnames'] = _ApiClient["default"].convertToType(data['enforce_hostnames'], 'Boolean');
        }

        if (data.hasOwnProperty('expiration_events')) {
          obj['expiration_events'] = _ApiClient["default"].convertToType(data['expiration_events'], [_CertificateExpirationEvent["default"]]);
        }

        if (data.hasOwnProperty('gw_cluster_id')) {
          obj['gw_cluster_id'] = _ApiClient["default"].convertToType(data['gw_cluster_id'], 'Number');
        }

        if (data.hasOwnProperty('gw_cluster_url')) {
          obj['gw_cluster_url'] = _ApiClient["default"].convertToType(data['gw_cluster_url'], 'String');
        }

        if (data.hasOwnProperty('is_ca')) {
          obj['is_ca'] = _ApiClient["default"].convertToType(data['is_ca'], 'Boolean');
        }

        if (data.hasOwnProperty('key_bits')) {
          obj['key_bits'] = _ApiClient["default"].convertToType(data['key_bits'], 'Number');
        }

        if (data.hasOwnProperty('key_type')) {
          obj['key_type'] = _ApiClient["default"].convertToType(data['key_type'], 'String');
        }

        if (data.hasOwnProperty('key_usage_list')) {
          obj['key_usage_list'] = _ApiClient["default"].convertToType(data['key_usage_list'], ['String']);
        }

        if (data.hasOwnProperty('locality')) {
          obj['locality'] = _ApiClient["default"].convertToType(data['locality'], ['String']);
        }

        if (data.hasOwnProperty('max_path_len')) {
          obj['max_path_len'] = _ApiClient["default"].convertToType(data['max_path_len'], 'Number');
        }

        if (data.hasOwnProperty('non_critical_key_usage')) {
          obj['non_critical_key_usage'] = _ApiClient["default"].convertToType(data['non_critical_key_usage'], 'Boolean');
        }

        if (data.hasOwnProperty('not_before_duration')) {
          obj['not_before_duration'] = _ApiClient["default"].convertToType(data['not_before_duration'], 'Number');
        }

        if (data.hasOwnProperty('organization_list')) {
          obj['organization_list'] = _ApiClient["default"].convertToType(data['organization_list'], ['String']);
        }

        if (data.hasOwnProperty('organization_unit_list')) {
          obj['organization_unit_list'] = _ApiClient["default"].convertToType(data['organization_unit_list'], ['String']);
        }

        if (data.hasOwnProperty('pki_issuer_type')) {
          obj['pki_issuer_type'] = _ApiClient["default"].convertToType(data['pki_issuer_type'], 'String');
        }

        if (data.hasOwnProperty('postal_code')) {
          obj['postal_code'] = _ApiClient["default"].convertToType(data['postal_code'], ['String']);
        }

        if (data.hasOwnProperty('protect_generated_certificates')) {
          obj['protect_generated_certificates'] = _ApiClient["default"].convertToType(data['protect_generated_certificates'], 'Boolean');
        }

        if (data.hasOwnProperty('province')) {
          obj['province'] = _ApiClient["default"].convertToType(data['province'], ['String']);
        }

        if (data.hasOwnProperty('renew_before_expiration_in_days')) {
          obj['renew_before_expiration_in_days'] = _ApiClient["default"].convertToType(data['renew_before_expiration_in_days'], 'Number');
        }

        if (data.hasOwnProperty('require_cn')) {
          obj['require_cn'] = _ApiClient["default"].convertToType(data['require_cn'], 'Boolean');
        }

        if (data.hasOwnProperty('server_flag')) {
          obj['server_flag'] = _ApiClient["default"].convertToType(data['server_flag'], 'Boolean');
        }

        if (data.hasOwnProperty('street_address')) {
          obj['street_address'] = _ApiClient["default"].convertToType(data['street_address'], ['String']);
        }
      }

      return obj;
    }
    /**
     * Validates the JSON data with respect to <code>PKICertificateIssueDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PKICertificateIssueDetails</code>.
     */

  }, {
    key: "validateJSON",
    value: function validateJSON(data) {
      // ensure the json data is an array
      if (!Array.isArray(data['allowed_domains_list'])) {
        throw new Error("Expected the field `allowed_domains_list` to be an array in the JSON data but got " + data['allowed_domains_list']);
      } // ensure the json data is an array


      if (!Array.isArray(data['allowed_uri_sans'])) {
        throw new Error("Expected the field `allowed_uri_sans` to be an array in the JSON data but got " + data['allowed_uri_sans']);
      } // ensure the json data is a string


      if (data['certificate_authority_mode'] && !(typeof data['certificate_authority_mode'] === 'string' || data['certificate_authority_mode'] instanceof String)) {
        throw new Error("Expected the field `certificate_authority_mode` to be a primitive type in the JSON string but got " + data['certificate_authority_mode']);
      } // ensure the json data is an array


      if (!Array.isArray(data['country'])) {
        throw new Error("Expected the field `country` to be an array in the JSON data but got " + data['country']);
      } // ensure the json data is a string


      if (data['destination_path'] && !(typeof data['destination_path'] === 'string' || data['destination_path'] instanceof String)) {
        throw new Error("Expected the field `destination_path` to be a primitive type in the JSON string but got " + data['destination_path']);
      }

      if (data['expiration_events']) {
        // data not null
        // ensure the json data is an array
        if (!Array.isArray(data['expiration_events'])) {
          throw new Error("Expected the field `expiration_events` to be an array in the JSON data but got " + data['expiration_events']);
        } // validate the optional field `expiration_events` (array)


        var _iterator = _createForOfIteratorHelper(data['expiration_events']),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var item = _step.value;

            _CertificateExpirationEvent["default"].validateJSON(item);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }

        ;
      } // ensure the json data is a string


      if (data['gw_cluster_url'] && !(typeof data['gw_cluster_url'] === 'string' || data['gw_cluster_url'] instanceof String)) {
        throw new Error("Expected the field `gw_cluster_url` to be a primitive type in the JSON string but got " + data['gw_cluster_url']);
      } // ensure the json data is a string


      if (data['key_type'] && !(typeof data['key_type'] === 'string' || data['key_type'] instanceof String)) {
        throw new Error("Expected the field `key_type` to be a primitive type in the JSON string but got " + data['key_type']);
      } // ensure the json data is an array


      if (!Array.isArray(data['key_usage_list'])) {
        throw new Error("Expected the field `key_usage_list` to be an array in the JSON data but got " + data['key_usage_list']);
      } // ensure the json data is an array


      if (!Array.isArray(data['locality'])) {
        throw new Error("Expected the field `locality` to be an array in the JSON data but got " + data['locality']);
      } // ensure the json data is an array


      if (!Array.isArray(data['organization_list'])) {
        throw new Error("Expected the field `organization_list` to be an array in the JSON data but got " + data['organization_list']);
      } // ensure the json data is an array


      if (!Array.isArray(data['organization_unit_list'])) {
        throw new Error("Expected the field `organization_unit_list` to be an array in the JSON data but got " + data['organization_unit_list']);
      } // ensure the json data is a string


      if (data['pki_issuer_type'] && !(typeof data['pki_issuer_type'] === 'string' || data['pki_issuer_type'] instanceof String)) {
        throw new Error("Expected the field `pki_issuer_type` to be a primitive type in the JSON string but got " + data['pki_issuer_type']);
      } // ensure the json data is an array


      if (!Array.isArray(data['postal_code'])) {
        throw new Error("Expected the field `postal_code` to be an array in the JSON data but got " + data['postal_code']);
      } // ensure the json data is an array


      if (!Array.isArray(data['province'])) {
        throw new Error("Expected the field `province` to be an array in the JSON data but got " + data['province']);
      } // ensure the json data is an array


      if (!Array.isArray(data['street_address'])) {
        throw new Error("Expected the field `street_address` to be an array in the JSON data but got " + data['street_address']);
      }

      return true;
    }
  }]);

  return PKICertificateIssueDetails;
}();
/**
 * @member {Boolean} acme_enabled
 */


PKICertificateIssueDetails.prototype['acme_enabled'] = undefined;
/**
 * @member {Boolean} allow_any_name
 */

PKICertificateIssueDetails.prototype['allow_any_name'] = undefined;
/**
 * @member {Boolean} allow_copy_ext_from_csr
 */

PKICertificateIssueDetails.prototype['allow_copy_ext_from_csr'] = undefined;
/**
 * @member {Boolean} allow_subdomains
 */

PKICertificateIssueDetails.prototype['allow_subdomains'] = undefined;
/**
 * @member {Array.<String>} allowed_domains_list
 */

PKICertificateIssueDetails.prototype['allowed_domains_list'] = undefined;
/**
 * @member {Object.<String, Array.<String>>} allowed_extra_extensions
 */

PKICertificateIssueDetails.prototype['allowed_extra_extensions'] = undefined;
/**
 * @member {Array.<String>} allowed_uri_sans
 */

PKICertificateIssueDetails.prototype['allowed_uri_sans'] = undefined;
/**
 * @member {Boolean} auto_renew_certificate
 */

PKICertificateIssueDetails.prototype['auto_renew_certificate'] = undefined;
/**
 * @member {Boolean} basic_constraints_valid_for_non_ca
 */

PKICertificateIssueDetails.prototype['basic_constraints_valid_for_non_ca'] = undefined;
/**
 * @member {String} certificate_authority_mode
 */

PKICertificateIssueDetails.prototype['certificate_authority_mode'] = undefined;
/**
 * @member {Boolean} client_flag
 */

PKICertificateIssueDetails.prototype['client_flag'] = undefined;
/**
 * @member {Boolean} code_signing_flag
 */

PKICertificateIssueDetails.prototype['code_signing_flag'] = undefined;
/**
 * @member {Array.<String>} country
 */

PKICertificateIssueDetails.prototype['country'] = undefined;
/**
 * @member {Boolean} create_private_crl
 */

PKICertificateIssueDetails.prototype['create_private_crl'] = undefined;
/**
 * @member {Boolean} create_public_crl
 */

PKICertificateIssueDetails.prototype['create_public_crl'] = undefined;
/**
 * DestinationPath is the destination to save generated certificates
 * @member {String} destination_path
 */

PKICertificateIssueDetails.prototype['destination_path'] = undefined;
/**
 * @member {Boolean} enforce_hostnames
 */

PKICertificateIssueDetails.prototype['enforce_hostnames'] = undefined;
/**
 * ExpirationNotification holds a list of expiration notices that should be sent in case a certificate is about to expire, this value is being propagated to the Certificate resources that are created
 * @member {Array.<module:model/CertificateExpirationEvent>} expiration_events
 */

PKICertificateIssueDetails.prototype['expiration_events'] = undefined;
/**
 * @member {Number} gw_cluster_id
 */

PKICertificateIssueDetails.prototype['gw_cluster_id'] = undefined;
/**
 * GWClusterURL is required when CAMode is \"public\" and it defines the cluster URL the PKI should be issued from. The GW cluster must have permissions to read associated target's details
 * @member {String} gw_cluster_url
 */

PKICertificateIssueDetails.prototype['gw_cluster_url'] = undefined;
/**
 * @member {Boolean} is_ca
 */

PKICertificateIssueDetails.prototype['is_ca'] = undefined;
/**
 * @member {Number} key_bits
 */

PKICertificateIssueDetails.prototype['key_bits'] = undefined;
/**
 * @member {String} key_type
 */

PKICertificateIssueDetails.prototype['key_type'] = undefined;
/**
 * @member {Array.<String>} key_usage_list
 */

PKICertificateIssueDetails.prototype['key_usage_list'] = undefined;
/**
 * @member {Array.<String>} locality
 */

PKICertificateIssueDetails.prototype['locality'] = undefined;
/**
 * @member {Number} max_path_len
 */

PKICertificateIssueDetails.prototype['max_path_len'] = undefined;
/**
 * @member {Boolean} non_critical_key_usage
 */

PKICertificateIssueDetails.prototype['non_critical_key_usage'] = undefined;
/**
 * A Duration represents the elapsed time between two instants as an int64 nanosecond count. The representation limits the largest representable duration to approximately 290 years.
 * @member {Number} not_before_duration
 */

PKICertificateIssueDetails.prototype['not_before_duration'] = undefined;
/**
 * @member {Array.<String>} organization_list
 */

PKICertificateIssueDetails.prototype['organization_list'] = undefined;
/**
 * @member {Array.<String>} organization_unit_list
 */

PKICertificateIssueDetails.prototype['organization_unit_list'] = undefined;
/**
 * @member {String} pki_issuer_type
 */

PKICertificateIssueDetails.prototype['pki_issuer_type'] = undefined;
/**
 * @member {Array.<String>} postal_code
 */

PKICertificateIssueDetails.prototype['postal_code'] = undefined;
/**
 * ProtectGeneratedCertificates dictates whether the created certificates should be protected from deletion
 * @member {Boolean} protect_generated_certificates
 */

PKICertificateIssueDetails.prototype['protect_generated_certificates'] = undefined;
/**
 * @member {Array.<String>} province
 */

PKICertificateIssueDetails.prototype['province'] = undefined;
/**
 * @member {Number} renew_before_expiration_in_days
 */

PKICertificateIssueDetails.prototype['renew_before_expiration_in_days'] = undefined;
/**
 * @member {Boolean} require_cn
 */

PKICertificateIssueDetails.prototype['require_cn'] = undefined;
/**
 * @member {Boolean} server_flag
 */

PKICertificateIssueDetails.prototype['server_flag'] = undefined;
/**
 * @member {Array.<String>} street_address
 */

PKICertificateIssueDetails.prototype['street_address'] = undefined;
var _default = PKICertificateIssueDetails;
exports["default"] = _default;