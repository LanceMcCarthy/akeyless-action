"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ApiClient = _interopRequireDefault(require("../ApiClient"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * The GCPAccessRules model module.
 * @module model/GCPAccessRules
 * @version 3.3.14
 */
var GCPAccessRules = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>GCPAccessRules</code>.
   * @alias module:model/GCPAccessRules
   */
  function GCPAccessRules() {
    _classCallCheck(this, GCPAccessRules);

    GCPAccessRules.initialize(this);
  }
  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */


  _createClass(GCPAccessRules, null, [{
    key: "initialize",
    value: function initialize(obj) {}
    /**
     * Constructs a <code>GCPAccessRules</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GCPAccessRules} obj Optional instance to populate.
     * @return {module:model/GCPAccessRules} The populated <code>GCPAccessRules</code> instance.
     */

  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new GCPAccessRules();

        if (data.hasOwnProperty('audience')) {
          obj['audience'] = _ApiClient["default"].convertToType(data['audience'], 'String');
        }

        if (data.hasOwnProperty('bound_labels')) {
          obj['bound_labels'] = _ApiClient["default"].convertToType(data['bound_labels'], {
            'String': 'String'
          });
        }

        if (data.hasOwnProperty('bound_projects')) {
          obj['bound_projects'] = _ApiClient["default"].convertToType(data['bound_projects'], ['String']);
        }

        if (data.hasOwnProperty('bound_regions')) {
          obj['bound_regions'] = _ApiClient["default"].convertToType(data['bound_regions'], ['String']);
        }

        if (data.hasOwnProperty('bound_service_accounts')) {
          obj['bound_service_accounts'] = _ApiClient["default"].convertToType(data['bound_service_accounts'], ['String']);
        }

        if (data.hasOwnProperty('bound_zones')) {
          obj['bound_zones'] = _ApiClient["default"].convertToType(data['bound_zones'], ['String']);
        }

        if (data.hasOwnProperty('service_account')) {
          obj['service_account'] = _ApiClient["default"].convertToType(data['service_account'], 'String');
        }

        if (data.hasOwnProperty('type')) {
          obj['type'] = _ApiClient["default"].convertToType(data['type'], 'String');
        }
      }

      return obj;
    }
  }]);

  return GCPAccessRules;
}();
/**
 * The audience in the JWT
 * @member {String} audience
 * @default 'akeyless.io'
 */


GCPAccessRules.prototype['audience'] = 'akeyless.io';
/**
 * A map of GCP labels formatted as \"key:value\" strings that must be set on authorized GCE instances. TODO: Because GCP labels are not currently ACL'd ....
 * @member {Object.<String, String>} bound_labels
 */

GCPAccessRules.prototype['bound_labels'] = undefined;
/**
 * Human and Machine authentication section Array of GCP project IDs. Only entities belonging to any of the provided projects can authenticate.
 * @member {Array.<String>} bound_projects
 */

GCPAccessRules.prototype['bound_projects'] = undefined;
/**
 * List of regions that a GCE instance must belong to in order to be authenticated. TODO: If bound_instance_groups is provided, it is assumed to be a regional group and the group must belong to this region. If bound_zones are provided, this attribute is ignored.
 * @member {Array.<String>} bound_regions
 */

GCPAccessRules.prototype['bound_regions'] = undefined;
/**
 * List of service accounts the service account must be part of in order to be authenticated
 * @member {Array.<String>} bound_service_accounts
 */

GCPAccessRules.prototype['bound_service_accounts'] = undefined;
/**
 * === Machine authentication section === List of zones that a GCE instance must belong to in order to be authenticated. TODO: If bound_instance_groups is provided, it is assumed to be a zonal group and the group must belong to this zone.
 * @member {Array.<String>} bound_zones
 */

GCPAccessRules.prototype['bound_zones'] = undefined;
/**
 * ServiceAccount holds the credentials file contents to be used by Akeyless to validate IAM (Human) and GCE (Machine) logins against GCP base64 encoded string
 * @member {String} service_account
 */

GCPAccessRules.prototype['service_account'] = undefined;
/**
 * @member {String} type
 */

GCPAccessRules.prototype['type'] = undefined;
var _default = GCPAccessRules;
exports["default"] = _default;