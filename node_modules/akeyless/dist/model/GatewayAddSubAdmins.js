"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ApiClient = _interopRequireDefault(require("../ApiClient"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * The GatewayAddSubAdmins model module.
 * @module model/GatewayAddSubAdmins
 * @version 2.4.2
 */
var GatewayAddSubAdmins = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>GatewayAddSubAdmins</code>.
   * gatewayAddSubAdmins is a command that adds sub-admins
   * @alias module:model/GatewayAddSubAdmins
   * @param subAdminAccessId {String} SubAdmins to add
   */
  function GatewayAddSubAdmins(subAdminAccessId) {
    _classCallCheck(this, GatewayAddSubAdmins);

    GatewayAddSubAdmins.initialize(this, subAdminAccessId);
  }
  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */


  _createClass(GatewayAddSubAdmins, null, [{
    key: "initialize",
    value: function initialize(obj, subAdminAccessId) {
      obj['sub-admin-access-id'] = subAdminAccessId;
    }
    /**
     * Constructs a <code>GatewayAddSubAdmins</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GatewayAddSubAdmins} obj Optional instance to populate.
     * @return {module:model/GatewayAddSubAdmins} The populated <code>GatewayAddSubAdmins</code> instance.
     */

  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new GatewayAddSubAdmins();

        if (data.hasOwnProperty('allow-gw-api')) {
          obj['allow-gw-api'] = _ApiClient["default"].convertToType(data['allow-gw-api'], 'Boolean');
        }

        if (data.hasOwnProperty('allow-gw-login')) {
          obj['allow-gw-login'] = _ApiClient["default"].convertToType(data['allow-gw-login'], 'Boolean');
        }

        if (data.hasOwnProperty('gateway-url')) {
          obj['gateway-url'] = _ApiClient["default"].convertToType(data['gateway-url'], 'String');
        }

        if (data.hasOwnProperty('password')) {
          obj['password'] = _ApiClient["default"].convertToType(data['password'], 'String');
        }

        if (data.hasOwnProperty('sub-admin-access-id')) {
          obj['sub-admin-access-id'] = _ApiClient["default"].convertToType(data['sub-admin-access-id'], 'String');
        }

        if (data.hasOwnProperty('sub-claims')) {
          obj['sub-claims'] = _ApiClient["default"].convertToType(data['sub-claims'], {
            'String': 'String'
          });
        }

        if (data.hasOwnProperty('token')) {
          obj['token'] = _ApiClient["default"].convertToType(data['token'], 'String');
        }

        if (data.hasOwnProperty('uid-token')) {
          obj['uid-token'] = _ApiClient["default"].convertToType(data['uid-token'], 'String');
        }

        if (data.hasOwnProperty('username')) {
          obj['username'] = _ApiClient["default"].convertToType(data['username'], 'String');
        }
      }

      return obj;
    }
  }]);

  return GatewayAddSubAdmins;
}();
/**
 * @member {Boolean} allow-gw-api
 */


GatewayAddSubAdmins.prototype['allow-gw-api'] = undefined;
/**
 * @member {Boolean} allow-gw-login
 */

GatewayAddSubAdmins.prototype['allow-gw-login'] = undefined;
/**
 * Gateway url
 * @member {String} gateway-url
 * @default 'http://localhost:8000'
 */

GatewayAddSubAdmins.prototype['gateway-url'] = 'http://localhost:8000';
/**
 * Required only when the authentication process requires a username and password
 * @member {String} password
 */

GatewayAddSubAdmins.prototype['password'] = undefined;
/**
 * SubAdmins to add
 * @member {String} sub-admin-access-id
 */

GatewayAddSubAdmins.prototype['sub-admin-access-id'] = undefined;
/**
 * key/val of sub claims, e.g group=admins,developers
 * @member {Object.<String, String>} sub-claims
 */

GatewayAddSubAdmins.prototype['sub-claims'] = undefined;
/**
 * Authentication token (see `/auth` and `/configure`)
 * @member {String} token
 */

GatewayAddSubAdmins.prototype['token'] = undefined;
/**
 * The universal identity token, Required only for universal_identity authentication
 * @member {String} uid-token
 */

GatewayAddSubAdmins.prototype['uid-token'] = undefined;
/**
 * Required only when the authentication process requires a username and password
 * @member {String} username
 */

GatewayAddSubAdmins.prototype['username'] = undefined;
var _default = GatewayAddSubAdmins;
exports["default"] = _default;