"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ApiClient = _interopRequireDefault(require("../ApiClient"));

var _Rules = _interopRequireDefault(require("./Rules"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * The AuthMethodRoleAssociation model module.
 * @module model/AuthMethodRoleAssociation
 * @version 5.0.1
 */
var AuthMethodRoleAssociation = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>AuthMethodRoleAssociation</code>.
   * AuthMethodRoleAssociation includes details of an association between an auth method and a role.
   * @alias module:model/AuthMethodRoleAssociation
   */
  function AuthMethodRoleAssociation() {
    _classCallCheck(this, AuthMethodRoleAssociation);

    AuthMethodRoleAssociation.initialize(this);
  }
  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */


  _createClass(AuthMethodRoleAssociation, null, [{
    key: "initialize",
    value: function initialize(obj) {}
    /**
     * Constructs a <code>AuthMethodRoleAssociation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AuthMethodRoleAssociation} obj Optional instance to populate.
     * @return {module:model/AuthMethodRoleAssociation} The populated <code>AuthMethodRoleAssociation</code> instance.
     */

  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new AuthMethodRoleAssociation();

        if (data.hasOwnProperty('allowed_ops')) {
          obj['allowed_ops'] = _ApiClient["default"].convertToType(data['allowed_ops'], ['String']);
        }

        if (data.hasOwnProperty('assoc_id')) {
          obj['assoc_id'] = _ApiClient["default"].convertToType(data['assoc_id'], 'String');
        }

        if (data.hasOwnProperty('auth_method_sub_claims')) {
          obj['auth_method_sub_claims'] = _ApiClient["default"].convertToType(data['auth_method_sub_claims'], {
            'String': ['String']
          });
        }

        if (data.hasOwnProperty('is_sub_claims_case_sensitive')) {
          obj['is_sub_claims_case_sensitive'] = _ApiClient["default"].convertToType(data['is_sub_claims_case_sensitive'], 'Boolean');
        }

        if (data.hasOwnProperty('is_subclaims_with_operator')) {
          obj['is_subclaims_with_operator'] = _ApiClient["default"].convertToType(data['is_subclaims_with_operator'], 'Boolean');
        }

        if (data.hasOwnProperty('role_id')) {
          obj['role_id'] = _ApiClient["default"].convertToType(data['role_id'], 'Number');
        }

        if (data.hasOwnProperty('role_name')) {
          obj['role_name'] = _ApiClient["default"].convertToType(data['role_name'], 'String');
        }

        if (data.hasOwnProperty('rules')) {
          obj['rules'] = _Rules["default"].constructFromObject(data['rules']);
        }
      }

      return obj;
    }
    /**
     * Validates the JSON data with respect to <code>AuthMethodRoleAssociation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AuthMethodRoleAssociation</code>.
     */

  }, {
    key: "validateJSON",
    value: function validateJSON(data) {
      // ensure the json data is an array
      if (!Array.isArray(data['allowed_ops'])) {
        throw new Error("Expected the field `allowed_ops` to be an array in the JSON data but got " + data['allowed_ops']);
      } // ensure the json data is a string


      if (data['assoc_id'] && !(typeof data['assoc_id'] === 'string' || data['assoc_id'] instanceof String)) {
        throw new Error("Expected the field `assoc_id` to be a primitive type in the JSON string but got " + data['assoc_id']);
      } // ensure the json data is a string


      if (data['role_name'] && !(typeof data['role_name'] === 'string' || data['role_name'] instanceof String)) {
        throw new Error("Expected the field `role_name` to be a primitive type in the JSON string but got " + data['role_name']);
      } // validate the optional field `rules`


      if (data['rules']) {
        // data not null
        _Rules["default"].validateJSON(data['rules']);
      }

      return true;
    }
  }]);

  return AuthMethodRoleAssociation;
}();
/**
 * @member {Array.<String>} allowed_ops
 */


AuthMethodRoleAssociation.prototype['allowed_ops'] = undefined;
/**
 * @member {String} assoc_id
 */

AuthMethodRoleAssociation.prototype['assoc_id'] = undefined;
/**
 * @member {Object.<String, Array.<String>>} auth_method_sub_claims
 */

AuthMethodRoleAssociation.prototype['auth_method_sub_claims'] = undefined;
/**
 * @member {Boolean} is_sub_claims_case_sensitive
 */

AuthMethodRoleAssociation.prototype['is_sub_claims_case_sensitive'] = undefined;
/**
 * @member {Boolean} is_subclaims_with_operator
 */

AuthMethodRoleAssociation.prototype['is_subclaims_with_operator'] = undefined;
/**
 * @member {Number} role_id
 */

AuthMethodRoleAssociation.prototype['role_id'] = undefined;
/**
 * @member {String} role_name
 */

AuthMethodRoleAssociation.prototype['role_name'] = undefined;
/**
 * @member {module:model/Rules} rules
 */

AuthMethodRoleAssociation.prototype['rules'] = undefined;
var _default = AuthMethodRoleAssociation;
exports["default"] = _default;