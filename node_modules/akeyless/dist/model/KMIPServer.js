"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ApiClient = _interopRequireDefault(require("../ApiClient"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * The KMIPServer model module.
 * @module model/KMIPServer
 * @version 3.3.12
 */
var KMIPServer = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>KMIPServer</code>.
   * @alias module:model/KMIPServer
   */
  function KMIPServer() {
    _classCallCheck(this, KMIPServer);

    KMIPServer.initialize(this);
  }
  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */


  _createClass(KMIPServer, null, [{
    key: "initialize",
    value: function initialize(obj) {}
    /**
     * Constructs a <code>KMIPServer</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/KMIPServer} obj Optional instance to populate.
     * @return {module:model/KMIPServer} The populated <code>KMIPServer</code> instance.
     */

  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new KMIPServer();

        if (data.hasOwnProperty('active')) {
          obj['active'] = _ApiClient["default"].convertToType(data['active'], 'Boolean');
        }

        if (data.hasOwnProperty('ca')) {
          obj['ca'] = _ApiClient["default"].convertToType(data['ca'], ['Number']);
        }

        if (data.hasOwnProperty('certificate')) {
          obj['certificate'] = _ApiClient["default"].convertToType(data['certificate'], ['Number']);
        }

        if (data.hasOwnProperty('certificate_issue_date')) {
          obj['certificate_issue_date'] = _ApiClient["default"].convertToType(data['certificate_issue_date'], 'Date');
        }

        if (data.hasOwnProperty('certificate_ttl_in_seconds')) {
          obj['certificate_ttl_in_seconds'] = _ApiClient["default"].convertToType(data['certificate_ttl_in_seconds'], 'Number');
        }

        if (data.hasOwnProperty('hostname')) {
          obj['hostname'] = _ApiClient["default"].convertToType(data['hostname'], 'String');
        }

        if (data.hasOwnProperty('root')) {
          obj['root'] = _ApiClient["default"].convertToType(data['root'], 'String');
        }
      }

      return obj;
    }
  }]);

  return KMIPServer;
}();
/**
 * @member {Boolean} active
 */


KMIPServer.prototype['active'] = undefined;
/**
 * @member {Array.<Number>} ca
 */

KMIPServer.prototype['ca'] = undefined;
/**
 * @member {Array.<Number>} certificate
 */

KMIPServer.prototype['certificate'] = undefined;
/**
 * @member {Date} certificate_issue_date
 */

KMIPServer.prototype['certificate_issue_date'] = undefined;
/**
 * @member {Number} certificate_ttl_in_seconds
 */

KMIPServer.prototype['certificate_ttl_in_seconds'] = undefined;
/**
 * @member {String} hostname
 */

KMIPServer.prototype['hostname'] = undefined;
/**
 * @member {String} root
 */

KMIPServer.prototype['root'] = undefined;
var _default = KMIPServer;
exports["default"] = _default;