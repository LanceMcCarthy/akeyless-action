"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ApiClient = _interopRequireDefault(require("../ApiClient"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * The GatewayUpdateProducerOracleDb model module.
 * @module model/GatewayUpdateProducerOracleDb
 * @version 5.0.3
 */
var GatewayUpdateProducerOracleDb = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>GatewayUpdateProducerOracleDb</code>.
   * gatewayUpdateProducerOracleDb is a command that updates oracle db producer [Deprecated: Use dynamic-secret-update-oracledb command]
   * @alias module:model/GatewayUpdateProducerOracleDb
   * @param name {String} Dynamic secret name
   */
  function GatewayUpdateProducerOracleDb(name) {
    _classCallCheck(this, GatewayUpdateProducerOracleDb);

    GatewayUpdateProducerOracleDb.initialize(this, name);
  }
  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */


  _createClass(GatewayUpdateProducerOracleDb, null, [{
    key: "initialize",
    value: function initialize(obj, name) {
      obj['json'] = false;
      obj['name'] = name;
      obj['oracle-host'] = '127.0.0.1';
      obj['oracle-port'] = '1521';
      obj['secure-access-enable'] = 'false';
      obj['secure-access-web'] = false;
      obj['user-ttl'] = '60m';
    }
    /**
     * Constructs a <code>GatewayUpdateProducerOracleDb</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GatewayUpdateProducerOracleDb} obj Optional instance to populate.
     * @return {module:model/GatewayUpdateProducerOracleDb} The populated <code>GatewayUpdateProducerOracleDb</code> instance.
     */

  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new GatewayUpdateProducerOracleDb();

        if (data.hasOwnProperty('db-server-certificates')) {
          obj['db-server-certificates'] = _ApiClient["default"].convertToType(data['db-server-certificates'], 'String');
        }

        if (data.hasOwnProperty('db-server-name')) {
          obj['db-server-name'] = _ApiClient["default"].convertToType(data['db-server-name'], 'String');
        }

        if (data.hasOwnProperty('delete_protection')) {
          obj['delete_protection'] = _ApiClient["default"].convertToType(data['delete_protection'], 'String');
        }

        if (data.hasOwnProperty('json')) {
          obj['json'] = _ApiClient["default"].convertToType(data['json'], 'Boolean');
        }

        if (data.hasOwnProperty('name')) {
          obj['name'] = _ApiClient["default"].convertToType(data['name'], 'String');
        }

        if (data.hasOwnProperty('new-name')) {
          obj['new-name'] = _ApiClient["default"].convertToType(data['new-name'], 'String');
        }

        if (data.hasOwnProperty('oracle-host')) {
          obj['oracle-host'] = _ApiClient["default"].convertToType(data['oracle-host'], 'String');
        }

        if (data.hasOwnProperty('oracle-password')) {
          obj['oracle-password'] = _ApiClient["default"].convertToType(data['oracle-password'], 'String');
        }

        if (data.hasOwnProperty('oracle-port')) {
          obj['oracle-port'] = _ApiClient["default"].convertToType(data['oracle-port'], 'String');
        }

        if (data.hasOwnProperty('oracle-revocation-statements')) {
          obj['oracle-revocation-statements'] = _ApiClient["default"].convertToType(data['oracle-revocation-statements'], 'String');
        }

        if (data.hasOwnProperty('oracle-screation-statements')) {
          obj['oracle-screation-statements'] = _ApiClient["default"].convertToType(data['oracle-screation-statements'], 'String');
        }

        if (data.hasOwnProperty('oracle-service-name')) {
          obj['oracle-service-name'] = _ApiClient["default"].convertToType(data['oracle-service-name'], 'String');
        }

        if (data.hasOwnProperty('oracle-username')) {
          obj['oracle-username'] = _ApiClient["default"].convertToType(data['oracle-username'], 'String');
        }

        if (data.hasOwnProperty('password-length')) {
          obj['password-length'] = _ApiClient["default"].convertToType(data['password-length'], 'String');
        }

        if (data.hasOwnProperty('producer-encryption-key-name')) {
          obj['producer-encryption-key-name'] = _ApiClient["default"].convertToType(data['producer-encryption-key-name'], 'String');
        }

        if (data.hasOwnProperty('secure-access-bastion-issuer')) {
          obj['secure-access-bastion-issuer'] = _ApiClient["default"].convertToType(data['secure-access-bastion-issuer'], 'String');
        }

        if (data.hasOwnProperty('secure-access-certificate-issuer')) {
          obj['secure-access-certificate-issuer'] = _ApiClient["default"].convertToType(data['secure-access-certificate-issuer'], 'String');
        }

        if (data.hasOwnProperty('secure-access-enable')) {
          obj['secure-access-enable'] = _ApiClient["default"].convertToType(data['secure-access-enable'], 'String');
        }

        if (data.hasOwnProperty('secure-access-host')) {
          obj['secure-access-host'] = _ApiClient["default"].convertToType(data['secure-access-host'], ['String']);
        }

        if (data.hasOwnProperty('secure-access-web')) {
          obj['secure-access-web'] = _ApiClient["default"].convertToType(data['secure-access-web'], 'Boolean');
        }

        if (data.hasOwnProperty('tags')) {
          obj['tags'] = _ApiClient["default"].convertToType(data['tags'], ['String']);
        }

        if (data.hasOwnProperty('target-name')) {
          obj['target-name'] = _ApiClient["default"].convertToType(data['target-name'], 'String');
        }

        if (data.hasOwnProperty('token')) {
          obj['token'] = _ApiClient["default"].convertToType(data['token'], 'String');
        }

        if (data.hasOwnProperty('uid-token')) {
          obj['uid-token'] = _ApiClient["default"].convertToType(data['uid-token'], 'String');
        }

        if (data.hasOwnProperty('user-ttl')) {
          obj['user-ttl'] = _ApiClient["default"].convertToType(data['user-ttl'], 'String');
        }
      }

      return obj;
    }
    /**
     * Validates the JSON data with respect to <code>GatewayUpdateProducerOracleDb</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GatewayUpdateProducerOracleDb</code>.
     */

  }, {
    key: "validateJSON",
    value: function validateJSON(data) {
      // check to make sure all required properties are present in the JSON string
      var _iterator = _createForOfIteratorHelper(GatewayUpdateProducerOracleDb.RequiredProperties),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var property = _step.value;

          if (!data.hasOwnProperty(property)) {
            throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
          }
        } // ensure the json data is a string

      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      if (data['db-server-certificates'] && !(typeof data['db-server-certificates'] === 'string' || data['db-server-certificates'] instanceof String)) {
        throw new Error("Expected the field `db-server-certificates` to be a primitive type in the JSON string but got " + data['db-server-certificates']);
      } // ensure the json data is a string


      if (data['db-server-name'] && !(typeof data['db-server-name'] === 'string' || data['db-server-name'] instanceof String)) {
        throw new Error("Expected the field `db-server-name` to be a primitive type in the JSON string but got " + data['db-server-name']);
      } // ensure the json data is a string


      if (data['delete_protection'] && !(typeof data['delete_protection'] === 'string' || data['delete_protection'] instanceof String)) {
        throw new Error("Expected the field `delete_protection` to be a primitive type in the JSON string but got " + data['delete_protection']);
      } // ensure the json data is a string


      if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
        throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
      } // ensure the json data is a string


      if (data['new-name'] && !(typeof data['new-name'] === 'string' || data['new-name'] instanceof String)) {
        throw new Error("Expected the field `new-name` to be a primitive type in the JSON string but got " + data['new-name']);
      } // ensure the json data is a string


      if (data['oracle-host'] && !(typeof data['oracle-host'] === 'string' || data['oracle-host'] instanceof String)) {
        throw new Error("Expected the field `oracle-host` to be a primitive type in the JSON string but got " + data['oracle-host']);
      } // ensure the json data is a string


      if (data['oracle-password'] && !(typeof data['oracle-password'] === 'string' || data['oracle-password'] instanceof String)) {
        throw new Error("Expected the field `oracle-password` to be a primitive type in the JSON string but got " + data['oracle-password']);
      } // ensure the json data is a string


      if (data['oracle-port'] && !(typeof data['oracle-port'] === 'string' || data['oracle-port'] instanceof String)) {
        throw new Error("Expected the field `oracle-port` to be a primitive type in the JSON string but got " + data['oracle-port']);
      } // ensure the json data is a string


      if (data['oracle-revocation-statements'] && !(typeof data['oracle-revocation-statements'] === 'string' || data['oracle-revocation-statements'] instanceof String)) {
        throw new Error("Expected the field `oracle-revocation-statements` to be a primitive type in the JSON string but got " + data['oracle-revocation-statements']);
      } // ensure the json data is a string


      if (data['oracle-screation-statements'] && !(typeof data['oracle-screation-statements'] === 'string' || data['oracle-screation-statements'] instanceof String)) {
        throw new Error("Expected the field `oracle-screation-statements` to be a primitive type in the JSON string but got " + data['oracle-screation-statements']);
      } // ensure the json data is a string


      if (data['oracle-service-name'] && !(typeof data['oracle-service-name'] === 'string' || data['oracle-service-name'] instanceof String)) {
        throw new Error("Expected the field `oracle-service-name` to be a primitive type in the JSON string but got " + data['oracle-service-name']);
      } // ensure the json data is a string


      if (data['oracle-username'] && !(typeof data['oracle-username'] === 'string' || data['oracle-username'] instanceof String)) {
        throw new Error("Expected the field `oracle-username` to be a primitive type in the JSON string but got " + data['oracle-username']);
      } // ensure the json data is a string


      if (data['password-length'] && !(typeof data['password-length'] === 'string' || data['password-length'] instanceof String)) {
        throw new Error("Expected the field `password-length` to be a primitive type in the JSON string but got " + data['password-length']);
      } // ensure the json data is a string


      if (data['producer-encryption-key-name'] && !(typeof data['producer-encryption-key-name'] === 'string' || data['producer-encryption-key-name'] instanceof String)) {
        throw new Error("Expected the field `producer-encryption-key-name` to be a primitive type in the JSON string but got " + data['producer-encryption-key-name']);
      } // ensure the json data is a string


      if (data['secure-access-bastion-issuer'] && !(typeof data['secure-access-bastion-issuer'] === 'string' || data['secure-access-bastion-issuer'] instanceof String)) {
        throw new Error("Expected the field `secure-access-bastion-issuer` to be a primitive type in the JSON string but got " + data['secure-access-bastion-issuer']);
      } // ensure the json data is a string


      if (data['secure-access-certificate-issuer'] && !(typeof data['secure-access-certificate-issuer'] === 'string' || data['secure-access-certificate-issuer'] instanceof String)) {
        throw new Error("Expected the field `secure-access-certificate-issuer` to be a primitive type in the JSON string but got " + data['secure-access-certificate-issuer']);
      } // ensure the json data is a string


      if (data['secure-access-enable'] && !(typeof data['secure-access-enable'] === 'string' || data['secure-access-enable'] instanceof String)) {
        throw new Error("Expected the field `secure-access-enable` to be a primitive type in the JSON string but got " + data['secure-access-enable']);
      } // ensure the json data is an array


      if (!Array.isArray(data['secure-access-host'])) {
        throw new Error("Expected the field `secure-access-host` to be an array in the JSON data but got " + data['secure-access-host']);
      } // ensure the json data is an array


      if (!Array.isArray(data['tags'])) {
        throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
      } // ensure the json data is a string


      if (data['target-name'] && !(typeof data['target-name'] === 'string' || data['target-name'] instanceof String)) {
        throw new Error("Expected the field `target-name` to be a primitive type in the JSON string but got " + data['target-name']);
      } // ensure the json data is a string


      if (data['token'] && !(typeof data['token'] === 'string' || data['token'] instanceof String)) {
        throw new Error("Expected the field `token` to be a primitive type in the JSON string but got " + data['token']);
      } // ensure the json data is a string


      if (data['uid-token'] && !(typeof data['uid-token'] === 'string' || data['uid-token'] instanceof String)) {
        throw new Error("Expected the field `uid-token` to be a primitive type in the JSON string but got " + data['uid-token']);
      } // ensure the json data is a string


      if (data['user-ttl'] && !(typeof data['user-ttl'] === 'string' || data['user-ttl'] instanceof String)) {
        throw new Error("Expected the field `user-ttl` to be a primitive type in the JSON string but got " + data['user-ttl']);
      }

      return true;
    }
  }]);

  return GatewayUpdateProducerOracleDb;
}();

GatewayUpdateProducerOracleDb.RequiredProperties = ["name"];
/**
 * (Optional) DB server certificates
 * @member {String} db-server-certificates
 */

GatewayUpdateProducerOracleDb.prototype['db-server-certificates'] = undefined;
/**
 * (Optional) Server name for certificate verification
 * @member {String} db-server-name
 */

GatewayUpdateProducerOracleDb.prototype['db-server-name'] = undefined;
/**
 * Protection from accidental deletion of this object [true/false]
 * @member {String} delete_protection
 */

GatewayUpdateProducerOracleDb.prototype['delete_protection'] = undefined;
/**
 * Set output format to JSON
 * @member {Boolean} json
 * @default false
 */

GatewayUpdateProducerOracleDb.prototype['json'] = false;
/**
 * Dynamic secret name
 * @member {String} name
 */

GatewayUpdateProducerOracleDb.prototype['name'] = undefined;
/**
 * Dynamic secret name
 * @member {String} new-name
 */

GatewayUpdateProducerOracleDb.prototype['new-name'] = undefined;
/**
 * Oracle Host
 * @member {String} oracle-host
 * @default '127.0.0.1'
 */

GatewayUpdateProducerOracleDb.prototype['oracle-host'] = '127.0.0.1';
/**
 * Oracle Password
 * @member {String} oracle-password
 */

GatewayUpdateProducerOracleDb.prototype['oracle-password'] = undefined;
/**
 * Oracle Port
 * @member {String} oracle-port
 * @default '1521'
 */

GatewayUpdateProducerOracleDb.prototype['oracle-port'] = '1521';
/**
 * Oracle Revocation statements
 * @member {String} oracle-revocation-statements
 */

GatewayUpdateProducerOracleDb.prototype['oracle-revocation-statements'] = undefined;
/**
 * Oracle Creation statements
 * @member {String} oracle-screation-statements
 */

GatewayUpdateProducerOracleDb.prototype['oracle-screation-statements'] = undefined;
/**
 * Oracle DB Name
 * @member {String} oracle-service-name
 */

GatewayUpdateProducerOracleDb.prototype['oracle-service-name'] = undefined;
/**
 * Oracle Username
 * @member {String} oracle-username
 */

GatewayUpdateProducerOracleDb.prototype['oracle-username'] = undefined;
/**
 * The length of the password to be generated
 * @member {String} password-length
 */

GatewayUpdateProducerOracleDb.prototype['password-length'] = undefined;
/**
 * Dynamic producer encryption key
 * @member {String} producer-encryption-key-name
 */

GatewayUpdateProducerOracleDb.prototype['producer-encryption-key-name'] = undefined;
/**
 * Deprecated. use secure-access-certificate-issuer
 * @member {String} secure-access-bastion-issuer
 */

GatewayUpdateProducerOracleDb.prototype['secure-access-bastion-issuer'] = undefined;
/**
 * Path to the SSH Certificate Issuer for your Akeyless Secure Access
 * @member {String} secure-access-certificate-issuer
 */

GatewayUpdateProducerOracleDb.prototype['secure-access-certificate-issuer'] = undefined;
/**
 * Enable/Disable secure remote access [true/false]
 * @member {String} secure-access-enable
 * @default 'false'
 */

GatewayUpdateProducerOracleDb.prototype['secure-access-enable'] = 'false';
/**
 * Target DB servers for connections (In case of Linked Target association, host(s) will inherit Linked Target hosts)
 * @member {Array.<String>} secure-access-host
 */

GatewayUpdateProducerOracleDb.prototype['secure-access-host'] = undefined;
/**
 * Enable Web Secure Remote Access
 * @member {Boolean} secure-access-web
 * @default false
 */

GatewayUpdateProducerOracleDb.prototype['secure-access-web'] = false;
/**
 * Add tags attached to this object
 * @member {Array.<String>} tags
 */

GatewayUpdateProducerOracleDb.prototype['tags'] = undefined;
/**
 * Target name
 * @member {String} target-name
 */

GatewayUpdateProducerOracleDb.prototype['target-name'] = undefined;
/**
 * Authentication token (see `/auth` and `/configure`)
 * @member {String} token
 */

GatewayUpdateProducerOracleDb.prototype['token'] = undefined;
/**
 * The universal identity token, Required only for universal_identity authentication
 * @member {String} uid-token
 */

GatewayUpdateProducerOracleDb.prototype['uid-token'] = undefined;
/**
 * User TTL
 * @member {String} user-ttl
 * @default '60m'
 */

GatewayUpdateProducerOracleDb.prototype['user-ttl'] = '60m';
var _default = GatewayUpdateProducerOracleDb;
exports["default"] = _default;