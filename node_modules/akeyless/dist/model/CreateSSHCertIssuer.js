"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ApiClient = _interopRequireDefault(require("../ApiClient"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * The CreateSSHCertIssuer model module.
 * @module model/CreateSSHCertIssuer
 * @version 2.15.24
 */
var CreateSSHCertIssuer = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>CreateSSHCertIssuer</code>.
   * @alias module:model/CreateSSHCertIssuer
   * @param allowedUsers {String} Users allowed to fetch the certificate, e.g root,ubuntu
   * @param name {String} SSH certificate issuer name
   * @param signerKeyName {String} A key to sign the certificate with
   * @param ttl {Number} he requested Time To Live for the certificate, in seconds
   */
  function CreateSSHCertIssuer(allowedUsers, name, signerKeyName, ttl) {
    _classCallCheck(this, CreateSSHCertIssuer);

    CreateSSHCertIssuer.initialize(this, allowedUsers, name, signerKeyName, ttl);
  }
  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */


  _createClass(CreateSSHCertIssuer, null, [{
    key: "initialize",
    value: function initialize(obj, allowedUsers, name, signerKeyName, ttl) {
      obj['allowed-users'] = allowedUsers;
      obj['name'] = name;
      obj['signer-key-name'] = signerKeyName;
      obj['ttl'] = ttl;
    }
    /**
     * Constructs a <code>CreateSSHCertIssuer</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateSSHCertIssuer} obj Optional instance to populate.
     * @return {module:model/CreateSSHCertIssuer} The populated <code>CreateSSHCertIssuer</code> instance.
     */

  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new CreateSSHCertIssuer();

        if (data.hasOwnProperty('allowed-users')) {
          obj['allowed-users'] = _ApiClient["default"].convertToType(data['allowed-users'], 'String');
        }

        if (data.hasOwnProperty('extensions')) {
          obj['extensions'] = _ApiClient["default"].convertToType(data['extensions'], {
            'String': 'String'
          });
        }

        if (data.hasOwnProperty('metadata')) {
          obj['metadata'] = _ApiClient["default"].convertToType(data['metadata'], 'String');
        }

        if (data.hasOwnProperty('name')) {
          obj['name'] = _ApiClient["default"].convertToType(data['name'], 'String');
        }

        if (data.hasOwnProperty('password')) {
          obj['password'] = _ApiClient["default"].convertToType(data['password'], 'String');
        }

        if (data.hasOwnProperty('principals')) {
          obj['principals'] = _ApiClient["default"].convertToType(data['principals'], 'String');
        }

        if (data.hasOwnProperty('secure-access-bastion-api')) {
          obj['secure-access-bastion-api'] = _ApiClient["default"].convertToType(data['secure-access-bastion-api'], 'String');
        }

        if (data.hasOwnProperty('secure-access-bastion-ssh')) {
          obj['secure-access-bastion-ssh'] = _ApiClient["default"].convertToType(data['secure-access-bastion-ssh'], 'String');
        }

        if (data.hasOwnProperty('secure-access-enable')) {
          obj['secure-access-enable'] = _ApiClient["default"].convertToType(data['secure-access-enable'], 'String');
        }

        if (data.hasOwnProperty('secure-access-host')) {
          obj['secure-access-host'] = _ApiClient["default"].convertToType(data['secure-access-host'], ['String']);
        }

        if (data.hasOwnProperty('secure-access-ssh-creds-user')) {
          obj['secure-access-ssh-creds-user'] = _ApiClient["default"].convertToType(data['secure-access-ssh-creds-user'], 'String');
        }

        if (data.hasOwnProperty('secure-access-use-internal-bastion')) {
          obj['secure-access-use-internal-bastion'] = _ApiClient["default"].convertToType(data['secure-access-use-internal-bastion'], 'Boolean');
        }

        if (data.hasOwnProperty('signer-key-name')) {
          obj['signer-key-name'] = _ApiClient["default"].convertToType(data['signer-key-name'], 'String');
        }

        if (data.hasOwnProperty('tag')) {
          obj['tag'] = _ApiClient["default"].convertToType(data['tag'], ['String']);
        }

        if (data.hasOwnProperty('token')) {
          obj['token'] = _ApiClient["default"].convertToType(data['token'], 'String');
        }

        if (data.hasOwnProperty('ttl')) {
          obj['ttl'] = _ApiClient["default"].convertToType(data['ttl'], 'Number');
        }

        if (data.hasOwnProperty('uid-token')) {
          obj['uid-token'] = _ApiClient["default"].convertToType(data['uid-token'], 'String');
        }

        if (data.hasOwnProperty('username')) {
          obj['username'] = _ApiClient["default"].convertToType(data['username'], 'String');
        }
      }

      return obj;
    }
  }]);

  return CreateSSHCertIssuer;
}();
/**
 * Users allowed to fetch the certificate, e.g root,ubuntu
 * @member {String} allowed-users
 */


CreateSSHCertIssuer.prototype['allowed-users'] = undefined;
/**
 * Signed certificates with extensions, e.g permit-port-forwarding=\\\"\\\"
 * @member {Object.<String, String>} extensions
 */

CreateSSHCertIssuer.prototype['extensions'] = undefined;
/**
 * A metadata about the issuer
 * @member {String} metadata
 */

CreateSSHCertIssuer.prototype['metadata'] = undefined;
/**
 * SSH certificate issuer name
 * @member {String} name
 */

CreateSSHCertIssuer.prototype['name'] = undefined;
/**
 * Required only when the authentication process requires a username and password
 * @member {String} password
 */

CreateSSHCertIssuer.prototype['password'] = undefined;
/**
 * Signed certificates with principal, e.g example_role1,example_role2
 * @member {String} principals
 */

CreateSSHCertIssuer.prototype['principals'] = undefined;
/**
 * @member {String} secure-access-bastion-api
 */

CreateSSHCertIssuer.prototype['secure-access-bastion-api'] = undefined;
/**
 * @member {String} secure-access-bastion-ssh
 */

CreateSSHCertIssuer.prototype['secure-access-bastion-ssh'] = undefined;
/**
 * @member {String} secure-access-enable
 */

CreateSSHCertIssuer.prototype['secure-access-enable'] = undefined;
/**
 * @member {Array.<String>} secure-access-host
 */

CreateSSHCertIssuer.prototype['secure-access-host'] = undefined;
/**
 * @member {String} secure-access-ssh-creds-user
 */

CreateSSHCertIssuer.prototype['secure-access-ssh-creds-user'] = undefined;
/**
 * @member {Boolean} secure-access-use-internal-bastion
 */

CreateSSHCertIssuer.prototype['secure-access-use-internal-bastion'] = undefined;
/**
 * A key to sign the certificate with
 * @member {String} signer-key-name
 */

CreateSSHCertIssuer.prototype['signer-key-name'] = undefined;
/**
 * List of the tags attached to this key
 * @member {Array.<String>} tag
 */

CreateSSHCertIssuer.prototype['tag'] = undefined;
/**
 * Authentication token (see `/auth` and `/configure`)
 * @member {String} token
 */

CreateSSHCertIssuer.prototype['token'] = undefined;
/**
 * he requested Time To Live for the certificate, in seconds
 * @member {Number} ttl
 */

CreateSSHCertIssuer.prototype['ttl'] = undefined;
/**
 * The universal identity token, Required only for universal_identity authentication
 * @member {String} uid-token
 */

CreateSSHCertIssuer.prototype['uid-token'] = undefined;
/**
 * Required only when the authentication process requires a username and password
 * @member {String} username
 */

CreateSSHCertIssuer.prototype['username'] = undefined;
var _default = CreateSSHCertIssuer;
exports["default"] = _default;