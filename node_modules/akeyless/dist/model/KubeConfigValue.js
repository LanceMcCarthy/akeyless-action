"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ApiClient = _interopRequireDefault(require("../ApiClient"));

var _KubeconfigNamedCluster = _interopRequireDefault(require("./KubeconfigNamedCluster"));

var _KubeconfigNamedContext = _interopRequireDefault(require("./KubeconfigNamedContext"));

var _KubeconfigUser = _interopRequireDefault(require("./KubeconfigUser"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * The KubeConfigValue model module.
 * @module model/KubeConfigValue
 * @version 5.0.0
 */
var KubeConfigValue = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>KubeConfigValue</code>.
   * @alias module:model/KubeConfigValue
   */
  function KubeConfigValue() {
    _classCallCheck(this, KubeConfigValue);

    KubeConfigValue.initialize(this);
  }
  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */


  _createClass(KubeConfigValue, null, [{
    key: "initialize",
    value: function initialize(obj) {}
    /**
     * Constructs a <code>KubeConfigValue</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/KubeConfigValue} obj Optional instance to populate.
     * @return {module:model/KubeConfigValue} The populated <code>KubeConfigValue</code> instance.
     */

  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new KubeConfigValue();

        if (data.hasOwnProperty('apiVersion')) {
          obj['apiVersion'] = _ApiClient["default"].convertToType(data['apiVersion'], 'String');
        }

        if (data.hasOwnProperty('clusters')) {
          obj['clusters'] = _ApiClient["default"].convertToType(data['clusters'], [_KubeconfigNamedCluster["default"]]);
        }

        if (data.hasOwnProperty('contexts')) {
          obj['contexts'] = _ApiClient["default"].convertToType(data['contexts'], [_KubeconfigNamedContext["default"]]);
        }

        if (data.hasOwnProperty('current-context')) {
          obj['current-context'] = _ApiClient["default"].convertToType(data['current-context'], 'String');
        }

        if (data.hasOwnProperty('kind')) {
          obj['kind'] = _ApiClient["default"].convertToType(data['kind'], 'String');
        }

        if (data.hasOwnProperty('users')) {
          obj['users'] = _ApiClient["default"].convertToType(data['users'], [_KubeconfigUser["default"]]);
        }
      }

      return obj;
    }
    /**
     * Validates the JSON data with respect to <code>KubeConfigValue</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>KubeConfigValue</code>.
     */

  }, {
    key: "validateJSON",
    value: function validateJSON(data) {
      // ensure the json data is a string
      if (data['apiVersion'] && !(typeof data['apiVersion'] === 'string' || data['apiVersion'] instanceof String)) {
        throw new Error("Expected the field `apiVersion` to be a primitive type in the JSON string but got " + data['apiVersion']);
      }

      if (data['clusters']) {
        // data not null
        // ensure the json data is an array
        if (!Array.isArray(data['clusters'])) {
          throw new Error("Expected the field `clusters` to be an array in the JSON data but got " + data['clusters']);
        } // validate the optional field `clusters` (array)


        var _iterator = _createForOfIteratorHelper(data['clusters']),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var item = _step.value;

            _KubeconfigNamedCluster["default"].validateJSON(item);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }

        ;
      }

      if (data['contexts']) {
        // data not null
        // ensure the json data is an array
        if (!Array.isArray(data['contexts'])) {
          throw new Error("Expected the field `contexts` to be an array in the JSON data but got " + data['contexts']);
        } // validate the optional field `contexts` (array)


        var _iterator2 = _createForOfIteratorHelper(data['contexts']),
            _step2;

        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var _item = _step2.value;

            _KubeconfigNamedContext["default"].validateJSON(_item);
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }

        ;
      } // ensure the json data is a string


      if (data['current-context'] && !(typeof data['current-context'] === 'string' || data['current-context'] instanceof String)) {
        throw new Error("Expected the field `current-context` to be a primitive type in the JSON string but got " + data['current-context']);
      } // ensure the json data is a string


      if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
        throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
      }

      if (data['users']) {
        // data not null
        // ensure the json data is an array
        if (!Array.isArray(data['users'])) {
          throw new Error("Expected the field `users` to be an array in the JSON data but got " + data['users']);
        } // validate the optional field `users` (array)


        var _iterator3 = _createForOfIteratorHelper(data['users']),
            _step3;

        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            var _item2 = _step3.value;

            _KubeconfigUser["default"].validateJSON(_item2);
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }

        ;
      }

      return true;
    }
  }]);

  return KubeConfigValue;
}();
/**
 * @member {String} apiVersion
 */


KubeConfigValue.prototype['apiVersion'] = undefined;
/**
 * @member {Array.<module:model/KubeconfigNamedCluster>} clusters
 */

KubeConfigValue.prototype['clusters'] = undefined;
/**
 * @member {Array.<module:model/KubeconfigNamedContext>} contexts
 */

KubeConfigValue.prototype['contexts'] = undefined;
/**
 * @member {String} current-context
 */

KubeConfigValue.prototype['current-context'] = undefined;
/**
 * @member {String} kind
 */

KubeConfigValue.prototype['kind'] = undefined;
/**
 * @member {Array.<module:model/KubeconfigUser>} users
 */

KubeConfigValue.prototype['users'] = undefined;
var _default = KubeConfigValue;
exports["default"] = _default;