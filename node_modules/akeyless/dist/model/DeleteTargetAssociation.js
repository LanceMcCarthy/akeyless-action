"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ApiClient = _interopRequireDefault(require("../ApiClient"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * The DeleteTargetAssociation model module.
 * @module model/DeleteTargetAssociation
 * @version 3.3.15
 */
var DeleteTargetAssociation = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>DeleteTargetAssociation</code>.
   * deleteTargetAssociation is a command that deletes an association between target and item.
   * @alias module:model/DeleteTargetAssociation
   * @param name {String} Item name
   */
  function DeleteTargetAssociation(name) {
    _classCallCheck(this, DeleteTargetAssociation);

    DeleteTargetAssociation.initialize(this, name);
  }
  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */


  _createClass(DeleteTargetAssociation, null, [{
    key: "initialize",
    value: function initialize(obj, name) {
      obj['name'] = name;
    }
    /**
     * Constructs a <code>DeleteTargetAssociation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DeleteTargetAssociation} obj Optional instance to populate.
     * @return {module:model/DeleteTargetAssociation} The populated <code>DeleteTargetAssociation</code> instance.
     */

  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new DeleteTargetAssociation();

        if (data.hasOwnProperty('assoc-id')) {
          obj['assoc-id'] = _ApiClient["default"].convertToType(data['assoc-id'], 'String');
        }

        if (data.hasOwnProperty('json')) {
          obj['json'] = _ApiClient["default"].convertToType(data['json'], 'Boolean');
        }

        if (data.hasOwnProperty('name')) {
          obj['name'] = _ApiClient["default"].convertToType(data['name'], 'String');
        }

        if (data.hasOwnProperty('target-name')) {
          obj['target-name'] = _ApiClient["default"].convertToType(data['target-name'], 'String');
        }

        if (data.hasOwnProperty('token')) {
          obj['token'] = _ApiClient["default"].convertToType(data['token'], 'String');
        }

        if (data.hasOwnProperty('uid-token')) {
          obj['uid-token'] = _ApiClient["default"].convertToType(data['uid-token'], 'String');
        }
      }

      return obj;
    }
  }]);

  return DeleteTargetAssociation;
}();
/**
 * The association id to be deleted
 * @member {String} assoc-id
 */


DeleteTargetAssociation.prototype['assoc-id'] = undefined;
/**
 * Set output format to JSON
 * @member {Boolean} json
 * @default false
 */

DeleteTargetAssociation.prototype['json'] = false;
/**
 * Item name
 * @member {String} name
 */

DeleteTargetAssociation.prototype['name'] = undefined;
/**
 * The target to associate
 * @member {String} target-name
 */

DeleteTargetAssociation.prototype['target-name'] = undefined;
/**
 * Authentication token (see `/auth` and `/configure`)
 * @member {String} token
 */

DeleteTargetAssociation.prototype['token'] = undefined;
/**
 * The universal identity token, Required only for universal_identity authentication
 * @member {String} uid-token
 */

DeleteTargetAssociation.prototype['uid-token'] = undefined;
var _default = DeleteTargetAssociation;
exports["default"] = _default;