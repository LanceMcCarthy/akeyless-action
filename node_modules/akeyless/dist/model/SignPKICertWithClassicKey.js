"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ApiClient = _interopRequireDefault(require("../ApiClient"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * The SignPKICertWithClassicKey model module.
 * @module model/SignPKICertWithClassicKey
 * @version 5.0.0
 */
var SignPKICertWithClassicKey = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>SignPKICertWithClassicKey</code>.
   * @alias module:model/SignPKICertWithClassicKey
   * @param displayId {String} The name of the key to use in the sign PKI Cert process
   * @param signingMethod {String} SigningMethod
   * @param ttl {Number} he requested Time To Live for the certificate, in seconds
   * @param version {Number} classic key version
   */
  function SignPKICertWithClassicKey(displayId, signingMethod, ttl, version) {
    _classCallCheck(this, SignPKICertWithClassicKey);

    SignPKICertWithClassicKey.initialize(this, displayId, signingMethod, ttl, version);
  }
  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */


  _createClass(SignPKICertWithClassicKey, null, [{
    key: "initialize",
    value: function initialize(obj, displayId, signingMethod, ttl, version) {
      obj['display-id'] = displayId;
      obj['json'] = false;
      obj['key-usage'] = 'DigitalSignature,KeyAgreement,KeyEncipherment';
      obj['signing-method'] = signingMethod;
      obj['ttl'] = ttl;
      obj['version'] = version;
    }
    /**
     * Constructs a <code>SignPKICertWithClassicKey</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SignPKICertWithClassicKey} obj Optional instance to populate.
     * @return {module:model/SignPKICertWithClassicKey} The populated <code>SignPKICertWithClassicKey</code> instance.
     */

  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new SignPKICertWithClassicKey();

        if (data.hasOwnProperty('common-name')) {
          obj['common-name'] = _ApiClient["default"].convertToType(data['common-name'], 'String');
        }

        if (data.hasOwnProperty('country')) {
          obj['country'] = _ApiClient["default"].convertToType(data['country'], 'String');
        }

        if (data.hasOwnProperty('display-id')) {
          obj['display-id'] = _ApiClient["default"].convertToType(data['display-id'], 'String');
        }

        if (data.hasOwnProperty('dns-names')) {
          obj['dns-names'] = _ApiClient["default"].convertToType(data['dns-names'], 'String');
        }

        if (data.hasOwnProperty('json')) {
          obj['json'] = _ApiClient["default"].convertToType(data['json'], 'Boolean');
        }

        if (data.hasOwnProperty('key-usage')) {
          obj['key-usage'] = _ApiClient["default"].convertToType(data['key-usage'], 'String');
        }

        if (data.hasOwnProperty('locality')) {
          obj['locality'] = _ApiClient["default"].convertToType(data['locality'], 'String');
        }

        if (data.hasOwnProperty('organizational-units')) {
          obj['organizational-units'] = _ApiClient["default"].convertToType(data['organizational-units'], 'String');
        }

        if (data.hasOwnProperty('organizations')) {
          obj['organizations'] = _ApiClient["default"].convertToType(data['organizations'], 'String');
        }

        if (data.hasOwnProperty('postal-code')) {
          obj['postal-code'] = _ApiClient["default"].convertToType(data['postal-code'], 'String');
        }

        if (data.hasOwnProperty('province')) {
          obj['province'] = _ApiClient["default"].convertToType(data['province'], 'String');
        }

        if (data.hasOwnProperty('public-key-pem-data')) {
          obj['public-key-pem-data'] = _ApiClient["default"].convertToType(data['public-key-pem-data'], 'String');
        }

        if (data.hasOwnProperty('signing-method')) {
          obj['signing-method'] = _ApiClient["default"].convertToType(data['signing-method'], 'String');
        }

        if (data.hasOwnProperty('street-address')) {
          obj['street-address'] = _ApiClient["default"].convertToType(data['street-address'], 'String');
        }

        if (data.hasOwnProperty('token')) {
          obj['token'] = _ApiClient["default"].convertToType(data['token'], 'String');
        }

        if (data.hasOwnProperty('ttl')) {
          obj['ttl'] = _ApiClient["default"].convertToType(data['ttl'], 'Number');
        }

        if (data.hasOwnProperty('uid-token')) {
          obj['uid-token'] = _ApiClient["default"].convertToType(data['uid-token'], 'String');
        }

        if (data.hasOwnProperty('uri-sans')) {
          obj['uri-sans'] = _ApiClient["default"].convertToType(data['uri-sans'], 'String');
        }

        if (data.hasOwnProperty('version')) {
          obj['version'] = _ApiClient["default"].convertToType(data['version'], 'Number');
        }
      }

      return obj;
    }
    /**
     * Validates the JSON data with respect to <code>SignPKICertWithClassicKey</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SignPKICertWithClassicKey</code>.
     */

  }, {
    key: "validateJSON",
    value: function validateJSON(data) {
      // check to make sure all required properties are present in the JSON string
      var _iterator = _createForOfIteratorHelper(SignPKICertWithClassicKey.RequiredProperties),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var property = _step.value;

          if (!data.hasOwnProperty(property)) {
            throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
          }
        } // ensure the json data is a string

      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      if (data['common-name'] && !(typeof data['common-name'] === 'string' || data['common-name'] instanceof String)) {
        throw new Error("Expected the field `common-name` to be a primitive type in the JSON string but got " + data['common-name']);
      } // ensure the json data is a string


      if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
        throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
      } // ensure the json data is a string


      if (data['display-id'] && !(typeof data['display-id'] === 'string' || data['display-id'] instanceof String)) {
        throw new Error("Expected the field `display-id` to be a primitive type in the JSON string but got " + data['display-id']);
      } // ensure the json data is a string


      if (data['dns-names'] && !(typeof data['dns-names'] === 'string' || data['dns-names'] instanceof String)) {
        throw new Error("Expected the field `dns-names` to be a primitive type in the JSON string but got " + data['dns-names']);
      } // ensure the json data is a string


      if (data['key-usage'] && !(typeof data['key-usage'] === 'string' || data['key-usage'] instanceof String)) {
        throw new Error("Expected the field `key-usage` to be a primitive type in the JSON string but got " + data['key-usage']);
      } // ensure the json data is a string


      if (data['locality'] && !(typeof data['locality'] === 'string' || data['locality'] instanceof String)) {
        throw new Error("Expected the field `locality` to be a primitive type in the JSON string but got " + data['locality']);
      } // ensure the json data is a string


      if (data['organizational-units'] && !(typeof data['organizational-units'] === 'string' || data['organizational-units'] instanceof String)) {
        throw new Error("Expected the field `organizational-units` to be a primitive type in the JSON string but got " + data['organizational-units']);
      } // ensure the json data is a string


      if (data['organizations'] && !(typeof data['organizations'] === 'string' || data['organizations'] instanceof String)) {
        throw new Error("Expected the field `organizations` to be a primitive type in the JSON string but got " + data['organizations']);
      } // ensure the json data is a string


      if (data['postal-code'] && !(typeof data['postal-code'] === 'string' || data['postal-code'] instanceof String)) {
        throw new Error("Expected the field `postal-code` to be a primitive type in the JSON string but got " + data['postal-code']);
      } // ensure the json data is a string


      if (data['province'] && !(typeof data['province'] === 'string' || data['province'] instanceof String)) {
        throw new Error("Expected the field `province` to be a primitive type in the JSON string but got " + data['province']);
      } // ensure the json data is a string


      if (data['public-key-pem-data'] && !(typeof data['public-key-pem-data'] === 'string' || data['public-key-pem-data'] instanceof String)) {
        throw new Error("Expected the field `public-key-pem-data` to be a primitive type in the JSON string but got " + data['public-key-pem-data']);
      } // ensure the json data is a string


      if (data['signing-method'] && !(typeof data['signing-method'] === 'string' || data['signing-method'] instanceof String)) {
        throw new Error("Expected the field `signing-method` to be a primitive type in the JSON string but got " + data['signing-method']);
      } // ensure the json data is a string


      if (data['street-address'] && !(typeof data['street-address'] === 'string' || data['street-address'] instanceof String)) {
        throw new Error("Expected the field `street-address` to be a primitive type in the JSON string but got " + data['street-address']);
      } // ensure the json data is a string


      if (data['token'] && !(typeof data['token'] === 'string' || data['token'] instanceof String)) {
        throw new Error("Expected the field `token` to be a primitive type in the JSON string but got " + data['token']);
      } // ensure the json data is a string


      if (data['uid-token'] && !(typeof data['uid-token'] === 'string' || data['uid-token'] instanceof String)) {
        throw new Error("Expected the field `uid-token` to be a primitive type in the JSON string but got " + data['uid-token']);
      } // ensure the json data is a string


      if (data['uri-sans'] && !(typeof data['uri-sans'] === 'string' || data['uri-sans'] instanceof String)) {
        throw new Error("Expected the field `uri-sans` to be a primitive type in the JSON string but got " + data['uri-sans']);
      }

      return true;
    }
  }]);

  return SignPKICertWithClassicKey;
}();

SignPKICertWithClassicKey.RequiredProperties = ["display-id", "signing-method", "ttl", "version"];
/**
 * The common name to be included in the PKI certificate
 * @member {String} common-name
 */

SignPKICertWithClassicKey.prototype['common-name'] = undefined;
/**
 * A comma-separated list of the country that will be set in the issued certificate
 * @member {String} country
 */

SignPKICertWithClassicKey.prototype['country'] = undefined;
/**
 * The name of the key to use in the sign PKI Cert process
 * @member {String} display-id
 */

SignPKICertWithClassicKey.prototype['display-id'] = undefined;
/**
 * DNS Names to be included in the PKI certificate (in a comma-delimited list)
 * @member {String} dns-names
 */

SignPKICertWithClassicKey.prototype['dns-names'] = undefined;
/**
 * Set output format to JSON
 * @member {Boolean} json
 * @default false
 */

SignPKICertWithClassicKey.prototype['json'] = false;
/**
 * key-usage
 * @member {String} key-usage
 * @default 'DigitalSignature,KeyAgreement,KeyEncipherment'
 */

SignPKICertWithClassicKey.prototype['key-usage'] = 'DigitalSignature,KeyAgreement,KeyEncipherment';
/**
 * A comma-separated list of the locality that will be set in the issued certificate
 * @member {String} locality
 */

SignPKICertWithClassicKey.prototype['locality'] = undefined;
/**
 * A comma-separated list of organizational units (OU) that will be set in the issued certificate
 * @member {String} organizational-units
 */

SignPKICertWithClassicKey.prototype['organizational-units'] = undefined;
/**
 * A comma-separated list of organizations (O) that will be set in the issued certificate
 * @member {String} organizations
 */

SignPKICertWithClassicKey.prototype['organizations'] = undefined;
/**
 * A comma-separated list of the postal code that will be set in the issued certificate
 * @member {String} postal-code
 */

SignPKICertWithClassicKey.prototype['postal-code'] = undefined;
/**
 * A comma-separated list of the province that will be set in the issued certificate
 * @member {String} province
 */

SignPKICertWithClassicKey.prototype['province'] = undefined;
/**
 * PublicKey using for signing in a PEM format.
 * @member {String} public-key-pem-data
 */

SignPKICertWithClassicKey.prototype['public-key-pem-data'] = undefined;
/**
 * SigningMethod
 * @member {String} signing-method
 */

SignPKICertWithClassicKey.prototype['signing-method'] = undefined;
/**
 * A comma-separated list of the street address that will be set in the issued certificate
 * @member {String} street-address
 */

SignPKICertWithClassicKey.prototype['street-address'] = undefined;
/**
 * Authentication token (see `/auth` and `/configure`)
 * @member {String} token
 */

SignPKICertWithClassicKey.prototype['token'] = undefined;
/**
 * he requested Time To Live for the certificate, in seconds
 * @member {Number} ttl
 */

SignPKICertWithClassicKey.prototype['ttl'] = undefined;
/**
 * The universal identity token, Required only for universal_identity authentication
 * @member {String} uid-token
 */

SignPKICertWithClassicKey.prototype['uid-token'] = undefined;
/**
 * The URI Subject Alternative Names to be included in the PKI certificate (in a comma-delimited list)
 * @member {String} uri-sans
 */

SignPKICertWithClassicKey.prototype['uri-sans'] = undefined;
/**
 * classic key version
 * @member {Number} version
 */

SignPKICertWithClassicKey.prototype['version'] = undefined;
var _default = SignPKICertWithClassicKey;
exports["default"] = _default;