"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ApiClient = _interopRequireDefault(require("../ApiClient"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * The RotatedSecretCreateCassandra model module.
 * @module model/RotatedSecretCreateCassandra
 * @version 5.0.0
 */
var RotatedSecretCreateCassandra = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>RotatedSecretCreateCassandra</code>.
   * @alias module:model/RotatedSecretCreateCassandra
   * @param name {String} Rotated secret name
   * @param rotatorType {String} The rotator type. options: [target/password]
   * @param targetName {String} Target name
   */
  function RotatedSecretCreateCassandra(name, rotatorType, targetName) {
    _classCallCheck(this, RotatedSecretCreateCassandra);

    RotatedSecretCreateCassandra.initialize(this, name, rotatorType, targetName);
  }
  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */


  _createClass(RotatedSecretCreateCassandra, null, [{
    key: "initialize",
    value: function initialize(obj, name, rotatorType, targetName) {
      obj['authentication-credentials'] = 'use-user-creds';
      obj['json'] = false;
      obj['name'] = name;
      obj['rotator-type'] = rotatorType;
      obj['target-name'] = targetName;
    }
    /**
     * Constructs a <code>RotatedSecretCreateCassandra</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RotatedSecretCreateCassandra} obj Optional instance to populate.
     * @return {module:model/RotatedSecretCreateCassandra} The populated <code>RotatedSecretCreateCassandra</code> instance.
     */

  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new RotatedSecretCreateCassandra();

        if (data.hasOwnProperty('authentication-credentials')) {
          obj['authentication-credentials'] = _ApiClient["default"].convertToType(data['authentication-credentials'], 'String');
        }

        if (data.hasOwnProperty('auto-rotate')) {
          obj['auto-rotate'] = _ApiClient["default"].convertToType(data['auto-rotate'], 'String');
        }

        if (data.hasOwnProperty('delete_protection')) {
          obj['delete_protection'] = _ApiClient["default"].convertToType(data['delete_protection'], 'String');
        }

        if (data.hasOwnProperty('description')) {
          obj['description'] = _ApiClient["default"].convertToType(data['description'], 'String');
        }

        if (data.hasOwnProperty('json')) {
          obj['json'] = _ApiClient["default"].convertToType(data['json'], 'Boolean');
        }

        if (data.hasOwnProperty('key')) {
          obj['key'] = _ApiClient["default"].convertToType(data['key'], 'String');
        }

        if (data.hasOwnProperty('max-versions')) {
          obj['max-versions'] = _ApiClient["default"].convertToType(data['max-versions'], 'String');
        }

        if (data.hasOwnProperty('name')) {
          obj['name'] = _ApiClient["default"].convertToType(data['name'], 'String');
        }

        if (data.hasOwnProperty('password-length')) {
          obj['password-length'] = _ApiClient["default"].convertToType(data['password-length'], 'String');
        }

        if (data.hasOwnProperty('rotated-password')) {
          obj['rotated-password'] = _ApiClient["default"].convertToType(data['rotated-password'], 'String');
        }

        if (data.hasOwnProperty('rotated-username')) {
          obj['rotated-username'] = _ApiClient["default"].convertToType(data['rotated-username'], 'String');
        }

        if (data.hasOwnProperty('rotation-event-in')) {
          obj['rotation-event-in'] = _ApiClient["default"].convertToType(data['rotation-event-in'], ['String']);
        }

        if (data.hasOwnProperty('rotation-hour')) {
          obj['rotation-hour'] = _ApiClient["default"].convertToType(data['rotation-hour'], 'Number');
        }

        if (data.hasOwnProperty('rotation-interval')) {
          obj['rotation-interval'] = _ApiClient["default"].convertToType(data['rotation-interval'], 'String');
        }

        if (data.hasOwnProperty('rotator-type')) {
          obj['rotator-type'] = _ApiClient["default"].convertToType(data['rotator-type'], 'String');
        }

        if (data.hasOwnProperty('tags')) {
          obj['tags'] = _ApiClient["default"].convertToType(data['tags'], ['String']);
        }

        if (data.hasOwnProperty('target-name')) {
          obj['target-name'] = _ApiClient["default"].convertToType(data['target-name'], 'String');
        }

        if (data.hasOwnProperty('token')) {
          obj['token'] = _ApiClient["default"].convertToType(data['token'], 'String');
        }

        if (data.hasOwnProperty('uid-token')) {
          obj['uid-token'] = _ApiClient["default"].convertToType(data['uid-token'], 'String');
        }
      }

      return obj;
    }
    /**
     * Validates the JSON data with respect to <code>RotatedSecretCreateCassandra</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RotatedSecretCreateCassandra</code>.
     */

  }, {
    key: "validateJSON",
    value: function validateJSON(data) {
      // check to make sure all required properties are present in the JSON string
      var _iterator = _createForOfIteratorHelper(RotatedSecretCreateCassandra.RequiredProperties),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var property = _step.value;

          if (!data.hasOwnProperty(property)) {
            throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
          }
        } // ensure the json data is a string

      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      if (data['authentication-credentials'] && !(typeof data['authentication-credentials'] === 'string' || data['authentication-credentials'] instanceof String)) {
        throw new Error("Expected the field `authentication-credentials` to be a primitive type in the JSON string but got " + data['authentication-credentials']);
      } // ensure the json data is a string


      if (data['auto-rotate'] && !(typeof data['auto-rotate'] === 'string' || data['auto-rotate'] instanceof String)) {
        throw new Error("Expected the field `auto-rotate` to be a primitive type in the JSON string but got " + data['auto-rotate']);
      } // ensure the json data is a string


      if (data['delete_protection'] && !(typeof data['delete_protection'] === 'string' || data['delete_protection'] instanceof String)) {
        throw new Error("Expected the field `delete_protection` to be a primitive type in the JSON string but got " + data['delete_protection']);
      } // ensure the json data is a string


      if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
        throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
      } // ensure the json data is a string


      if (data['key'] && !(typeof data['key'] === 'string' || data['key'] instanceof String)) {
        throw new Error("Expected the field `key` to be a primitive type in the JSON string but got " + data['key']);
      } // ensure the json data is a string


      if (data['max-versions'] && !(typeof data['max-versions'] === 'string' || data['max-versions'] instanceof String)) {
        throw new Error("Expected the field `max-versions` to be a primitive type in the JSON string but got " + data['max-versions']);
      } // ensure the json data is a string


      if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
        throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
      } // ensure the json data is a string


      if (data['password-length'] && !(typeof data['password-length'] === 'string' || data['password-length'] instanceof String)) {
        throw new Error("Expected the field `password-length` to be a primitive type in the JSON string but got " + data['password-length']);
      } // ensure the json data is a string


      if (data['rotated-password'] && !(typeof data['rotated-password'] === 'string' || data['rotated-password'] instanceof String)) {
        throw new Error("Expected the field `rotated-password` to be a primitive type in the JSON string but got " + data['rotated-password']);
      } // ensure the json data is a string


      if (data['rotated-username'] && !(typeof data['rotated-username'] === 'string' || data['rotated-username'] instanceof String)) {
        throw new Error("Expected the field `rotated-username` to be a primitive type in the JSON string but got " + data['rotated-username']);
      } // ensure the json data is an array


      if (!Array.isArray(data['rotation-event-in'])) {
        throw new Error("Expected the field `rotation-event-in` to be an array in the JSON data but got " + data['rotation-event-in']);
      } // ensure the json data is a string


      if (data['rotation-interval'] && !(typeof data['rotation-interval'] === 'string' || data['rotation-interval'] instanceof String)) {
        throw new Error("Expected the field `rotation-interval` to be a primitive type in the JSON string but got " + data['rotation-interval']);
      } // ensure the json data is a string


      if (data['rotator-type'] && !(typeof data['rotator-type'] === 'string' || data['rotator-type'] instanceof String)) {
        throw new Error("Expected the field `rotator-type` to be a primitive type in the JSON string but got " + data['rotator-type']);
      } // ensure the json data is an array


      if (!Array.isArray(data['tags'])) {
        throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
      } // ensure the json data is a string


      if (data['target-name'] && !(typeof data['target-name'] === 'string' || data['target-name'] instanceof String)) {
        throw new Error("Expected the field `target-name` to be a primitive type in the JSON string but got " + data['target-name']);
      } // ensure the json data is a string


      if (data['token'] && !(typeof data['token'] === 'string' || data['token'] instanceof String)) {
        throw new Error("Expected the field `token` to be a primitive type in the JSON string but got " + data['token']);
      } // ensure the json data is a string


      if (data['uid-token'] && !(typeof data['uid-token'] === 'string' || data['uid-token'] instanceof String)) {
        throw new Error("Expected the field `uid-token` to be a primitive type in the JSON string but got " + data['uid-token']);
      }

      return true;
    }
  }]);

  return RotatedSecretCreateCassandra;
}();

RotatedSecretCreateCassandra.RequiredProperties = ["name", "rotator-type", "target-name"];
/**
 * The credentials to connect with use-user-creds/use-target-creds
 * @member {String} authentication-credentials
 * @default 'use-user-creds'
 */

RotatedSecretCreateCassandra.prototype['authentication-credentials'] = 'use-user-creds';
/**
 * Whether to automatically rotate every --rotation-interval days, or disable existing automatic rotation [true/false]
 * @member {String} auto-rotate
 */

RotatedSecretCreateCassandra.prototype['auto-rotate'] = undefined;
/**
 * Protection from accidental deletion of this object [true/false]
 * @member {String} delete_protection
 */

RotatedSecretCreateCassandra.prototype['delete_protection'] = undefined;
/**
 * Description of the object
 * @member {String} description
 */

RotatedSecretCreateCassandra.prototype['description'] = undefined;
/**
 * Set output format to JSON
 * @member {Boolean} json
 * @default false
 */

RotatedSecretCreateCassandra.prototype['json'] = false;
/**
 * The name of a key that used to encrypt the secret value (if empty, the account default protectionKey key will be used)
 * @member {String} key
 */

RotatedSecretCreateCassandra.prototype['key'] = undefined;
/**
 * Set the maximum number of versions, limited by the account settings defaults.
 * @member {String} max-versions
 */

RotatedSecretCreateCassandra.prototype['max-versions'] = undefined;
/**
 * Rotated secret name
 * @member {String} name
 */

RotatedSecretCreateCassandra.prototype['name'] = undefined;
/**
 * The length of the password to be generated
 * @member {String} password-length
 */

RotatedSecretCreateCassandra.prototype['password-length'] = undefined;
/**
 * rotated-username password (relevant only for rotator-type=password)
 * @member {String} rotated-password
 */

RotatedSecretCreateCassandra.prototype['rotated-password'] = undefined;
/**
 * username to be rotated, if selected use-self-creds at rotator-creds-type, this username will try to rotate it's own password, if use-target-creds is selected, target credentials will be use to rotate the rotated-password (relevant only for rotator-type=password)
 * @member {String} rotated-username
 */

RotatedSecretCreateCassandra.prototype['rotated-username'] = undefined;
/**
 * How many days before the rotation of the item would you like to be notified
 * @member {Array.<String>} rotation-event-in
 */

RotatedSecretCreateCassandra.prototype['rotation-event-in'] = undefined;
/**
 * The Hour of the rotation in UTC
 * @member {Number} rotation-hour
 */

RotatedSecretCreateCassandra.prototype['rotation-hour'] = undefined;
/**
 * The number of days to wait between every automatic key rotation (1-365)
 * @member {String} rotation-interval
 */

RotatedSecretCreateCassandra.prototype['rotation-interval'] = undefined;
/**
 * The rotator type. options: [target/password]
 * @member {String} rotator-type
 */

RotatedSecretCreateCassandra.prototype['rotator-type'] = undefined;
/**
 * Add tags attached to this object
 * @member {Array.<String>} tags
 */

RotatedSecretCreateCassandra.prototype['tags'] = undefined;
/**
 * Target name
 * @member {String} target-name
 */

RotatedSecretCreateCassandra.prototype['target-name'] = undefined;
/**
 * Authentication token (see `/auth` and `/configure`)
 * @member {String} token
 */

RotatedSecretCreateCassandra.prototype['token'] = undefined;
/**
 * The universal identity token, Required only for universal_identity authentication
 * @member {String} uid-token
 */

RotatedSecretCreateCassandra.prototype['uid-token'] = undefined;
var _default = RotatedSecretCreateCassandra;
exports["default"] = _default;