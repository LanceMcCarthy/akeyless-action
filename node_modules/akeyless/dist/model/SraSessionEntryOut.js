"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ApiClient = _interopRequireDefault(require("../ApiClient"));

var _GatewayNameInfo = _interopRequireDefault(require("./GatewayNameInfo"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * The SraSessionEntryOut model module.
 * @module model/SraSessionEntryOut
 * @version 5.0.1
 */
var SraSessionEntryOut = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>SraSessionEntryOut</code>.
   * @alias module:model/SraSessionEntryOut
   */
  function SraSessionEntryOut() {
    _classCallCheck(this, SraSessionEntryOut);

    SraSessionEntryOut.initialize(this);
  }
  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */


  _createClass(SraSessionEntryOut, null, [{
    key: "initialize",
    value: function initialize(obj) {}
    /**
     * Constructs a <code>SraSessionEntryOut</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SraSessionEntryOut} obj Optional instance to populate.
     * @return {module:model/SraSessionEntryOut} The populated <code>SraSessionEntryOut</code> instance.
     */

  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new SraSessionEntryOut();

        if (data.hasOwnProperty('access_id')) {
          obj['access_id'] = _ApiClient["default"].convertToType(data['access_id'], 'String');
        }

        if (data.hasOwnProperty('client_type')) {
          obj['client_type'] = _ApiClient["default"].convertToType(data['client_type'], 'String');
        }

        if (data.hasOwnProperty('cluster_unique_id')) {
          obj['cluster_unique_id'] = _ApiClient["default"].convertToType(data['cluster_unique_id'], 'Number');
        }

        if (data.hasOwnProperty('connection_type')) {
          obj['connection_type'] = _ApiClient["default"].convertToType(data['connection_type'], 'String');
        }

        if (data.hasOwnProperty('end_time')) {
          obj['end_time'] = _ApiClient["default"].convertToType(data['end_time'], 'Date');
        }

        if (data.hasOwnProperty('error_msg')) {
          obj['error_msg'] = _ApiClient["default"].convertToType(data['error_msg'], 'String');
        }

        if (data.hasOwnProperty('gateway_info')) {
          obj['gateway_info'] = _GatewayNameInfo["default"].constructFromObject(data['gateway_info']);
        }

        if (data.hasOwnProperty('instance_id')) {
          obj['instance_id'] = _ApiClient["default"].convertToType(data['instance_id'], 'String');
        }

        if (data.hasOwnProperty('secret_name')) {
          obj['secret_name'] = _ApiClient["default"].convertToType(data['secret_name'], 'String');
        }

        if (data.hasOwnProperty('session_id')) {
          obj['session_id'] = _ApiClient["default"].convertToType(data['session_id'], 'String');
        }

        if (data.hasOwnProperty('start_time')) {
          obj['start_time'] = _ApiClient["default"].convertToType(data['start_time'], 'Date');
        }

        if (data.hasOwnProperty('status')) {
          obj['status'] = _ApiClient["default"].convertToType(data['status'], 'String');
        }

        if (data.hasOwnProperty('target_host')) {
          obj['target_host'] = _ApiClient["default"].convertToType(data['target_host'], 'String');
        }

        if (data.hasOwnProperty('ttl')) {
          obj['ttl'] = _ApiClient["default"].convertToType(data['ttl'], 'String');
        }

        if (data.hasOwnProperty('user_identifier')) {
          obj['user_identifier'] = _ApiClient["default"].convertToType(data['user_identifier'], 'String');
        }
      }

      return obj;
    }
    /**
     * Validates the JSON data with respect to <code>SraSessionEntryOut</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SraSessionEntryOut</code>.
     */

  }, {
    key: "validateJSON",
    value: function validateJSON(data) {
      // ensure the json data is a string
      if (data['access_id'] && !(typeof data['access_id'] === 'string' || data['access_id'] instanceof String)) {
        throw new Error("Expected the field `access_id` to be a primitive type in the JSON string but got " + data['access_id']);
      } // ensure the json data is a string


      if (data['client_type'] && !(typeof data['client_type'] === 'string' || data['client_type'] instanceof String)) {
        throw new Error("Expected the field `client_type` to be a primitive type in the JSON string but got " + data['client_type']);
      } // ensure the json data is a string


      if (data['connection_type'] && !(typeof data['connection_type'] === 'string' || data['connection_type'] instanceof String)) {
        throw new Error("Expected the field `connection_type` to be a primitive type in the JSON string but got " + data['connection_type']);
      } // ensure the json data is a string


      if (data['error_msg'] && !(typeof data['error_msg'] === 'string' || data['error_msg'] instanceof String)) {
        throw new Error("Expected the field `error_msg` to be a primitive type in the JSON string but got " + data['error_msg']);
      } // validate the optional field `gateway_info`


      if (data['gateway_info']) {
        // data not null
        _GatewayNameInfo["default"].validateJSON(data['gateway_info']);
      } // ensure the json data is a string


      if (data['instance_id'] && !(typeof data['instance_id'] === 'string' || data['instance_id'] instanceof String)) {
        throw new Error("Expected the field `instance_id` to be a primitive type in the JSON string but got " + data['instance_id']);
      } // ensure the json data is a string


      if (data['secret_name'] && !(typeof data['secret_name'] === 'string' || data['secret_name'] instanceof String)) {
        throw new Error("Expected the field `secret_name` to be a primitive type in the JSON string but got " + data['secret_name']);
      } // ensure the json data is a string


      if (data['session_id'] && !(typeof data['session_id'] === 'string' || data['session_id'] instanceof String)) {
        throw new Error("Expected the field `session_id` to be a primitive type in the JSON string but got " + data['session_id']);
      } // ensure the json data is a string


      if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
        throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
      } // ensure the json data is a string


      if (data['target_host'] && !(typeof data['target_host'] === 'string' || data['target_host'] instanceof String)) {
        throw new Error("Expected the field `target_host` to be a primitive type in the JSON string but got " + data['target_host']);
      } // ensure the json data is a string


      if (data['ttl'] && !(typeof data['ttl'] === 'string' || data['ttl'] instanceof String)) {
        throw new Error("Expected the field `ttl` to be a primitive type in the JSON string but got " + data['ttl']);
      } // ensure the json data is a string


      if (data['user_identifier'] && !(typeof data['user_identifier'] === 'string' || data['user_identifier'] instanceof String)) {
        throw new Error("Expected the field `user_identifier` to be a primitive type in the JSON string but got " + data['user_identifier']);
      }

      return true;
    }
  }]);

  return SraSessionEntryOut;
}();
/**
 * @member {String} access_id
 */


SraSessionEntryOut.prototype['access_id'] = undefined;
/**
 * @member {String} client_type
 */

SraSessionEntryOut.prototype['client_type'] = undefined;
/**
 * @member {Number} cluster_unique_id
 */

SraSessionEntryOut.prototype['cluster_unique_id'] = undefined;
/**
 * @member {String} connection_type
 */

SraSessionEntryOut.prototype['connection_type'] = undefined;
/**
 * @member {Date} end_time
 */

SraSessionEntryOut.prototype['end_time'] = undefined;
/**
 * @member {String} error_msg
 */

SraSessionEntryOut.prototype['error_msg'] = undefined;
/**
 * @member {module:model/GatewayNameInfo} gateway_info
 */

SraSessionEntryOut.prototype['gateway_info'] = undefined;
/**
 * @member {String} instance_id
 */

SraSessionEntryOut.prototype['instance_id'] = undefined;
/**
 * @member {String} secret_name
 */

SraSessionEntryOut.prototype['secret_name'] = undefined;
/**
 * @member {String} session_id
 */

SraSessionEntryOut.prototype['session_id'] = undefined;
/**
 * @member {Date} start_time
 */

SraSessionEntryOut.prototype['start_time'] = undefined;
/**
 * @member {String} status
 */

SraSessionEntryOut.prototype['status'] = undefined;
/**
 * @member {String} target_host
 */

SraSessionEntryOut.prototype['target_host'] = undefined;
/**
 * @member {String} ttl
 */

SraSessionEntryOut.prototype['ttl'] = undefined;
/**
 * @member {String} user_identifier
 */

SraSessionEntryOut.prototype['user_identifier'] = undefined;
var _default = SraSessionEntryOut;
exports["default"] = _default;