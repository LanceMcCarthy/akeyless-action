"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ApiClient = _interopRequireDefault(require("../ApiClient"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * The CreateDFCKey model module.
 * @module model/CreateDFCKey
 * @version 4.2.0
 */
var CreateDFCKey = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>CreateDFCKey</code>.
   * @alias module:model/CreateDFCKey
   * @param alg {String} DFCKey type; options: [AES128GCM, AES256GCM, AES128SIV, AES256SIV, AES128CBC, AES256CBC, RSA1024, RSA2048, RSA3072, RSA4096]
   * @param name {String} DFCKey name
   */
  function CreateDFCKey(alg, name) {
    _classCallCheck(this, CreateDFCKey);

    CreateDFCKey.initialize(this, alg, name);
  }
  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */


  _createClass(CreateDFCKey, null, [{
    key: "initialize",
    value: function initialize(obj, alg, name) {
      obj['alg'] = alg;
      obj['name'] = name;
    }
    /**
     * Constructs a <code>CreateDFCKey</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateDFCKey} obj Optional instance to populate.
     * @return {module:model/CreateDFCKey} The populated <code>CreateDFCKey</code> instance.
     */

  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new CreateDFCKey();

        if (data.hasOwnProperty('alg')) {
          obj['alg'] = _ApiClient["default"].convertToType(data['alg'], 'String');
        }

        if (data.hasOwnProperty('certificate-common-name')) {
          obj['certificate-common-name'] = _ApiClient["default"].convertToType(data['certificate-common-name'], 'String');
        }

        if (data.hasOwnProperty('certificate-country')) {
          obj['certificate-country'] = _ApiClient["default"].convertToType(data['certificate-country'], 'String');
        }

        if (data.hasOwnProperty('certificate-digest-algo')) {
          obj['certificate-digest-algo'] = _ApiClient["default"].convertToType(data['certificate-digest-algo'], 'String');
        }

        if (data.hasOwnProperty('certificate-locality')) {
          obj['certificate-locality'] = _ApiClient["default"].convertToType(data['certificate-locality'], 'String');
        }

        if (data.hasOwnProperty('certificate-organization')) {
          obj['certificate-organization'] = _ApiClient["default"].convertToType(data['certificate-organization'], 'String');
        }

        if (data.hasOwnProperty('certificate-province')) {
          obj['certificate-province'] = _ApiClient["default"].convertToType(data['certificate-province'], 'String');
        }

        if (data.hasOwnProperty('certificate-ttl')) {
          obj['certificate-ttl'] = _ApiClient["default"].convertToType(data['certificate-ttl'], 'Number');
        }

        if (data.hasOwnProperty('conf-file-data')) {
          obj['conf-file-data'] = _ApiClient["default"].convertToType(data['conf-file-data'], 'String');
        }

        if (data.hasOwnProperty('customer-frg-id')) {
          obj['customer-frg-id'] = _ApiClient["default"].convertToType(data['customer-frg-id'], 'String');
        }

        if (data.hasOwnProperty('delete_protection')) {
          obj['delete_protection'] = _ApiClient["default"].convertToType(data['delete_protection'], 'String');
        }

        if (data.hasOwnProperty('description')) {
          obj['description'] = _ApiClient["default"].convertToType(data['description'], 'String');
        }

        if (data.hasOwnProperty('generate-self-signed-certificate')) {
          obj['generate-self-signed-certificate'] = _ApiClient["default"].convertToType(data['generate-self-signed-certificate'], 'Boolean');
        }

        if (data.hasOwnProperty('json')) {
          obj['json'] = _ApiClient["default"].convertToType(data['json'], 'Boolean');
        }

        if (data.hasOwnProperty('metadata')) {
          obj['metadata'] = _ApiClient["default"].convertToType(data['metadata'], 'String');
        }

        if (data.hasOwnProperty('name')) {
          obj['name'] = _ApiClient["default"].convertToType(data['name'], 'String');
        }

        if (data.hasOwnProperty('split-level')) {
          obj['split-level'] = _ApiClient["default"].convertToType(data['split-level'], 'Number');
        }

        if (data.hasOwnProperty('tag')) {
          obj['tag'] = _ApiClient["default"].convertToType(data['tag'], ['String']);
        }

        if (data.hasOwnProperty('token')) {
          obj['token'] = _ApiClient["default"].convertToType(data['token'], 'String');
        }

        if (data.hasOwnProperty('uid-token')) {
          obj['uid-token'] = _ApiClient["default"].convertToType(data['uid-token'], 'String');
        }
      }

      return obj;
    }
  }]);

  return CreateDFCKey;
}();
/**
 * DFCKey type; options: [AES128GCM, AES256GCM, AES128SIV, AES256SIV, AES128CBC, AES256CBC, RSA1024, RSA2048, RSA3072, RSA4096]
 * @member {String} alg
 */


CreateDFCKey.prototype['alg'] = undefined;
/**
 * Common name for the generated certificate. Relevant only for generate-self-signed-certificate.
 * @member {String} certificate-common-name
 */

CreateDFCKey.prototype['certificate-common-name'] = undefined;
/**
 * Country name for the generated certificate. Relevant only for generate-self-signed-certificate.
 * @member {String} certificate-country
 */

CreateDFCKey.prototype['certificate-country'] = undefined;
/**
 * Digest algorithm to be used for the certificate key signing. Currently, we support only \"sha256\" so we hide this option for CLI.
 * @member {String} certificate-digest-algo
 */

CreateDFCKey.prototype['certificate-digest-algo'] = undefined;
/**
 * Locality for the generated certificate. Relevant only for generate-self-signed-certificate.
 * @member {String} certificate-locality
 */

CreateDFCKey.prototype['certificate-locality'] = undefined;
/**
 * Organization name for the generated certificate. Relevant only for generate-self-signed-certificate.
 * @member {String} certificate-organization
 */

CreateDFCKey.prototype['certificate-organization'] = undefined;
/**
 * Province name for the generated certificate. Relevant only for generate-self-signed-certificate.
 * @member {String} certificate-province
 */

CreateDFCKey.prototype['certificate-province'] = undefined;
/**
 * TTL in days for the generated certificate. Required only for generate-self-signed-certificate.
 * @member {Number} certificate-ttl
 */

CreateDFCKey.prototype['certificate-ttl'] = undefined;
/**
 * The csr config data in base64 encoding
 * @member {String} conf-file-data
 */

CreateDFCKey.prototype['conf-file-data'] = undefined;
/**
 * The customer fragment ID that will be used to create the DFC key (if empty, the key will be created independently of a customer fragment)
 * @member {String} customer-frg-id
 */

CreateDFCKey.prototype['customer-frg-id'] = undefined;
/**
 * Protection from accidental deletion of this item [true/false]
 * @member {String} delete_protection
 */

CreateDFCKey.prototype['delete_protection'] = undefined;
/**
 * Description of the object
 * @member {String} description
 */

CreateDFCKey.prototype['description'] = undefined;
/**
 * Whether to generate a self signed certificate with the key. If set, --certificate-ttl must be provided.
 * @member {Boolean} generate-self-signed-certificate
 */

CreateDFCKey.prototype['generate-self-signed-certificate'] = undefined;
/**
 * Set output format to JSON
 * @member {Boolean} json
 * @default false
 */

CreateDFCKey.prototype['json'] = false;
/**
 * Deprecated - use description
 * @member {String} metadata
 */

CreateDFCKey.prototype['metadata'] = undefined;
/**
 * DFCKey name
 * @member {String} name
 */

CreateDFCKey.prototype['name'] = undefined;
/**
 * The number of fragments that the item will be split into (not includes customer fragment)
 * @member {Number} split-level
 * @default 3
 */

CreateDFCKey.prototype['split-level'] = 3;
/**
 * List of the tags attached to this DFC key
 * @member {Array.<String>} tag
 */

CreateDFCKey.prototype['tag'] = undefined;
/**
 * Authentication token (see `/auth` and `/configure`)
 * @member {String} token
 */

CreateDFCKey.prototype['token'] = undefined;
/**
 * The universal identity token, Required only for universal_identity authentication
 * @member {String} uid-token
 */

CreateDFCKey.prototype['uid-token'] = undefined;
var _default = CreateDFCKey;
exports["default"] = _default;