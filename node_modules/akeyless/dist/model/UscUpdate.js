"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ApiClient = _interopRequireDefault(require("../ApiClient"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * The UscUpdate model module.
 * @module model/UscUpdate
 * @version 4.2.0
 */
var UscUpdate = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>UscUpdate</code>.
   * uscUpdate is a command that updates a secret in a Universal Secrets Connector
   * @alias module:model/UscUpdate
   * @param secretId {String} The universal secrets id (or name, for AWS, Azure, K8s or Hashi vault targets) to update
   * @param uscName {String} Name of the Universal Secrets Connector item
   * @param value {String} Value of the universal secrets item, either text or base64 encoded binary
   */
  function UscUpdate(secretId, uscName, value) {
    _classCallCheck(this, UscUpdate);

    UscUpdate.initialize(this, secretId, uscName, value);
  }
  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */


  _createClass(UscUpdate, null, [{
    key: "initialize",
    value: function initialize(obj, secretId, uscName, value) {
      obj['secret-id'] = secretId;
      obj['usc-name'] = uscName;
      obj['value'] = value;
    }
    /**
     * Constructs a <code>UscUpdate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UscUpdate} obj Optional instance to populate.
     * @return {module:model/UscUpdate} The populated <code>UscUpdate</code> instance.
     */

  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new UscUpdate();

        if (data.hasOwnProperty('binary-value')) {
          obj['binary-value'] = _ApiClient["default"].convertToType(data['binary-value'], 'Boolean');
        }

        if (data.hasOwnProperty('description')) {
          obj['description'] = _ApiClient["default"].convertToType(data['description'], 'String');
        }

        if (data.hasOwnProperty('json')) {
          obj['json'] = _ApiClient["default"].convertToType(data['json'], 'Boolean');
        }

        if (data.hasOwnProperty('namespace')) {
          obj['namespace'] = _ApiClient["default"].convertToType(data['namespace'], 'String');
        }

        if (data.hasOwnProperty('secret-id')) {
          obj['secret-id'] = _ApiClient["default"].convertToType(data['secret-id'], 'String');
        }

        if (data.hasOwnProperty('tags')) {
          obj['tags'] = _ApiClient["default"].convertToType(data['tags'], {
            'String': 'String'
          });
        }

        if (data.hasOwnProperty('token')) {
          obj['token'] = _ApiClient["default"].convertToType(data['token'], 'String');
        }

        if (data.hasOwnProperty('uid-token')) {
          obj['uid-token'] = _ApiClient["default"].convertToType(data['uid-token'], 'String');
        }

        if (data.hasOwnProperty('usc-name')) {
          obj['usc-name'] = _ApiClient["default"].convertToType(data['usc-name'], 'String');
        }

        if (data.hasOwnProperty('value')) {
          obj['value'] = _ApiClient["default"].convertToType(data['value'], 'String');
        }
      }

      return obj;
    }
  }]);

  return UscUpdate;
}();
/**
 * Use this option if the universal secrets value is a base64 encoded binary
 * @member {Boolean} binary-value
 */


UscUpdate.prototype['binary-value'] = undefined;
/**
 * Description of the universal secrets
 * @member {String} description
 */

UscUpdate.prototype['description'] = undefined;
/**
 * Set output format to JSON
 * @member {Boolean} json
 * @default false
 */

UscUpdate.prototype['json'] = false;
/**
 * The namespace (relevant for Hashi vault target)
 * @member {String} namespace
 */

UscUpdate.prototype['namespace'] = undefined;
/**
 * The universal secrets id (or name, for AWS, Azure, K8s or Hashi vault targets) to update
 * @member {String} secret-id
 */

UscUpdate.prototype['secret-id'] = undefined;
/**
 * Tags for the universal secrets
 * @member {Object.<String, String>} tags
 */

UscUpdate.prototype['tags'] = undefined;
/**
 * Authentication token (see `/auth` and `/configure`)
 * @member {String} token
 */

UscUpdate.prototype['token'] = undefined;
/**
 * The universal identity token, Required only for universal_identity authentication
 * @member {String} uid-token
 */

UscUpdate.prototype['uid-token'] = undefined;
/**
 * Name of the Universal Secrets Connector item
 * @member {String} usc-name
 */

UscUpdate.prototype['usc-name'] = undefined;
/**
 * Value of the universal secrets item, either text or base64 encoded binary
 * @member {String} value
 */

UscUpdate.prototype['value'] = undefined;
var _default = UscUpdate;
exports["default"] = _default;