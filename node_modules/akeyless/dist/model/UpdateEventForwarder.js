"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ApiClient = _interopRequireDefault(require("../ApiClient"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * The UpdateEventForwarder model module.
 * @module model/UpdateEventForwarder
 * @version 4.2.2
 */
var UpdateEventForwarder = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>UpdateEventForwarder</code>.
   * updateEventForwarder is a command that updates an event forwarder [Deprecated - please use event-forwarder-update-* command]
   * @alias module:model/UpdateEventForwarder
   * @param name {String} EventForwarder name
   */
  function UpdateEventForwarder(name) {
    _classCallCheck(this, UpdateEventForwarder);

    UpdateEventForwarder.initialize(this, name);
  }
  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */


  _createClass(UpdateEventForwarder, null, [{
    key: "initialize",
    value: function initialize(obj, name) {
      obj['name'] = name;
    }
    /**
     * Constructs a <code>UpdateEventForwarder</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateEventForwarder} obj Optional instance to populate.
     * @return {module:model/UpdateEventForwarder} The populated <code>UpdateEventForwarder</code> instance.
     */

  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new UpdateEventForwarder();

        if (data.hasOwnProperty('admin-name')) {
          obj['admin-name'] = _ApiClient["default"].convertToType(data['admin-name'], 'String');
        }

        if (data.hasOwnProperty('auth-type')) {
          obj['auth-type'] = _ApiClient["default"].convertToType(data['auth-type'], 'String');
        }

        if (data.hasOwnProperty('client-id')) {
          obj['client-id'] = _ApiClient["default"].convertToType(data['client-id'], 'String');
        }

        if (data.hasOwnProperty('description')) {
          obj['description'] = _ApiClient["default"].convertToType(data['description'], 'String');
        }

        if (data.hasOwnProperty('email-to')) {
          obj['email-to'] = _ApiClient["default"].convertToType(data['email-to'], 'String');
        }

        if (data.hasOwnProperty('enable')) {
          obj['enable'] = _ApiClient["default"].convertToType(data['enable'], 'String');
        }

        if (data.hasOwnProperty('event-source-locations')) {
          obj['event-source-locations'] = _ApiClient["default"].convertToType(data['event-source-locations'], ['String']);
        }

        if (data.hasOwnProperty('event-types')) {
          obj['event-types'] = _ApiClient["default"].convertToType(data['event-types'], ['String']);
        }

        if (data.hasOwnProperty('host')) {
          obj['host'] = _ApiClient["default"].convertToType(data['host'], 'String');
        }

        if (data.hasOwnProperty('json')) {
          obj['json'] = _ApiClient["default"].convertToType(data['json'], 'Boolean');
        }

        if (data.hasOwnProperty('name')) {
          obj['name'] = _ApiClient["default"].convertToType(data['name'], 'String');
        }

        if (data.hasOwnProperty('new-comment')) {
          obj['new-comment'] = _ApiClient["default"].convertToType(data['new-comment'], 'String');
        }

        if (data.hasOwnProperty('new-name')) {
          obj['new-name'] = _ApiClient["default"].convertToType(data['new-name'], 'String');
        }

        if (data.hasOwnProperty('token')) {
          obj['token'] = _ApiClient["default"].convertToType(data['token'], 'String');
        }

        if (data.hasOwnProperty('uid-token')) {
          obj['uid-token'] = _ApiClient["default"].convertToType(data['uid-token'], 'String');
        }

        if (data.hasOwnProperty('user-email')) {
          obj['user-email'] = _ApiClient["default"].convertToType(data['user-email'], 'String');
        }
      }

      return obj;
    }
  }]);

  return UpdateEventForwarder;
}();
/**
 * Workstation Admin Name
 * @member {String} admin-name
 */


UpdateEventForwarder.prototype['admin-name'] = undefined;
/**
 * The authentication type to use when connecting to ServiceNow (user-pass / jwt)
 * @member {String} auth-type
 * @default 'user-pass'
 */

UpdateEventForwarder.prototype['auth-type'] = 'user-pass';
/**
 * The client ID to use when connecting to ServiceNow with jwt authentication
 * @member {String} client-id
 */

UpdateEventForwarder.prototype['client-id'] = undefined;
/**
 * Description of the object
 * @member {String} description
 * @default 'default_comment'
 */

UpdateEventForwarder.prototype['description'] = 'default_comment';
/**
 * A comma seperated list of email addresses to send event to (relevant only for \"email\" Event Forwarder)
 * @member {String} email-to
 */

UpdateEventForwarder.prototype['email-to'] = undefined;
/**
 * Enable/Disable Event Forwarder [true/false]
 * @member {String} enable
 * @default 'true'
 */

UpdateEventForwarder.prototype['enable'] = 'true';
/**
 * Event sources
 * @member {Array.<String>} event-source-locations
 */

UpdateEventForwarder.prototype['event-source-locations'] = undefined;
/**
 * Event types
 * @member {Array.<String>} event-types
 */

UpdateEventForwarder.prototype['event-types'] = undefined;
/**
 * Workstation Host
 * @member {String} host
 */

UpdateEventForwarder.prototype['host'] = undefined;
/**
 * Set output format to JSON
 * @member {Boolean} json
 * @default false
 */

UpdateEventForwarder.prototype['json'] = false;
/**
 * EventForwarder name
 * @member {String} name
 */

UpdateEventForwarder.prototype['name'] = undefined;
/**
 * Deprecated - use description
 * @member {String} new-comment
 * @default 'default_comment'
 */

UpdateEventForwarder.prototype['new-comment'] = 'default_comment';
/**
 * New EventForwarder name
 * @member {String} new-name
 */

UpdateEventForwarder.prototype['new-name'] = undefined;
/**
 * Authentication token (see `/auth` and `/configure`)
 * @member {String} token
 */

UpdateEventForwarder.prototype['token'] = undefined;
/**
 * The universal identity token, Required only for universal_identity authentication
 * @member {String} uid-token
 */

UpdateEventForwarder.prototype['uid-token'] = undefined;
/**
 * The user email to use when connecting to ServiceNow with jwt authentication
 * @member {String} user-email
 */

UpdateEventForwarder.prototype['user-email'] = undefined;
var _default = UpdateEventForwarder;
exports["default"] = _default;