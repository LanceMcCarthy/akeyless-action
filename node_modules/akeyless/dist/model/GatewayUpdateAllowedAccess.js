"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ApiClient = _interopRequireDefault(require("../ApiClient"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * The GatewayUpdateAllowedAccess model module.
 * @module model/GatewayUpdateAllowedAccess
 * @version 3.3.15
 */
var GatewayUpdateAllowedAccess = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>GatewayUpdateAllowedAccess</code>.
   * gatewayUpdateAllowedAccess is a command that update allowed access in Gator
   * @alias module:model/GatewayUpdateAllowedAccess
   * @param accessId {String} Access ID The access id to be attached to this allowed access. Auth method with this access id should already exist.
   * @param name {String} Allowed access name
   */
  function GatewayUpdateAllowedAccess(accessId, name) {
    _classCallCheck(this, GatewayUpdateAllowedAccess);

    GatewayUpdateAllowedAccess.initialize(this, accessId, name);
  }
  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */


  _createClass(GatewayUpdateAllowedAccess, null, [{
    key: "initialize",
    value: function initialize(obj, accessId, name) {
      obj['access-id'] = accessId;
      obj['name'] = name;
    }
    /**
     * Constructs a <code>GatewayUpdateAllowedAccess</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GatewayUpdateAllowedAccess} obj Optional instance to populate.
     * @return {module:model/GatewayUpdateAllowedAccess} The populated <code>GatewayUpdateAllowedAccess</code> instance.
     */

  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new GatewayUpdateAllowedAccess();

        if (data.hasOwnProperty('access-id')) {
          obj['access-id'] = _ApiClient["default"].convertToType(data['access-id'], 'String');
        }

        if (data.hasOwnProperty('description')) {
          obj['description'] = _ApiClient["default"].convertToType(data['description'], 'String');
        }

        if (data.hasOwnProperty('json')) {
          obj['json'] = _ApiClient["default"].convertToType(data['json'], 'Boolean');
        }

        if (data.hasOwnProperty('name')) {
          obj['name'] = _ApiClient["default"].convertToType(data['name'], 'String');
        }

        if (data.hasOwnProperty('new-name')) {
          obj['new-name'] = _ApiClient["default"].convertToType(data['new-name'], 'String');
        }

        if (data.hasOwnProperty('permissions')) {
          obj['permissions'] = _ApiClient["default"].convertToType(data['permissions'], 'String');
        }

        if (data.hasOwnProperty('sub-claims')) {
          obj['sub-claims'] = _ApiClient["default"].convertToType(data['sub-claims'], {
            'String': 'String'
          });
        }

        if (data.hasOwnProperty('token')) {
          obj['token'] = _ApiClient["default"].convertToType(data['token'], 'String');
        }

        if (data.hasOwnProperty('uid-token')) {
          obj['uid-token'] = _ApiClient["default"].convertToType(data['uid-token'], 'String');
        }
      }

      return obj;
    }
  }]);

  return GatewayUpdateAllowedAccess;
}();
/**
 * Access ID The access id to be attached to this allowed access. Auth method with this access id should already exist.
 * @member {String} access-id
 */


GatewayUpdateAllowedAccess.prototype['access-id'] = undefined;
/**
 * Allowed access description
 * @member {String} description
 */

GatewayUpdateAllowedAccess.prototype['description'] = undefined;
/**
 * Set output format to JSON
 * @member {Boolean} json
 * @default false
 */

GatewayUpdateAllowedAccess.prototype['json'] = false;
/**
 * Allowed access name
 * @member {String} name
 */

GatewayUpdateAllowedAccess.prototype['name'] = undefined;
/**
 * New allowed access name
 * @member {String} new-name
 */

GatewayUpdateAllowedAccess.prototype['new-name'] = undefined;
/**
 * Permissions  Comma-seperated list of permissions for this allowed access. Available permissions: [defaults,targets,classic_keys,automatic_migration,ldap_auth,dynamic_secret,k8s_auth,log_forwarding,zero_knowledge_encryption,rotated_secret,caching,event_forwarding,admin,kmip,general]
 * @member {String} permissions
 */

GatewayUpdateAllowedAccess.prototype['permissions'] = undefined;
/**
 * Sub claims key/val of sub claims, e.g group=admins,developers
 * @member {Object.<String, String>} sub-claims
 */

GatewayUpdateAllowedAccess.prototype['sub-claims'] = undefined;
/**
 * Authentication token (see `/auth` and `/configure`)
 * @member {String} token
 */

GatewayUpdateAllowedAccess.prototype['token'] = undefined;
/**
 * The universal identity token, Required only for universal_identity authentication
 * @member {String} uid-token
 */

GatewayUpdateAllowedAccess.prototype['uid-token'] = undefined;
var _default = GatewayUpdateAllowedAccess;
exports["default"] = _default;