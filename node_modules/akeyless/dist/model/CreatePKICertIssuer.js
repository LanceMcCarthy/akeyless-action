"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ApiClient = _interopRequireDefault(require("../ApiClient"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * The CreatePKICertIssuer model module.
 * @module model/CreatePKICertIssuer
 * @version 4.3.0
 */
var CreatePKICertIssuer = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>CreatePKICertIssuer</code>.
   * @alias module:model/CreatePKICertIssuer
   * @param name {String} PKI certificate issuer name
   * @param signerKeyName {String} A key to sign the certificate with, required in Private CA mode
   * @param ttl {String} The maximum requested Time To Live for issued certificates, in seconds. In case of Public CA, this is based on the CA target's supported maximum TTLs
   */
  function CreatePKICertIssuer(name, signerKeyName, ttl) {
    _classCallCheck(this, CreatePKICertIssuer);

    CreatePKICertIssuer.initialize(this, name, signerKeyName, ttl);
  }
  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */


  _createClass(CreatePKICertIssuer, null, [{
    key: "initialize",
    value: function initialize(obj, name, signerKeyName, ttl) {
      obj['name'] = name;
      obj['signer-key-name'] = signerKeyName;
      obj['ttl'] = ttl;
    }
    /**
     * Constructs a <code>CreatePKICertIssuer</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreatePKICertIssuer} obj Optional instance to populate.
     * @return {module:model/CreatePKICertIssuer} The populated <code>CreatePKICertIssuer</code> instance.
     */

  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new CreatePKICertIssuer();

        if (data.hasOwnProperty('allow-any-name')) {
          obj['allow-any-name'] = _ApiClient["default"].convertToType(data['allow-any-name'], 'Boolean');
        }

        if (data.hasOwnProperty('allow-copy-ext-from-csr')) {
          obj['allow-copy-ext-from-csr'] = _ApiClient["default"].convertToType(data['allow-copy-ext-from-csr'], 'Boolean');
        }

        if (data.hasOwnProperty('allow-subdomains')) {
          obj['allow-subdomains'] = _ApiClient["default"].convertToType(data['allow-subdomains'], 'Boolean');
        }

        if (data.hasOwnProperty('allowed-domains')) {
          obj['allowed-domains'] = _ApiClient["default"].convertToType(data['allowed-domains'], 'String');
        }

        if (data.hasOwnProperty('allowed-extra-extensions')) {
          obj['allowed-extra-extensions'] = _ApiClient["default"].convertToType(data['allowed-extra-extensions'], 'String');
        }

        if (data.hasOwnProperty('allowed-uri-sans')) {
          obj['allowed-uri-sans'] = _ApiClient["default"].convertToType(data['allowed-uri-sans'], 'String');
        }

        if (data.hasOwnProperty('auto-renew')) {
          obj['auto-renew'] = _ApiClient["default"].convertToType(data['auto-renew'], 'Boolean');
        }

        if (data.hasOwnProperty('ca-target')) {
          obj['ca-target'] = _ApiClient["default"].convertToType(data['ca-target'], 'String');
        }

        if (data.hasOwnProperty('client-flag')) {
          obj['client-flag'] = _ApiClient["default"].convertToType(data['client-flag'], 'Boolean');
        }

        if (data.hasOwnProperty('code-signing-flag')) {
          obj['code-signing-flag'] = _ApiClient["default"].convertToType(data['code-signing-flag'], 'Boolean');
        }

        if (data.hasOwnProperty('country')) {
          obj['country'] = _ApiClient["default"].convertToType(data['country'], 'String');
        }

        if (data.hasOwnProperty('create-private-crl')) {
          obj['create-private-crl'] = _ApiClient["default"].convertToType(data['create-private-crl'], 'Boolean');
        }

        if (data.hasOwnProperty('create-public-crl')) {
          obj['create-public-crl'] = _ApiClient["default"].convertToType(data['create-public-crl'], 'Boolean');
        }

        if (data.hasOwnProperty('critical-key-usage')) {
          obj['critical-key-usage'] = _ApiClient["default"].convertToType(data['critical-key-usage'], 'String');
        }

        if (data.hasOwnProperty('delete_protection')) {
          obj['delete_protection'] = _ApiClient["default"].convertToType(data['delete_protection'], 'String');
        }

        if (data.hasOwnProperty('description')) {
          obj['description'] = _ApiClient["default"].convertToType(data['description'], 'String');
        }

        if (data.hasOwnProperty('destination-path')) {
          obj['destination-path'] = _ApiClient["default"].convertToType(data['destination-path'], 'String');
        }

        if (data.hasOwnProperty('enable-acme')) {
          obj['enable-acme'] = _ApiClient["default"].convertToType(data['enable-acme'], 'Boolean');
        }

        if (data.hasOwnProperty('expiration-event-in')) {
          obj['expiration-event-in'] = _ApiClient["default"].convertToType(data['expiration-event-in'], ['String']);
        }

        if (data.hasOwnProperty('gw-cluster-url')) {
          obj['gw-cluster-url'] = _ApiClient["default"].convertToType(data['gw-cluster-url'], 'String');
        }

        if (data.hasOwnProperty('is-ca')) {
          obj['is-ca'] = _ApiClient["default"].convertToType(data['is-ca'], 'Boolean');
        }

        if (data.hasOwnProperty('json')) {
          obj['json'] = _ApiClient["default"].convertToType(data['json'], 'Boolean');
        }

        if (data.hasOwnProperty('key-usage')) {
          obj['key-usage'] = _ApiClient["default"].convertToType(data['key-usage'], 'String');
        }

        if (data.hasOwnProperty('locality')) {
          obj['locality'] = _ApiClient["default"].convertToType(data['locality'], 'String');
        }

        if (data.hasOwnProperty('metadata')) {
          obj['metadata'] = _ApiClient["default"].convertToType(data['metadata'], 'String');
        }

        if (data.hasOwnProperty('name')) {
          obj['name'] = _ApiClient["default"].convertToType(data['name'], 'String');
        }

        if (data.hasOwnProperty('not-enforce-hostnames')) {
          obj['not-enforce-hostnames'] = _ApiClient["default"].convertToType(data['not-enforce-hostnames'], 'Boolean');
        }

        if (data.hasOwnProperty('not-require-cn')) {
          obj['not-require-cn'] = _ApiClient["default"].convertToType(data['not-require-cn'], 'Boolean');
        }

        if (data.hasOwnProperty('organizational-units')) {
          obj['organizational-units'] = _ApiClient["default"].convertToType(data['organizational-units'], 'String');
        }

        if (data.hasOwnProperty('organizations')) {
          obj['organizations'] = _ApiClient["default"].convertToType(data['organizations'], 'String');
        }

        if (data.hasOwnProperty('postal-code')) {
          obj['postal-code'] = _ApiClient["default"].convertToType(data['postal-code'], 'String');
        }

        if (data.hasOwnProperty('protect-certificates')) {
          obj['protect-certificates'] = _ApiClient["default"].convertToType(data['protect-certificates'], 'Boolean');
        }

        if (data.hasOwnProperty('province')) {
          obj['province'] = _ApiClient["default"].convertToType(data['province'], 'String');
        }

        if (data.hasOwnProperty('scheduled-renew')) {
          obj['scheduled-renew'] = _ApiClient["default"].convertToType(data['scheduled-renew'], 'Number');
        }

        if (data.hasOwnProperty('server-flag')) {
          obj['server-flag'] = _ApiClient["default"].convertToType(data['server-flag'], 'Boolean');
        }

        if (data.hasOwnProperty('signer-key-name')) {
          obj['signer-key-name'] = _ApiClient["default"].convertToType(data['signer-key-name'], 'String');
        }

        if (data.hasOwnProperty('street-address')) {
          obj['street-address'] = _ApiClient["default"].convertToType(data['street-address'], 'String');
        }

        if (data.hasOwnProperty('tag')) {
          obj['tag'] = _ApiClient["default"].convertToType(data['tag'], ['String']);
        }

        if (data.hasOwnProperty('token')) {
          obj['token'] = _ApiClient["default"].convertToType(data['token'], 'String');
        }

        if (data.hasOwnProperty('ttl')) {
          obj['ttl'] = _ApiClient["default"].convertToType(data['ttl'], 'String');
        }

        if (data.hasOwnProperty('uid-token')) {
          obj['uid-token'] = _ApiClient["default"].convertToType(data['uid-token'], 'String');
        }
      }

      return obj;
    }
  }]);

  return CreatePKICertIssuer;
}();
/**
 * If set, clients can request certificates for any CN
 * @member {Boolean} allow-any-name
 */


CreatePKICertIssuer.prototype['allow-any-name'] = undefined;
/**
 * If set, will allow copying the extra extensions from the csr file (if given)
 * @member {Boolean} allow-copy-ext-from-csr
 */

CreatePKICertIssuer.prototype['allow-copy-ext-from-csr'] = undefined;
/**
 * If set, clients can request certificates for subdomains and wildcard subdomains of the allowed domains
 * @member {Boolean} allow-subdomains
 */

CreatePKICertIssuer.prototype['allow-subdomains'] = undefined;
/**
 * A list of the allowed domains that clients can request to be included in the certificate (in a comma-delimited list)
 * @member {String} allowed-domains
 */

CreatePKICertIssuer.prototype['allowed-domains'] = undefined;
/**
 * A json string containing the allowed extra extensions for the pki cert issuer
 * @member {String} allowed-extra-extensions
 */

CreatePKICertIssuer.prototype['allowed-extra-extensions'] = undefined;
/**
 * A list of the allowed URIs that clients can request to be included in the certificate as part of the URI Subject Alternative Names (in a comma-delimited list)
 * @member {String} allowed-uri-sans
 */

CreatePKICertIssuer.prototype['allowed-uri-sans'] = undefined;
/**
 * Automatically renew certificates before expiration
 * @member {Boolean} auto-renew
 */

CreatePKICertIssuer.prototype['auto-renew'] = undefined;
/**
 * The name of an existing CA target to attach this PKI Certificate Issuer to, required in Public CA mode
 * @member {String} ca-target
 */

CreatePKICertIssuer.prototype['ca-target'] = undefined;
/**
 * If set, certificates will be flagged for client auth use
 * @member {Boolean} client-flag
 */

CreatePKICertIssuer.prototype['client-flag'] = undefined;
/**
 * If set, certificates will be flagged for code signing use
 * @member {Boolean} code-signing-flag
 */

CreatePKICertIssuer.prototype['code-signing-flag'] = undefined;
/**
 * A comma-separated list of countries that will be set in the issued certificate
 * @member {String} country
 */

CreatePKICertIssuer.prototype['country'] = undefined;
/**
 * Set this to allow the issuer will expose a CRL endpoint in the Gateway
 * @member {Boolean} create-private-crl
 */

CreatePKICertIssuer.prototype['create-private-crl'] = undefined;
/**
 * Set this to allow the cert issuer will expose a public CRL endpoint
 * @member {Boolean} create-public-crl
 */

CreatePKICertIssuer.prototype['create-public-crl'] = undefined;
/**
 * Mark key usage as critical [true/false]
 * @member {String} critical-key-usage
 * @default 'true'
 */

CreatePKICertIssuer.prototype['critical-key-usage'] = 'true';
/**
 * Protection from accidental deletion of this object [true/false]
 * @member {String} delete_protection
 */

CreatePKICertIssuer.prototype['delete_protection'] = undefined;
/**
 * Description of the object
 * @member {String} description
 */

CreatePKICertIssuer.prototype['description'] = undefined;
/**
 * A path in which to save generated certificates
 * @member {String} destination-path
 */

CreatePKICertIssuer.prototype['destination-path'] = undefined;
/**
 * If set, the cert issuer will support the acme protocol
 * @member {Boolean} enable-acme
 */

CreatePKICertIssuer.prototype['enable-acme'] = undefined;
/**
 * How many days before the expiration of the certificate would you like to be notified.
 * @member {Array.<String>} expiration-event-in
 */

CreatePKICertIssuer.prototype['expiration-event-in'] = undefined;
/**
 * The GW cluster URL to issue the certificate from. Required in Public CA mode, to allow CRLs on private CA, or to enable ACME
 * @member {String} gw-cluster-url
 */

CreatePKICertIssuer.prototype['gw-cluster-url'] = undefined;
/**
 * If set, the basic constraints extension will be added to certificate
 * @member {Boolean} is-ca
 */

CreatePKICertIssuer.prototype['is-ca'] = undefined;
/**
 * Set output format to JSON
 * @member {Boolean} json
 * @default false
 */

CreatePKICertIssuer.prototype['json'] = false;
/**
 * key-usage
 * @member {String} key-usage
 * @default 'DigitalSignature,KeyAgreement,KeyEncipherment'
 */

CreatePKICertIssuer.prototype['key-usage'] = 'DigitalSignature,KeyAgreement,KeyEncipherment';
/**
 * A comma-separated list of localities that will be set in the issued certificate
 * @member {String} locality
 */

CreatePKICertIssuer.prototype['locality'] = undefined;
/**
 * Deprecated - use description
 * @member {String} metadata
 */

CreatePKICertIssuer.prototype['metadata'] = undefined;
/**
 * PKI certificate issuer name
 * @member {String} name
 */

CreatePKICertIssuer.prototype['name'] = undefined;
/**
 * If set, any names are allowed for CN and SANs in the certificate and not only a valid host name
 * @member {Boolean} not-enforce-hostnames
 */

CreatePKICertIssuer.prototype['not-enforce-hostnames'] = undefined;
/**
 * If set, clients can request certificates without a CN
 * @member {Boolean} not-require-cn
 */

CreatePKICertIssuer.prototype['not-require-cn'] = undefined;
/**
 * A comma-separated list of organizational units (OU) that will be set in the issued certificate
 * @member {String} organizational-units
 */

CreatePKICertIssuer.prototype['organizational-units'] = undefined;
/**
 * A comma-separated list of organizations (O) that will be set in the issued certificate
 * @member {String} organizations
 */

CreatePKICertIssuer.prototype['organizations'] = undefined;
/**
 * A comma-separated list of postal codes that will be set in the issued certificate
 * @member {String} postal-code
 */

CreatePKICertIssuer.prototype['postal-code'] = undefined;
/**
 * Whether to protect generated certificates from deletion
 * @member {Boolean} protect-certificates
 */

CreatePKICertIssuer.prototype['protect-certificates'] = undefined;
/**
 * A comma-separated list of provinces that will be set in the issued certificate
 * @member {String} province
 */

CreatePKICertIssuer.prototype['province'] = undefined;
/**
 * Number of days before expiration to renew certificates
 * @member {Number} scheduled-renew
 */

CreatePKICertIssuer.prototype['scheduled-renew'] = undefined;
/**
 * If set, certificates will be flagged for server auth use
 * @member {Boolean} server-flag
 */

CreatePKICertIssuer.prototype['server-flag'] = undefined;
/**
 * A key to sign the certificate with, required in Private CA mode
 * @member {String} signer-key-name
 * @default 'dummy_signer_key'
 */

CreatePKICertIssuer.prototype['signer-key-name'] = 'dummy_signer_key';
/**
 * A comma-separated list of street addresses that will be set in the issued certificate
 * @member {String} street-address
 */

CreatePKICertIssuer.prototype['street-address'] = undefined;
/**
 * List of the tags attached to this key
 * @member {Array.<String>} tag
 */

CreatePKICertIssuer.prototype['tag'] = undefined;
/**
 * Authentication token (see `/auth` and `/configure`)
 * @member {String} token
 */

CreatePKICertIssuer.prototype['token'] = undefined;
/**
 * The maximum requested Time To Live for issued certificates, in seconds. In case of Public CA, this is based on the CA target's supported maximum TTLs
 * @member {String} ttl
 */

CreatePKICertIssuer.prototype['ttl'] = undefined;
/**
 * The universal identity token, Required only for universal_identity authentication
 * @member {String} uid-token
 */

CreatePKICertIssuer.prototype['uid-token'] = undefined;
var _default = CreatePKICertIssuer;
exports["default"] = _default;