"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ApiClient = _interopRequireDefault(require("../ApiClient"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * The RegexpTokenizerInfo model module.
 * @module model/RegexpTokenizerInfo
 * @version 3.6.1
 */
var RegexpTokenizerInfo = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>RegexpTokenizerInfo</code>.
   * RegexpTokenizerInfo represents a general Regexp tokenization template
   * @alias module:model/RegexpTokenizerInfo
   */
  function RegexpTokenizerInfo() {
    _classCallCheck(this, RegexpTokenizerInfo);

    RegexpTokenizerInfo.initialize(this);
  }
  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */


  _createClass(RegexpTokenizerInfo, null, [{
    key: "initialize",
    value: function initialize(obj) {}
    /**
     * Constructs a <code>RegexpTokenizerInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RegexpTokenizerInfo} obj Optional instance to populate.
     * @return {module:model/RegexpTokenizerInfo} The populated <code>RegexpTokenizerInfo</code> instance.
     */

  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new RegexpTokenizerInfo();

        if (data.hasOwnProperty('alphabet')) {
          obj['alphabet'] = _ApiClient["default"].convertToType(data['alphabet'], 'String');
        }

        if (data.hasOwnProperty('decoding_template')) {
          obj['decoding_template'] = _ApiClient["default"].convertToType(data['decoding_template'], 'String');
        }

        if (data.hasOwnProperty('encoding_template')) {
          obj['encoding_template'] = _ApiClient["default"].convertToType(data['encoding_template'], 'String');
        }

        if (data.hasOwnProperty('pattern')) {
          obj['pattern'] = _ApiClient["default"].convertToType(data['pattern'], 'String');
        }
      }

      return obj;
    }
  }]);

  return RegexpTokenizerInfo;
}();
/**
 * The Alphabet used for the tokenization
 * @member {String} alphabet
 */


RegexpTokenizerInfo.prototype['alphabet'] = undefined;
/**
 * Transformation to perform on the decrypted data
 * @member {String} decoding_template
 */

RegexpTokenizerInfo.prototype['decoding_template'] = undefined;
/**
 * Transformation to perform on the encrypted data, if the required output template doesn't match the input string The output Should still be valid for the Pattern, otherwise the secret would be able to be decrypted.
 * @member {String} encoding_template
 */

RegexpTokenizerInfo.prototype['encoding_template'] = undefined;
/**
 * Regexp pattern to extract and deposit the text/encdata
 * @member {String} pattern
 */

RegexpTokenizerInfo.prototype['pattern'] = undefined;
var _default = RegexpTokenizerInfo;
exports["default"] = _default;