"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ApiClient = _interopRequireDefault(require("../ApiClient"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * The VerifyPKCS1 model module.
 * @module model/VerifyPKCS1
 * @version 4.2.2
 */
var VerifyPKCS1 = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>VerifyPKCS1</code>.
   * @alias module:model/VerifyPKCS1
   * @param keyName {String} The name of the RSA key to use in the verification process
   * @param message {String} The message to be verified
   * @param signature {String} The message's signature
   */
  function VerifyPKCS1(keyName, message, signature) {
    _classCallCheck(this, VerifyPKCS1);

    VerifyPKCS1.initialize(this, keyName, message, signature);
  }
  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */


  _createClass(VerifyPKCS1, null, [{
    key: "initialize",
    value: function initialize(obj, keyName, message, signature) {
      obj['key-name'] = keyName;
      obj['message'] = message;
      obj['signature'] = signature;
    }
    /**
     * Constructs a <code>VerifyPKCS1</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VerifyPKCS1} obj Optional instance to populate.
     * @return {module:model/VerifyPKCS1} The populated <code>VerifyPKCS1</code> instance.
     */

  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new VerifyPKCS1();

        if (data.hasOwnProperty('display-id')) {
          obj['display-id'] = _ApiClient["default"].convertToType(data['display-id'], 'String');
        }

        if (data.hasOwnProperty('hash-function')) {
          obj['hash-function'] = _ApiClient["default"].convertToType(data['hash-function'], 'String');
        }

        if (data.hasOwnProperty('input-format')) {
          obj['input-format'] = _ApiClient["default"].convertToType(data['input-format'], 'String');
        }

        if (data.hasOwnProperty('item-id')) {
          obj['item-id'] = _ApiClient["default"].convertToType(data['item-id'], 'Number');
        }

        if (data.hasOwnProperty('json')) {
          obj['json'] = _ApiClient["default"].convertToType(data['json'], 'Boolean');
        }

        if (data.hasOwnProperty('key-name')) {
          obj['key-name'] = _ApiClient["default"].convertToType(data['key-name'], 'String');
        }

        if (data.hasOwnProperty('message')) {
          obj['message'] = _ApiClient["default"].convertToType(data['message'], 'String');
        }

        if (data.hasOwnProperty('prehashed')) {
          obj['prehashed'] = _ApiClient["default"].convertToType(data['prehashed'], 'Boolean');
        }

        if (data.hasOwnProperty('signature')) {
          obj['signature'] = _ApiClient["default"].convertToType(data['signature'], 'String');
        }

        if (data.hasOwnProperty('token')) {
          obj['token'] = _ApiClient["default"].convertToType(data['token'], 'String');
        }

        if (data.hasOwnProperty('uid-token')) {
          obj['uid-token'] = _ApiClient["default"].convertToType(data['uid-token'], 'String');
        }

        if (data.hasOwnProperty('version')) {
          obj['version'] = _ApiClient["default"].convertToType(data['version'], 'Number');
        }
      }

      return obj;
    }
  }]);

  return VerifyPKCS1;
}();
/**
 * The display id of the key to use in the verification process
 * @member {String} display-id
 */


VerifyPKCS1.prototype['display-id'] = undefined;
/**
 * HashFunction defines the hash function (e.g. sha-256)
 * @member {String} hash-function
 */

VerifyPKCS1.prototype['hash-function'] = undefined;
/**
 * Select default assumed format for the plaintext message. Currently supported options: [base64]
 * @member {String} input-format
 */

VerifyPKCS1.prototype['input-format'] = undefined;
/**
 * The item id of the key to use in the verification process
 * @member {Number} item-id
 */

VerifyPKCS1.prototype['item-id'] = undefined;
/**
 * Set output format to JSON
 * @member {Boolean} json
 * @default false
 */

VerifyPKCS1.prototype['json'] = false;
/**
 * The name of the RSA key to use in the verification process
 * @member {String} key-name
 */

VerifyPKCS1.prototype['key-name'] = undefined;
/**
 * The message to be verified
 * @member {String} message
 */

VerifyPKCS1.prototype['message'] = undefined;
/**
 * Markes that the message is already hashed
 * @member {Boolean} prehashed
 */

VerifyPKCS1.prototype['prehashed'] = undefined;
/**
 * The message's signature
 * @member {String} signature
 */

VerifyPKCS1.prototype['signature'] = undefined;
/**
 * Authentication token (see `/auth` and `/configure`)
 * @member {String} token
 */

VerifyPKCS1.prototype['token'] = undefined;
/**
 * The universal identity token, Required only for universal_identity authentication
 * @member {String} uid-token
 */

VerifyPKCS1.prototype['uid-token'] = undefined;
/**
 * The version of the key to use for verification
 * @member {Number} version
 */

VerifyPKCS1.prototype['version'] = undefined;
var _default = VerifyPKCS1;
exports["default"] = _default;