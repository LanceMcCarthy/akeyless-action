"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ApiClient = _interopRequireDefault(require("../ApiClient"));

var _AttributeTypeAndValue = _interopRequireDefault(require("./AttributeTypeAndValue"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * The Name model module.
 * @module model/Name
 * @version 3.4.0
 */
var Name = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>Name</code>.
   * Name represents an X.509 distinguished name. This only includes the common elements of a DN. Note that Name is only an approximation of the X.509 structure. If an accurate representation is needed, asn1.Unmarshal the raw subject or issuer as an RDNSequence.
   * @alias module:model/Name
   */
  function Name() {
    _classCallCheck(this, Name);

    Name.initialize(this);
  }
  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */


  _createClass(Name, null, [{
    key: "initialize",
    value: function initialize(obj) {}
    /**
     * Constructs a <code>Name</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Name} obj Optional instance to populate.
     * @return {module:model/Name} The populated <code>Name</code> instance.
     */

  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new Name();

        if (data.hasOwnProperty('Country')) {
          obj['Country'] = _ApiClient["default"].convertToType(data['Country'], ['String']);
        }

        if (data.hasOwnProperty('ExtraNames')) {
          obj['ExtraNames'] = _ApiClient["default"].convertToType(data['ExtraNames'], [_AttributeTypeAndValue["default"]]);
        }

        if (data.hasOwnProperty('Locality')) {
          obj['Locality'] = _ApiClient["default"].convertToType(data['Locality'], ['String']);
        }

        if (data.hasOwnProperty('Names')) {
          obj['Names'] = _ApiClient["default"].convertToType(data['Names'], [_AttributeTypeAndValue["default"]]);
        }

        if (data.hasOwnProperty('SerialNumber')) {
          obj['SerialNumber'] = _ApiClient["default"].convertToType(data['SerialNumber'], 'String');
        }

        if (data.hasOwnProperty('StreetAddress')) {
          obj['StreetAddress'] = _ApiClient["default"].convertToType(data['StreetAddress'], ['String']);
        }
      }

      return obj;
    }
  }]);

  return Name;
}();
/**
 * @member {Array.<String>} Country
 */


Name.prototype['Country'] = undefined;
/**
 * ExtraNames contains attributes to be copied, raw, into any marshaled distinguished names. Values override any attributes with the same OID. The ExtraNames field is not populated when parsing, see Names.
 * @member {Array.<module:model/AttributeTypeAndValue>} ExtraNames
 */

Name.prototype['ExtraNames'] = undefined;
/**
 * @member {Array.<String>} Locality
 */

Name.prototype['Locality'] = undefined;
/**
 * Names contains all parsed attributes. When parsing distinguished names, this can be used to extract non-standard attributes that are not parsed by this package. When marshaling to RDNSequences, the Names field is ignored, see ExtraNames.
 * @member {Array.<module:model/AttributeTypeAndValue>} Names
 */

Name.prototype['Names'] = undefined;
/**
 * @member {String} SerialNumber
 */

Name.prototype['SerialNumber'] = undefined;
/**
 * @member {Array.<String>} StreetAddress
 */

Name.prototype['StreetAddress'] = undefined;
var _default = Name;
exports["default"] = _default;