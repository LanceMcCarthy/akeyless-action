"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ApiClient = _interopRequireDefault(require("../ApiClient"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * The CreateCertificate model module.
 * @module model/CreateCertificate
 * @version 3.3.9
 */
var CreateCertificate = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>CreateCertificate</code>.
   * @alias module:model/CreateCertificate
   * @param name {String} Certificate name
   */
  function CreateCertificate(name) {
    _classCallCheck(this, CreateCertificate);

    CreateCertificate.initialize(this, name);
  }
  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */


  _createClass(CreateCertificate, null, [{
    key: "initialize",
    value: function initialize(obj, name) {
      obj['name'] = name;
    }
    /**
     * Constructs a <code>CreateCertificate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateCertificate} obj Optional instance to populate.
     * @return {module:model/CreateCertificate} The populated <code>CreateCertificate</code> instance.
     */

  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new CreateCertificate();

        if (data.hasOwnProperty('certificate-data')) {
          obj['certificate-data'] = _ApiClient["default"].convertToType(data['certificate-data'], 'String');
        }

        if (data.hasOwnProperty('delete_protection')) {
          obj['delete_protection'] = _ApiClient["default"].convertToType(data['delete_protection'], 'String');
        }

        if (data.hasOwnProperty('description')) {
          obj['description'] = _ApiClient["default"].convertToType(data['description'], 'String');
        }

        if (data.hasOwnProperty('expiration-event-in')) {
          obj['expiration-event-in'] = _ApiClient["default"].convertToType(data['expiration-event-in'], ['String']);
        }

        if (data.hasOwnProperty('format')) {
          obj['format'] = _ApiClient["default"].convertToType(data['format'], 'String');
        }

        if (data.hasOwnProperty('json')) {
          obj['json'] = _ApiClient["default"].convertToType(data['json'], 'Boolean');
        }

        if (data.hasOwnProperty('key')) {
          obj['key'] = _ApiClient["default"].convertToType(data['key'], 'String');
        }

        if (data.hasOwnProperty('key-data')) {
          obj['key-data'] = _ApiClient["default"].convertToType(data['key-data'], 'String');
        }

        if (data.hasOwnProperty('metadata')) {
          obj['metadata'] = _ApiClient["default"].convertToType(data['metadata'], 'String');
        }

        if (data.hasOwnProperty('name')) {
          obj['name'] = _ApiClient["default"].convertToType(data['name'], 'String');
        }

        if (data.hasOwnProperty('tags')) {
          obj['tags'] = _ApiClient["default"].convertToType(data['tags'], ['String']);
        }

        if (data.hasOwnProperty('token')) {
          obj['token'] = _ApiClient["default"].convertToType(data['token'], 'String');
        }

        if (data.hasOwnProperty('uid-token')) {
          obj['uid-token'] = _ApiClient["default"].convertToType(data['uid-token'], 'String');
        }
      }

      return obj;
    }
  }]);

  return CreateCertificate;
}();
/**
 * Content of the certificate in a Base64 format.
 * @member {String} certificate-data
 */


CreateCertificate.prototype['certificate-data'] = undefined;
/**
 * Protection from accidental deletion of this item [true/false]
 * @member {String} delete_protection
 */

CreateCertificate.prototype['delete_protection'] = undefined;
/**
 * Description of the object
 * @member {String} description
 */

CreateCertificate.prototype['description'] = undefined;
/**
 * How many days before the expiration of the certificate would you like to be notified.
 * @member {Array.<String>} expiration-event-in
 */

CreateCertificate.prototype['expiration-event-in'] = undefined;
/**
 * CertificateFormat of the certificate and private key, possible values: cer,crt,pem,pfx,p12. Required when passing inline certificate content with --certificate-data or --key-data, otherwise format is derived from the file extension.
 * @member {String} format
 */

CreateCertificate.prototype['format'] = undefined;
/**
 * Set output format to JSON
 * @member {Boolean} json
 * @default false
 */

CreateCertificate.prototype['json'] = false;
/**
 * The name of a key to use to encrypt the certificate's key (if empty, the account default protectionKey key will be used)
 * @member {String} key
 */

CreateCertificate.prototype['key'] = undefined;
/**
 * Content of the certificate's private key in a Base64 format.
 * @member {String} key-data
 */

CreateCertificate.prototype['key-data'] = undefined;
/**
 * Deprecated - use description
 * @member {String} metadata
 */

CreateCertificate.prototype['metadata'] = undefined;
/**
 * Certificate name
 * @member {String} name
 */

CreateCertificate.prototype['name'] = undefined;
/**
 * Add tags attached to this object
 * @member {Array.<String>} tags
 */

CreateCertificate.prototype['tags'] = undefined;
/**
 * Authentication token (see `/auth` and `/configure`)
 * @member {String} token
 */

CreateCertificate.prototype['token'] = undefined;
/**
 * The universal identity token, Required only for universal_identity authentication
 * @member {String} uid-token
 */

CreateCertificate.prototype['uid-token'] = undefined;
var _default = CreateCertificate;
exports["default"] = _default;