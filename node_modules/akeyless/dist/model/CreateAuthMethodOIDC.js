"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ApiClient = _interopRequireDefault(require("../ApiClient"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * The CreateAuthMethodOIDC model module.
 * @module model/CreateAuthMethodOIDC
 * @version 3.3.15
 */
var CreateAuthMethodOIDC = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>CreateAuthMethodOIDC</code>.
   * createAuthMethodOIDC is a command that creates a new auth method that will be available to authenticate using OIDC.
   * @alias module:model/CreateAuthMethodOIDC
   * @param name {String} Auth Method name
   * @param uniqueIdentifier {String} A unique identifier (ID) value should be configured for OIDC, OAuth2, LDAP and SAML authentication method types and is usually a value such as the email, username, or upn for example. Whenever a user logs in with a token, these authentication types issue a \"sub claim\" that contains details uniquely identifying that user. This sub claim includes a key containing the ID value that you configured, and is used to distinguish between different users from within the same organization.
   */
  function CreateAuthMethodOIDC(name, uniqueIdentifier) {
    _classCallCheck(this, CreateAuthMethodOIDC);

    CreateAuthMethodOIDC.initialize(this, name, uniqueIdentifier);
  }
  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */


  _createClass(CreateAuthMethodOIDC, null, [{
    key: "initialize",
    value: function initialize(obj, name, uniqueIdentifier) {
      obj['name'] = name;
      obj['unique-identifier'] = uniqueIdentifier;
    }
    /**
     * Constructs a <code>CreateAuthMethodOIDC</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateAuthMethodOIDC} obj Optional instance to populate.
     * @return {module:model/CreateAuthMethodOIDC} The populated <code>CreateAuthMethodOIDC</code> instance.
     */

  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new CreateAuthMethodOIDC();

        if (data.hasOwnProperty('access-expires')) {
          obj['access-expires'] = _ApiClient["default"].convertToType(data['access-expires'], 'Number');
        }

        if (data.hasOwnProperty('allowed-redirect-uri')) {
          obj['allowed-redirect-uri'] = _ApiClient["default"].convertToType(data['allowed-redirect-uri'], ['String']);
        }

        if (data.hasOwnProperty('audience')) {
          obj['audience'] = _ApiClient["default"].convertToType(data['audience'], 'String');
        }

        if (data.hasOwnProperty('bound-ips')) {
          obj['bound-ips'] = _ApiClient["default"].convertToType(data['bound-ips'], ['String']);
        }

        if (data.hasOwnProperty('client-id')) {
          obj['client-id'] = _ApiClient["default"].convertToType(data['client-id'], 'String');
        }

        if (data.hasOwnProperty('client-secret')) {
          obj['client-secret'] = _ApiClient["default"].convertToType(data['client-secret'], 'String');
        }

        if (data.hasOwnProperty('force-sub-claims')) {
          obj['force-sub-claims'] = _ApiClient["default"].convertToType(data['force-sub-claims'], 'Boolean');
        }

        if (data.hasOwnProperty('gw-bound-ips')) {
          obj['gw-bound-ips'] = _ApiClient["default"].convertToType(data['gw-bound-ips'], ['String']);
        }

        if (data.hasOwnProperty('issuer')) {
          obj['issuer'] = _ApiClient["default"].convertToType(data['issuer'], 'String');
        }

        if (data.hasOwnProperty('json')) {
          obj['json'] = _ApiClient["default"].convertToType(data['json'], 'Boolean');
        }

        if (data.hasOwnProperty('jwt-ttl')) {
          obj['jwt-ttl'] = _ApiClient["default"].convertToType(data['jwt-ttl'], 'Number');
        }

        if (data.hasOwnProperty('name')) {
          obj['name'] = _ApiClient["default"].convertToType(data['name'], 'String');
        }

        if (data.hasOwnProperty('required-scopes')) {
          obj['required-scopes'] = _ApiClient["default"].convertToType(data['required-scopes'], ['String']);
        }

        if (data.hasOwnProperty('required-scopes-prefix')) {
          obj['required-scopes-prefix'] = _ApiClient["default"].convertToType(data['required-scopes-prefix'], 'String');
        }

        if (data.hasOwnProperty('token')) {
          obj['token'] = _ApiClient["default"].convertToType(data['token'], 'String');
        }

        if (data.hasOwnProperty('uid-token')) {
          obj['uid-token'] = _ApiClient["default"].convertToType(data['uid-token'], 'String');
        }

        if (data.hasOwnProperty('unique-identifier')) {
          obj['unique-identifier'] = _ApiClient["default"].convertToType(data['unique-identifier'], 'String');
        }
      }

      return obj;
    }
  }]);

  return CreateAuthMethodOIDC;
}();
/**
 * Access expiration date in Unix timestamp (select 0 for access without expiry date)
 * @member {Number} access-expires
 * @default 0
 */


CreateAuthMethodOIDC.prototype['access-expires'] = 0;
/**
 * Allowed redirect URIs after the authentication
 * @member {Array.<String>} allowed-redirect-uri
 */

CreateAuthMethodOIDC.prototype['allowed-redirect-uri'] = undefined;
/**
 * Audience claim to be used as part of the authentication flow. In case set, it must match the one configured on the Identity Provider's Application
 * @member {String} audience
 */

CreateAuthMethodOIDC.prototype['audience'] = undefined;
/**
 * A CIDR whitelist with the IPs that the access is restricted to
 * @member {Array.<String>} bound-ips
 */

CreateAuthMethodOIDC.prototype['bound-ips'] = undefined;
/**
 * Client ID
 * @member {String} client-id
 */

CreateAuthMethodOIDC.prototype['client-id'] = undefined;
/**
 * Client Secret
 * @member {String} client-secret
 */

CreateAuthMethodOIDC.prototype['client-secret'] = undefined;
/**
 * if true: enforce role-association must include sub claims
 * @member {Boolean} force-sub-claims
 */

CreateAuthMethodOIDC.prototype['force-sub-claims'] = undefined;
/**
 * A CIDR whitelist with the GW IPs that the access is restricted to
 * @member {Array.<String>} gw-bound-ips
 */

CreateAuthMethodOIDC.prototype['gw-bound-ips'] = undefined;
/**
 * Issuer URL
 * @member {String} issuer
 */

CreateAuthMethodOIDC.prototype['issuer'] = undefined;
/**
 * Set output format to JSON
 * @member {Boolean} json
 * @default false
 */

CreateAuthMethodOIDC.prototype['json'] = false;
/**
 * Jwt TTL
 * @member {Number} jwt-ttl
 * @default 0
 */

CreateAuthMethodOIDC.prototype['jwt-ttl'] = 0;
/**
 * Auth Method name
 * @member {String} name
 */

CreateAuthMethodOIDC.prototype['name'] = undefined;
/**
 * RequiredScopes is a list of required scopes that the oidc method will request from the oidc provider and the user must approve
 * @member {Array.<String>} required-scopes
 */

CreateAuthMethodOIDC.prototype['required-scopes'] = undefined;
/**
 * RequiredScopesPrefix is a a prefix to add to all required-scopes when requesting them from the oidc server (for example, azures' Application ID URI)
 * @member {String} required-scopes-prefix
 */

CreateAuthMethodOIDC.prototype['required-scopes-prefix'] = undefined;
/**
 * Authentication token (see `/auth` and `/configure`)
 * @member {String} token
 */

CreateAuthMethodOIDC.prototype['token'] = undefined;
/**
 * The universal identity token, Required only for universal_identity authentication
 * @member {String} uid-token
 */

CreateAuthMethodOIDC.prototype['uid-token'] = undefined;
/**
 * A unique identifier (ID) value should be configured for OIDC, OAuth2, LDAP and SAML authentication method types and is usually a value such as the email, username, or upn for example. Whenever a user logs in with a token, these authentication types issue a \"sub claim\" that contains details uniquely identifying that user. This sub claim includes a key containing the ID value that you configured, and is used to distinguish between different users from within the same organization.
 * @member {String} unique-identifier
 */

CreateAuthMethodOIDC.prototype['unique-identifier'] = undefined;
var _default = CreateAuthMethodOIDC;
exports["default"] = _default;