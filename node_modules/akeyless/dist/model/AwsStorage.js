"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ApiClient = _interopRequireDefault(require("../ApiClient"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * The AwsStorage model module.
 * @module model/AwsStorage
 * @version 5.0.1
 */
var AwsStorage = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>AwsStorage</code>.
   * @alias module:model/AwsStorage
   */
  function AwsStorage() {
    _classCallCheck(this, AwsStorage);

    AwsStorage.initialize(this);
  }
  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */


  _createClass(AwsStorage, null, [{
    key: "initialize",
    value: function initialize(obj) {}
    /**
     * Constructs a <code>AwsStorage</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AwsStorage} obj Optional instance to populate.
     * @return {module:model/AwsStorage} The populated <code>AwsStorage</code> instance.
     */

  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new AwsStorage();

        if (data.hasOwnProperty('access_key_id')) {
          obj['access_key_id'] = _ApiClient["default"].convertToType(data['access_key_id'], 'String');
        }

        if (data.hasOwnProperty('access_key_secret')) {
          obj['access_key_secret'] = _ApiClient["default"].convertToType(data['access_key_secret'], 'String');
        }

        if (data.hasOwnProperty('auth_type')) {
          obj['auth_type'] = _ApiClient["default"].convertToType(data['auth_type'], 'String');
        }

        if (data.hasOwnProperty('bucket')) {
          obj['bucket'] = _ApiClient["default"].convertToType(data['bucket'], 'String');
        }

        if (data.hasOwnProperty('prefix')) {
          obj['prefix'] = _ApiClient["default"].convertToType(data['prefix'], 'String');
        }

        if (data.hasOwnProperty('region')) {
          obj['region'] = _ApiClient["default"].convertToType(data['region'], 'String');
        }
      }

      return obj;
    }
    /**
     * Validates the JSON data with respect to <code>AwsStorage</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AwsStorage</code>.
     */

  }, {
    key: "validateJSON",
    value: function validateJSON(data) {
      // ensure the json data is a string
      if (data['access_key_id'] && !(typeof data['access_key_id'] === 'string' || data['access_key_id'] instanceof String)) {
        throw new Error("Expected the field `access_key_id` to be a primitive type in the JSON string but got " + data['access_key_id']);
      } // ensure the json data is a string


      if (data['access_key_secret'] && !(typeof data['access_key_secret'] === 'string' || data['access_key_secret'] instanceof String)) {
        throw new Error("Expected the field `access_key_secret` to be a primitive type in the JSON string but got " + data['access_key_secret']);
      } // ensure the json data is a string


      if (data['auth_type'] && !(typeof data['auth_type'] === 'string' || data['auth_type'] instanceof String)) {
        throw new Error("Expected the field `auth_type` to be a primitive type in the JSON string but got " + data['auth_type']);
      } // ensure the json data is a string


      if (data['bucket'] && !(typeof data['bucket'] === 'string' || data['bucket'] instanceof String)) {
        throw new Error("Expected the field `bucket` to be a primitive type in the JSON string but got " + data['bucket']);
      } // ensure the json data is a string


      if (data['prefix'] && !(typeof data['prefix'] === 'string' || data['prefix'] instanceof String)) {
        throw new Error("Expected the field `prefix` to be a primitive type in the JSON string but got " + data['prefix']);
      } // ensure the json data is a string


      if (data['region'] && !(typeof data['region'] === 'string' || data['region'] instanceof String)) {
        throw new Error("Expected the field `region` to be a primitive type in the JSON string but got " + data['region']);
      }

      return true;
    }
  }]);

  return AwsStorage;
}();
/**
 * creds
 * @member {String} access_key_id
 */


AwsStorage.prototype['access_key_id'] = undefined;
/**
 * @member {String} access_key_secret
 */

AwsStorage.prototype['access_key_secret'] = undefined;
/**
 * @member {String} auth_type
 */

AwsStorage.prototype['auth_type'] = undefined;
/**
 * @member {String} bucket
 */

AwsStorage.prototype['bucket'] = undefined;
/**
 * @member {String} prefix
 */

AwsStorage.prototype['prefix'] = undefined;
/**
 * @member {String} region
 */

AwsStorage.prototype['region'] = undefined;
var _default = AwsStorage;
exports["default"] = _default;