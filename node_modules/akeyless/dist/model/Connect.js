"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ApiClient = _interopRequireDefault(require("../ApiClient"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * The Connect model module.
 * @module model/Connect
 * @version 5.0.3
 */
var Connect = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>Connect</code>.
   * Connect is a command that performs secure remote access
   * @alias module:model/Connect
   */
  function Connect() {
    _classCallCheck(this, Connect);

    Connect.initialize(this);
  }
  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */


  _createClass(Connect, null, [{
    key: "initialize",
    value: function initialize(obj) {
      obj['json'] = false;
      obj['sra-ctrl-port'] = '9900';
      obj['sra-ctrl-proto'] = 'http';
      obj['ssh-legacy-signing-alg'] = false;
    }
    /**
     * Constructs a <code>Connect</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Connect} obj Optional instance to populate.
     * @return {module:model/Connect} The populated <code>Connect</code> instance.
     */

  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new Connect();

        if (data.hasOwnProperty('Helper')) {
          obj['Helper'] = _ApiClient["default"].convertToType(data['Helper'], Object);
        }

        if (data.hasOwnProperty('RcFileOverride')) {
          obj['RcFileOverride'] = _ApiClient["default"].convertToType(data['RcFileOverride'], 'String');
        }

        if (data.hasOwnProperty('bastion-ctrl-path')) {
          obj['bastion-ctrl-path'] = _ApiClient["default"].convertToType(data['bastion-ctrl-path'], 'String');
        }

        if (data.hasOwnProperty('bastion-ctrl-port')) {
          obj['bastion-ctrl-port'] = _ApiClient["default"].convertToType(data['bastion-ctrl-port'], 'String');
        }

        if (data.hasOwnProperty('bastion-ctrl-proto')) {
          obj['bastion-ctrl-proto'] = _ApiClient["default"].convertToType(data['bastion-ctrl-proto'], 'String');
        }

        if (data.hasOwnProperty('bastion-ctrl-subdomain')) {
          obj['bastion-ctrl-subdomain'] = _ApiClient["default"].convertToType(data['bastion-ctrl-subdomain'], 'String');
        }

        if (data.hasOwnProperty('cert-issuer-name')) {
          obj['cert-issuer-name'] = _ApiClient["default"].convertToType(data['cert-issuer-name'], 'String');
        }

        if (data.hasOwnProperty('gateway-url')) {
          obj['gateway-url'] = _ApiClient["default"].convertToType(data['gateway-url'], 'String');
        }

        if (data.hasOwnProperty('identity-file')) {
          obj['identity-file'] = _ApiClient["default"].convertToType(data['identity-file'], 'String');
        }

        if (data.hasOwnProperty('json')) {
          obj['json'] = _ApiClient["default"].convertToType(data['json'], 'Boolean');
        }

        if (data.hasOwnProperty('justification')) {
          obj['justification'] = _ApiClient["default"].convertToType(data['justification'], 'String');
        }

        if (data.hasOwnProperty('name')) {
          obj['name'] = _ApiClient["default"].convertToType(data['name'], 'String');
        }

        if (data.hasOwnProperty('sra-ctrl-path')) {
          obj['sra-ctrl-path'] = _ApiClient["default"].convertToType(data['sra-ctrl-path'], 'String');
        }

        if (data.hasOwnProperty('sra-ctrl-port')) {
          obj['sra-ctrl-port'] = _ApiClient["default"].convertToType(data['sra-ctrl-port'], 'String');
        }

        if (data.hasOwnProperty('sra-ctrl-proto')) {
          obj['sra-ctrl-proto'] = _ApiClient["default"].convertToType(data['sra-ctrl-proto'], 'String');
        }

        if (data.hasOwnProperty('sra-ctrl-subdomain')) {
          obj['sra-ctrl-subdomain'] = _ApiClient["default"].convertToType(data['sra-ctrl-subdomain'], 'String');
        }

        if (data.hasOwnProperty('ssh-command')) {
          obj['ssh-command'] = _ApiClient["default"].convertToType(data['ssh-command'], 'String');
        }

        if (data.hasOwnProperty('ssh-extra-args')) {
          obj['ssh-extra-args'] = _ApiClient["default"].convertToType(data['ssh-extra-args'], 'String');
        }

        if (data.hasOwnProperty('ssh-legacy-signing-alg')) {
          obj['ssh-legacy-signing-alg'] = _ApiClient["default"].convertToType(data['ssh-legacy-signing-alg'], 'Boolean');
        }

        if (data.hasOwnProperty('target')) {
          obj['target'] = _ApiClient["default"].convertToType(data['target'], 'String');
        }

        if (data.hasOwnProperty('token')) {
          obj['token'] = _ApiClient["default"].convertToType(data['token'], 'String');
        }

        if (data.hasOwnProperty('uid-token')) {
          obj['uid-token'] = _ApiClient["default"].convertToType(data['uid-token'], 'String');
        }

        if (data.hasOwnProperty('use-ssh-agent')) {
          obj['use-ssh-agent'] = _ApiClient["default"].convertToType(data['use-ssh-agent'], 'Boolean');
        }

        if (data.hasOwnProperty('via-bastion')) {
          obj['via-bastion'] = _ApiClient["default"].convertToType(data['via-bastion'], 'String');
        }

        if (data.hasOwnProperty('via-sra')) {
          obj['via-sra'] = _ApiClient["default"].convertToType(data['via-sra'], 'String');
        }
      }

      return obj;
    }
    /**
     * Validates the JSON data with respect to <code>Connect</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Connect</code>.
     */

  }, {
    key: "validateJSON",
    value: function validateJSON(data) {
      // ensure the json data is a string
      if (data['RcFileOverride'] && !(typeof data['RcFileOverride'] === 'string' || data['RcFileOverride'] instanceof String)) {
        throw new Error("Expected the field `RcFileOverride` to be a primitive type in the JSON string but got " + data['RcFileOverride']);
      } // ensure the json data is a string


      if (data['bastion-ctrl-path'] && !(typeof data['bastion-ctrl-path'] === 'string' || data['bastion-ctrl-path'] instanceof String)) {
        throw new Error("Expected the field `bastion-ctrl-path` to be a primitive type in the JSON string but got " + data['bastion-ctrl-path']);
      } // ensure the json data is a string


      if (data['bastion-ctrl-port'] && !(typeof data['bastion-ctrl-port'] === 'string' || data['bastion-ctrl-port'] instanceof String)) {
        throw new Error("Expected the field `bastion-ctrl-port` to be a primitive type in the JSON string but got " + data['bastion-ctrl-port']);
      } // ensure the json data is a string


      if (data['bastion-ctrl-proto'] && !(typeof data['bastion-ctrl-proto'] === 'string' || data['bastion-ctrl-proto'] instanceof String)) {
        throw new Error("Expected the field `bastion-ctrl-proto` to be a primitive type in the JSON string but got " + data['bastion-ctrl-proto']);
      } // ensure the json data is a string


      if (data['bastion-ctrl-subdomain'] && !(typeof data['bastion-ctrl-subdomain'] === 'string' || data['bastion-ctrl-subdomain'] instanceof String)) {
        throw new Error("Expected the field `bastion-ctrl-subdomain` to be a primitive type in the JSON string but got " + data['bastion-ctrl-subdomain']);
      } // ensure the json data is a string


      if (data['cert-issuer-name'] && !(typeof data['cert-issuer-name'] === 'string' || data['cert-issuer-name'] instanceof String)) {
        throw new Error("Expected the field `cert-issuer-name` to be a primitive type in the JSON string but got " + data['cert-issuer-name']);
      } // ensure the json data is a string


      if (data['gateway-url'] && !(typeof data['gateway-url'] === 'string' || data['gateway-url'] instanceof String)) {
        throw new Error("Expected the field `gateway-url` to be a primitive type in the JSON string but got " + data['gateway-url']);
      } // ensure the json data is a string


      if (data['identity-file'] && !(typeof data['identity-file'] === 'string' || data['identity-file'] instanceof String)) {
        throw new Error("Expected the field `identity-file` to be a primitive type in the JSON string but got " + data['identity-file']);
      } // ensure the json data is a string


      if (data['justification'] && !(typeof data['justification'] === 'string' || data['justification'] instanceof String)) {
        throw new Error("Expected the field `justification` to be a primitive type in the JSON string but got " + data['justification']);
      } // ensure the json data is a string


      if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
        throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
      } // ensure the json data is a string


      if (data['sra-ctrl-path'] && !(typeof data['sra-ctrl-path'] === 'string' || data['sra-ctrl-path'] instanceof String)) {
        throw new Error("Expected the field `sra-ctrl-path` to be a primitive type in the JSON string but got " + data['sra-ctrl-path']);
      } // ensure the json data is a string


      if (data['sra-ctrl-port'] && !(typeof data['sra-ctrl-port'] === 'string' || data['sra-ctrl-port'] instanceof String)) {
        throw new Error("Expected the field `sra-ctrl-port` to be a primitive type in the JSON string but got " + data['sra-ctrl-port']);
      } // ensure the json data is a string


      if (data['sra-ctrl-proto'] && !(typeof data['sra-ctrl-proto'] === 'string' || data['sra-ctrl-proto'] instanceof String)) {
        throw new Error("Expected the field `sra-ctrl-proto` to be a primitive type in the JSON string but got " + data['sra-ctrl-proto']);
      } // ensure the json data is a string


      if (data['sra-ctrl-subdomain'] && !(typeof data['sra-ctrl-subdomain'] === 'string' || data['sra-ctrl-subdomain'] instanceof String)) {
        throw new Error("Expected the field `sra-ctrl-subdomain` to be a primitive type in the JSON string but got " + data['sra-ctrl-subdomain']);
      } // ensure the json data is a string


      if (data['ssh-command'] && !(typeof data['ssh-command'] === 'string' || data['ssh-command'] instanceof String)) {
        throw new Error("Expected the field `ssh-command` to be a primitive type in the JSON string but got " + data['ssh-command']);
      } // ensure the json data is a string


      if (data['ssh-extra-args'] && !(typeof data['ssh-extra-args'] === 'string' || data['ssh-extra-args'] instanceof String)) {
        throw new Error("Expected the field `ssh-extra-args` to be a primitive type in the JSON string but got " + data['ssh-extra-args']);
      } // ensure the json data is a string


      if (data['target'] && !(typeof data['target'] === 'string' || data['target'] instanceof String)) {
        throw new Error("Expected the field `target` to be a primitive type in the JSON string but got " + data['target']);
      } // ensure the json data is a string


      if (data['token'] && !(typeof data['token'] === 'string' || data['token'] instanceof String)) {
        throw new Error("Expected the field `token` to be a primitive type in the JSON string but got " + data['token']);
      } // ensure the json data is a string


      if (data['uid-token'] && !(typeof data['uid-token'] === 'string' || data['uid-token'] instanceof String)) {
        throw new Error("Expected the field `uid-token` to be a primitive type in the JSON string but got " + data['uid-token']);
      } // ensure the json data is a string


      if (data['via-bastion'] && !(typeof data['via-bastion'] === 'string' || data['via-bastion'] instanceof String)) {
        throw new Error("Expected the field `via-bastion` to be a primitive type in the JSON string but got " + data['via-bastion']);
      } // ensure the json data is a string


      if (data['via-sra'] && !(typeof data['via-sra'] === 'string' || data['via-sra'] instanceof String)) {
        throw new Error("Expected the field `via-sra` to be a primitive type in the JSON string but got " + data['via-sra']);
      }

      return true;
    }
  }]);

  return Connect;
}();
/**
 * @member {Object} Helper
 */


Connect.prototype['Helper'] = undefined;
/**
 * used to override .akeyless-connect.rc in tests
 * @member {String} RcFileOverride
 */

Connect.prototype['RcFileOverride'] = undefined;
/**
 * Deprecated. use bastion-ctrl-path
 * @member {String} bastion-ctrl-path
 */

Connect.prototype['bastion-ctrl-path'] = undefined;
/**
 * Deprecated. use sra-ctrl-port
 * @member {String} bastion-ctrl-port
 */

Connect.prototype['bastion-ctrl-port'] = undefined;
/**
 * Deprecated. use sra-ctrl-proto
 * @member {String} bastion-ctrl-proto
 */

Connect.prototype['bastion-ctrl-proto'] = undefined;
/**
 * Deprecated. use sra-ctrl-subdomain
 * @member {String} bastion-ctrl-subdomain
 */

Connect.prototype['bastion-ctrl-subdomain'] = undefined;
/**
 * The Akeyless certificate issuer name
 * @member {String} cert-issuer-name
 */

Connect.prototype['cert-issuer-name'] = undefined;
/**
 * The Gateway URL (configuration management) address, e.g. http://localhost:8000
 * @member {String} gateway-url
 */

Connect.prototype['gateway-url'] = undefined;
/**
 * The file from which the identity (private key) for public key authentication is read
 * @member {String} identity-file
 */

Connect.prototype['identity-file'] = undefined;
/**
 * Set output format to JSON
 * @member {Boolean} json
 * @default false
 */

Connect.prototype['json'] = false;
/**
 * @member {String} justification
 */

Connect.prototype['justification'] = undefined;
/**
 * The Secret name (for database and AWS producers - producer name)
 * @member {String} name
 */

Connect.prototype['name'] = undefined;
/**
 * The Bastion API path
 * @member {String} sra-ctrl-path
 */

Connect.prototype['sra-ctrl-path'] = undefined;
/**
 * The Bastion API Port
 * @member {String} sra-ctrl-port
 * @default '9900'
 */

Connect.prototype['sra-ctrl-port'] = '9900';
/**
 * The SRA API protocol
 * @member {String} sra-ctrl-proto
 * @default 'http'
 */

Connect.prototype['sra-ctrl-proto'] = 'http';
/**
 * The SRA API prefix
 * @member {String} sra-ctrl-subdomain
 */

Connect.prototype['sra-ctrl-subdomain'] = undefined;
/**
 * Path to SSH executable. e.g. /usr/bin/ssh
 * @member {String} ssh-command
 */

Connect.prototype['ssh-command'] = undefined;
/**
 * Additional SSH arguments (except -i)
 * @member {String} ssh-extra-args
 */

Connect.prototype['ssh-extra-args'] = undefined;
/**
 * Set this option to output legacy ('ssh-rsa-cert-v01@openssh.com') signing algorithm name in the ssh certificate.
 * @member {Boolean} ssh-legacy-signing-alg
 * @default false
 */

Connect.prototype['ssh-legacy-signing-alg'] = false;
/**
 * The target
 * @member {String} target
 */

Connect.prototype['target'] = undefined;
/**
 * Authentication token (see `/auth` and `/configure`)
 * @member {String} token
 */

Connect.prototype['token'] = undefined;
/**
 * The universal identity token, Required only for universal_identity authentication
 * @member {String} uid-token
 */

Connect.prototype['uid-token'] = undefined;
/**
 * Deprecated
 * @member {Boolean} use-ssh-agent
 */

Connect.prototype['use-ssh-agent'] = undefined;
/**
 * Deprecated. Use via-sra
 * @member {String} via-bastion
 */

Connect.prototype['via-bastion'] = undefined;
/**
 * The jump box server
 * @member {String} via-sra
 */

Connect.prototype['via-sra'] = undefined;
var _default = Connect;
exports["default"] = _default;