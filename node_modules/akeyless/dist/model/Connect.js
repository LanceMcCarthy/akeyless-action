"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ApiClient = _interopRequireDefault(require("../ApiClient"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * The Connect model module.
 * @module model/Connect
 * @version 2.15.24
 */
var Connect = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>Connect</code>.
   * connect is a command that performs secure remote access
   * @alias module:model/Connect
   */
  function Connect() {
    _classCallCheck(this, Connect);

    Connect.initialize(this);
  }
  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */


  _createClass(Connect, null, [{
    key: "initialize",
    value: function initialize(obj) {}
    /**
     * Constructs a <code>Connect</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Connect} obj Optional instance to populate.
     * @return {module:model/Connect} The populated <code>Connect</code> instance.
     */

  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new Connect();

        if (data.hasOwnProperty('bastion-ctrl-path')) {
          obj['bastion-ctrl-path'] = _ApiClient["default"].convertToType(data['bastion-ctrl-path'], 'String');
        }

        if (data.hasOwnProperty('bastion-ctrl-port')) {
          obj['bastion-ctrl-port'] = _ApiClient["default"].convertToType(data['bastion-ctrl-port'], 'String');
        }

        if (data.hasOwnProperty('bastion-ctrl-proto')) {
          obj['bastion-ctrl-proto'] = _ApiClient["default"].convertToType(data['bastion-ctrl-proto'], 'String');
        }

        if (data.hasOwnProperty('bastion-ctrl-subdomain')) {
          obj['bastion-ctrl-subdomain'] = _ApiClient["default"].convertToType(data['bastion-ctrl-subdomain'], 'String');
        }

        if (data.hasOwnProperty('cert-issuer-name')) {
          obj['cert-issuer-name'] = _ApiClient["default"].convertToType(data['cert-issuer-name'], 'String');
        }

        if (data.hasOwnProperty('identity-file')) {
          obj['identity-file'] = _ApiClient["default"].convertToType(data['identity-file'], 'String');
        }

        if (data.hasOwnProperty('name')) {
          obj['name'] = _ApiClient["default"].convertToType(data['name'], 'String');
        }

        if (data.hasOwnProperty('password')) {
          obj['password'] = _ApiClient["default"].convertToType(data['password'], 'String');
        }

        if (data.hasOwnProperty('ssh-extra-args')) {
          obj['ssh-extra-args'] = _ApiClient["default"].convertToType(data['ssh-extra-args'], 'String');
        }

        if (data.hasOwnProperty('target')) {
          obj['target'] = _ApiClient["default"].convertToType(data['target'], 'String');
        }

        if (data.hasOwnProperty('token')) {
          obj['token'] = _ApiClient["default"].convertToType(data['token'], 'String');
        }

        if (data.hasOwnProperty('uid-token')) {
          obj['uid-token'] = _ApiClient["default"].convertToType(data['uid-token'], 'String');
        }

        if (data.hasOwnProperty('username')) {
          obj['username'] = _ApiClient["default"].convertToType(data['username'], 'String');
        }

        if (data.hasOwnProperty('via-bastion')) {
          obj['via-bastion'] = _ApiClient["default"].convertToType(data['via-bastion'], 'String');
        }
      }

      return obj;
    }
  }]);

  return Connect;
}();
/**
 * The Bastion API path
 * @member {String} bastion-ctrl-path
 */


Connect.prototype['bastion-ctrl-path'] = undefined;
/**
 * The Bastion API Port
 * @member {String} bastion-ctrl-port
 * @default '9900'
 */

Connect.prototype['bastion-ctrl-port'] = '9900';
/**
 * The Bastion API protocol
 * @member {String} bastion-ctrl-proto
 * @default 'http'
 */

Connect.prototype['bastion-ctrl-proto'] = 'http';
/**
 * The Bastion API prefix
 * @member {String} bastion-ctrl-subdomain
 */

Connect.prototype['bastion-ctrl-subdomain'] = undefined;
/**
 * The Akeyless certificate issuer name
 * @member {String} cert-issuer-name
 */

Connect.prototype['cert-issuer-name'] = undefined;
/**
 * The file from which the identity (private key) for public key authentication is read
 * @member {String} identity-file
 */

Connect.prototype['identity-file'] = undefined;
/**
 * The Secret name (for database and AWS producers - producer name)
 * @member {String} name
 */

Connect.prototype['name'] = undefined;
/**
 * Required only when the authentication process requires a username and password
 * @member {String} password
 */

Connect.prototype['password'] = undefined;
/**
 * The Use to add offical SSH arguments (except -i)
 * @member {String} ssh-extra-args
 */

Connect.prototype['ssh-extra-args'] = undefined;
/**
 * The target
 * @member {String} target
 */

Connect.prototype['target'] = undefined;
/**
 * Authentication token (see `/auth` and `/configure`)
 * @member {String} token
 */

Connect.prototype['token'] = undefined;
/**
 * The universal identity token, Required only for universal_identity authentication
 * @member {String} uid-token
 */

Connect.prototype['uid-token'] = undefined;
/**
 * Required only when the authentication process requires a username and password
 * @member {String} username
 */

Connect.prototype['username'] = undefined;
/**
 * The jump box server
 * @member {String} via-bastion
 */

Connect.prototype['via-bastion'] = undefined;
var _default = Connect;
exports["default"] = _default;