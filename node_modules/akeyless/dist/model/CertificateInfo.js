"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ApiClient = _interopRequireDefault(require("../ApiClient"));

var _Extension = _interopRequireDefault(require("./Extension"));

var _Name = _interopRequireDefault(require("./Name"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * The CertificateInfo model module.
 * @module model/CertificateInfo
 * @version 5.0.0
 */
var CertificateInfo = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>CertificateInfo</code>.
   * @alias module:model/CertificateInfo
   */
  function CertificateInfo() {
    _classCallCheck(this, CertificateInfo);

    CertificateInfo.initialize(this);
  }
  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */


  _createClass(CertificateInfo, null, [{
    key: "initialize",
    value: function initialize(obj) {}
    /**
     * Constructs a <code>CertificateInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CertificateInfo} obj Optional instance to populate.
     * @return {module:model/CertificateInfo} The populated <code>CertificateInfo</code> instance.
     */

  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new CertificateInfo();

        if (data.hasOwnProperty('ExtKeyUsage')) {
          obj['ExtKeyUsage'] = _ApiClient["default"].convertToType(data['ExtKeyUsage'], ['Number']);
        }

        if (data.hasOwnProperty('KeyUsage')) {
          obj['KeyUsage'] = _ApiClient["default"].convertToType(data['KeyUsage'], 'Number');
        }

        if (data.hasOwnProperty('crl_distribution_points')) {
          obj['crl_distribution_points'] = _ApiClient["default"].convertToType(data['crl_distribution_points'], ['String']);
        }

        if (data.hasOwnProperty('dns_names')) {
          obj['dns_names'] = _ApiClient["default"].convertToType(data['dns_names'], ['String']);
        }

        if (data.hasOwnProperty('email_addresses')) {
          obj['email_addresses'] = _ApiClient["default"].convertToType(data['email_addresses'], ['String']);
        }

        if (data.hasOwnProperty('extensions')) {
          obj['extensions'] = _ApiClient["default"].convertToType(data['extensions'], [_Extension["default"]]);
        }

        if (data.hasOwnProperty('ip_addresses')) {
          obj['ip_addresses'] = _ApiClient["default"].convertToType(data['ip_addresses'], ['String']);
        }

        if (data.hasOwnProperty('is_ca')) {
          obj['is_ca'] = _ApiClient["default"].convertToType(data['is_ca'], 'Boolean');
        }

        if (data.hasOwnProperty('issuer')) {
          obj['issuer'] = _Name["default"].constructFromObject(data['issuer']);
        }

        if (data.hasOwnProperty('issuing_certificate_url')) {
          obj['issuing_certificate_url'] = _ApiClient["default"].convertToType(data['issuing_certificate_url'], ['String']);
        }

        if (data.hasOwnProperty('key_size')) {
          obj['key_size'] = _ApiClient["default"].convertToType(data['key_size'], 'Number');
        }

        if (data.hasOwnProperty('not_after')) {
          obj['not_after'] = _ApiClient["default"].convertToType(data['not_after'], 'Date');
        }

        if (data.hasOwnProperty('not_before')) {
          obj['not_before'] = _ApiClient["default"].convertToType(data['not_before'], 'Date');
        }

        if (data.hasOwnProperty('ocsp_server')) {
          obj['ocsp_server'] = _ApiClient["default"].convertToType(data['ocsp_server'], ['String']);
        }

        if (data.hasOwnProperty('public_key_algorithm_name')) {
          obj['public_key_algorithm_name'] = _ApiClient["default"].convertToType(data['public_key_algorithm_name'], 'String');
        }

        if (data.hasOwnProperty('serial_number')) {
          obj['serial_number'] = _ApiClient["default"].convertToType(data['serial_number'], 'String');
        }

        if (data.hasOwnProperty('sha_1_fingerprint')) {
          obj['sha_1_fingerprint'] = _ApiClient["default"].convertToType(data['sha_1_fingerprint'], 'String');
        }

        if (data.hasOwnProperty('sha_256_fingerprint')) {
          obj['sha_256_fingerprint'] = _ApiClient["default"].convertToType(data['sha_256_fingerprint'], 'String');
        }

        if (data.hasOwnProperty('signature')) {
          obj['signature'] = _ApiClient["default"].convertToType(data['signature'], 'String');
        }

        if (data.hasOwnProperty('signature_algorithm_name')) {
          obj['signature_algorithm_name'] = _ApiClient["default"].convertToType(data['signature_algorithm_name'], 'String');
        }

        if (data.hasOwnProperty('subject')) {
          obj['subject'] = _Name["default"].constructFromObject(data['subject']);
        }

        if (data.hasOwnProperty('subject_public_key')) {
          obj['subject_public_key'] = _ApiClient["default"].convertToType(data['subject_public_key'], 'String');
        }

        if (data.hasOwnProperty('uris')) {
          obj['uris'] = _ApiClient["default"].convertToType(data['uris'], ['String']);
        }

        if (data.hasOwnProperty('version')) {
          obj['version'] = _ApiClient["default"].convertToType(data['version'], 'Number');
        }
      }

      return obj;
    }
    /**
     * Validates the JSON data with respect to <code>CertificateInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CertificateInfo</code>.
     */

  }, {
    key: "validateJSON",
    value: function validateJSON(data) {
      // ensure the json data is an array
      if (!Array.isArray(data['ExtKeyUsage'])) {
        throw new Error("Expected the field `ExtKeyUsage` to be an array in the JSON data but got " + data['ExtKeyUsage']);
      } // ensure the json data is an array


      if (!Array.isArray(data['crl_distribution_points'])) {
        throw new Error("Expected the field `crl_distribution_points` to be an array in the JSON data but got " + data['crl_distribution_points']);
      } // ensure the json data is an array


      if (!Array.isArray(data['dns_names'])) {
        throw new Error("Expected the field `dns_names` to be an array in the JSON data but got " + data['dns_names']);
      } // ensure the json data is an array


      if (!Array.isArray(data['email_addresses'])) {
        throw new Error("Expected the field `email_addresses` to be an array in the JSON data but got " + data['email_addresses']);
      }

      if (data['extensions']) {
        // data not null
        // ensure the json data is an array
        if (!Array.isArray(data['extensions'])) {
          throw new Error("Expected the field `extensions` to be an array in the JSON data but got " + data['extensions']);
        } // validate the optional field `extensions` (array)


        var _iterator = _createForOfIteratorHelper(data['extensions']),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var item = _step.value;

            _Extension["default"].validateJSON(item);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }

        ;
      } // ensure the json data is an array


      if (!Array.isArray(data['ip_addresses'])) {
        throw new Error("Expected the field `ip_addresses` to be an array in the JSON data but got " + data['ip_addresses']);
      } // validate the optional field `issuer`


      if (data['issuer']) {
        // data not null
        _Name["default"].validateJSON(data['issuer']);
      } // ensure the json data is an array


      if (!Array.isArray(data['issuing_certificate_url'])) {
        throw new Error("Expected the field `issuing_certificate_url` to be an array in the JSON data but got " + data['issuing_certificate_url']);
      } // ensure the json data is an array


      if (!Array.isArray(data['ocsp_server'])) {
        throw new Error("Expected the field `ocsp_server` to be an array in the JSON data but got " + data['ocsp_server']);
      } // ensure the json data is a string


      if (data['public_key_algorithm_name'] && !(typeof data['public_key_algorithm_name'] === 'string' || data['public_key_algorithm_name'] instanceof String)) {
        throw new Error("Expected the field `public_key_algorithm_name` to be a primitive type in the JSON string but got " + data['public_key_algorithm_name']);
      } // ensure the json data is a string


      if (data['serial_number'] && !(typeof data['serial_number'] === 'string' || data['serial_number'] instanceof String)) {
        throw new Error("Expected the field `serial_number` to be a primitive type in the JSON string but got " + data['serial_number']);
      } // ensure the json data is a string


      if (data['sha_1_fingerprint'] && !(typeof data['sha_1_fingerprint'] === 'string' || data['sha_1_fingerprint'] instanceof String)) {
        throw new Error("Expected the field `sha_1_fingerprint` to be a primitive type in the JSON string but got " + data['sha_1_fingerprint']);
      } // ensure the json data is a string


      if (data['sha_256_fingerprint'] && !(typeof data['sha_256_fingerprint'] === 'string' || data['sha_256_fingerprint'] instanceof String)) {
        throw new Error("Expected the field `sha_256_fingerprint` to be a primitive type in the JSON string but got " + data['sha_256_fingerprint']);
      } // ensure the json data is a string


      if (data['signature'] && !(typeof data['signature'] === 'string' || data['signature'] instanceof String)) {
        throw new Error("Expected the field `signature` to be a primitive type in the JSON string but got " + data['signature']);
      } // ensure the json data is a string


      if (data['signature_algorithm_name'] && !(typeof data['signature_algorithm_name'] === 'string' || data['signature_algorithm_name'] instanceof String)) {
        throw new Error("Expected the field `signature_algorithm_name` to be a primitive type in the JSON string but got " + data['signature_algorithm_name']);
      } // validate the optional field `subject`


      if (data['subject']) {
        // data not null
        _Name["default"].validateJSON(data['subject']);
      } // ensure the json data is a string


      if (data['subject_public_key'] && !(typeof data['subject_public_key'] === 'string' || data['subject_public_key'] instanceof String)) {
        throw new Error("Expected the field `subject_public_key` to be a primitive type in the JSON string but got " + data['subject_public_key']);
      } // ensure the json data is an array


      if (!Array.isArray(data['uris'])) {
        throw new Error("Expected the field `uris` to be an array in the JSON data but got " + data['uris']);
      }

      return true;
    }
  }]);

  return CertificateInfo;
}();
/**
 * @member {Array.<Number>} ExtKeyUsage
 */


CertificateInfo.prototype['ExtKeyUsage'] = undefined;
/**
 * KeyUsage represents the set of actions that are valid for a given key. It's a bitmap of the KeyUsage* constants.
 * @member {Number} KeyUsage
 */

CertificateInfo.prototype['KeyUsage'] = undefined;
/**
 * @member {Array.<String>} crl_distribution_points
 */

CertificateInfo.prototype['crl_distribution_points'] = undefined;
/**
 * @member {Array.<String>} dns_names
 */

CertificateInfo.prototype['dns_names'] = undefined;
/**
 * @member {Array.<String>} email_addresses
 */

CertificateInfo.prototype['email_addresses'] = undefined;
/**
 * @member {Array.<module:model/Extension>} extensions
 */

CertificateInfo.prototype['extensions'] = undefined;
/**
 * @member {Array.<String>} ip_addresses
 */

CertificateInfo.prototype['ip_addresses'] = undefined;
/**
 * @member {Boolean} is_ca
 */

CertificateInfo.prototype['is_ca'] = undefined;
/**
 * @member {module:model/Name} issuer
 */

CertificateInfo.prototype['issuer'] = undefined;
/**
 * @member {Array.<String>} issuing_certificate_url
 */

CertificateInfo.prototype['issuing_certificate_url'] = undefined;
/**
 * @member {Number} key_size
 */

CertificateInfo.prototype['key_size'] = undefined;
/**
 * @member {Date} not_after
 */

CertificateInfo.prototype['not_after'] = undefined;
/**
 * @member {Date} not_before
 */

CertificateInfo.prototype['not_before'] = undefined;
/**
 * @member {Array.<String>} ocsp_server
 */

CertificateInfo.prototype['ocsp_server'] = undefined;
/**
 * @member {String} public_key_algorithm_name
 */

CertificateInfo.prototype['public_key_algorithm_name'] = undefined;
/**
 * @member {String} serial_number
 */

CertificateInfo.prototype['serial_number'] = undefined;
/**
 * @member {String} sha_1_fingerprint
 */

CertificateInfo.prototype['sha_1_fingerprint'] = undefined;
/**
 * @member {String} sha_256_fingerprint
 */

CertificateInfo.prototype['sha_256_fingerprint'] = undefined;
/**
 * @member {String} signature
 */

CertificateInfo.prototype['signature'] = undefined;
/**
 * @member {String} signature_algorithm_name
 */

CertificateInfo.prototype['signature_algorithm_name'] = undefined;
/**
 * @member {module:model/Name} subject
 */

CertificateInfo.prototype['subject'] = undefined;
/**
 * @member {String} subject_public_key
 */

CertificateInfo.prototype['subject_public_key'] = undefined;
/**
 * @member {Array.<String>} uris
 */

CertificateInfo.prototype['uris'] = undefined;
/**
 * @member {Number} version
 */

CertificateInfo.prototype['version'] = undefined;
var _default = CertificateInfo;
exports["default"] = _default;