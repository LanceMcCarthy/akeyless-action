"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ApiClient = _interopRequireDefault(require("../ApiClient"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * The UploadPKCS12 model module.
 * @module model/UploadPKCS12
 * @version 3.4.0
 */
var UploadPKCS12 = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>UploadPKCS12</code>.
   * @alias module:model/UploadPKCS12
   * @param _in {String} PKCS#12 input file (private key and certificate only)
   * @param name {String} Name of key to be created
   * @param passphrase {String} Passphrase to unlock the pkcs#12 bundle
   */
  function UploadPKCS12(_in, name, passphrase) {
    _classCallCheck(this, UploadPKCS12);

    UploadPKCS12.initialize(this, _in, name, passphrase);
  }
  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */


  _createClass(UploadPKCS12, null, [{
    key: "initialize",
    value: function initialize(obj, _in, name, passphrase) {
      obj['in'] = _in;
      obj['name'] = name;
      obj['passphrase'] = passphrase;
    }
    /**
     * Constructs a <code>UploadPKCS12</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UploadPKCS12} obj Optional instance to populate.
     * @return {module:model/UploadPKCS12} The populated <code>UploadPKCS12</code> instance.
     */

  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new UploadPKCS12();

        if (data.hasOwnProperty('customer-frg-id')) {
          obj['customer-frg-id'] = _ApiClient["default"].convertToType(data['customer-frg-id'], 'String');
        }

        if (data.hasOwnProperty('delete_protection')) {
          obj['delete_protection'] = _ApiClient["default"].convertToType(data['delete_protection'], 'String');
        }

        if (data.hasOwnProperty('description')) {
          obj['description'] = _ApiClient["default"].convertToType(data['description'], 'String');
        }

        if (data.hasOwnProperty('in')) {
          obj['in'] = _ApiClient["default"].convertToType(data['in'], 'String');
        }

        if (data.hasOwnProperty('json')) {
          obj['json'] = _ApiClient["default"].convertToType(data['json'], 'Boolean');
        }

        if (data.hasOwnProperty('metadata')) {
          obj['metadata'] = _ApiClient["default"].convertToType(data['metadata'], 'String');
        }

        if (data.hasOwnProperty('name')) {
          obj['name'] = _ApiClient["default"].convertToType(data['name'], 'String');
        }

        if (data.hasOwnProperty('passphrase')) {
          obj['passphrase'] = _ApiClient["default"].convertToType(data['passphrase'], 'String');
        }

        if (data.hasOwnProperty('split-level')) {
          obj['split-level'] = _ApiClient["default"].convertToType(data['split-level'], 'Number');
        }

        if (data.hasOwnProperty('tag')) {
          obj['tag'] = _ApiClient["default"].convertToType(data['tag'], ['String']);
        }

        if (data.hasOwnProperty('token')) {
          obj['token'] = _ApiClient["default"].convertToType(data['token'], 'String');
        }

        if (data.hasOwnProperty('uid-token')) {
          obj['uid-token'] = _ApiClient["default"].convertToType(data['uid-token'], 'String');
        }
      }

      return obj;
    }
  }]);

  return UploadPKCS12;
}();
/**
 * The customer fragment ID that will be used to split the key (if empty, the key will be created independently of a customer fragment)
 * @member {String} customer-frg-id
 */


UploadPKCS12.prototype['customer-frg-id'] = undefined;
/**
 * Protection from accidental deletion of this item [true/false]
 * @member {String} delete_protection
 */

UploadPKCS12.prototype['delete_protection'] = undefined;
/**
 * Description of the object
 * @member {String} description
 */

UploadPKCS12.prototype['description'] = undefined;
/**
 * PKCS#12 input file (private key and certificate only)
 * @member {String} in
 */

UploadPKCS12.prototype['in'] = undefined;
/**
 * Set output format to JSON
 * @member {Boolean} json
 * @default false
 */

UploadPKCS12.prototype['json'] = false;
/**
 * Deprecated - use description
 * @member {String} metadata
 */

UploadPKCS12.prototype['metadata'] = undefined;
/**
 * Name of key to be created
 * @member {String} name
 */

UploadPKCS12.prototype['name'] = undefined;
/**
 * Passphrase to unlock the pkcs#12 bundle
 * @member {String} passphrase
 */

UploadPKCS12.prototype['passphrase'] = undefined;
/**
 * The number of fragments that the item will be split into
 * @member {Number} split-level
 * @default 2
 */

UploadPKCS12.prototype['split-level'] = 2;
/**
 * List of the tags attached to this key
 * @member {Array.<String>} tag
 */

UploadPKCS12.prototype['tag'] = undefined;
/**
 * Authentication token (see `/auth` and `/configure`)
 * @member {String} token
 */

UploadPKCS12.prototype['token'] = undefined;
/**
 * The universal identity token, Required only for universal_identity authentication
 * @member {String} uid-token
 */

UploadPKCS12.prototype['uid-token'] = undefined;
var _default = UploadPKCS12;
exports["default"] = _default;